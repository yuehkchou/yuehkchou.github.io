/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/aos/dist/aos.js":
/*!**************************************!*\
  !*** ./node_modules/aos/dist/aos.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (e, t) {
  "object" == ( false ? undefined : _typeof(exports)) && "object" == ( false ? undefined : _typeof(module)) ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  return function (e) {
    function t(o) {
      if (n[o]) return n[o].exports;
      var i = n[o] = {
        exports: {},
        id: o,
        loaded: !1
      };
      return e[o].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
    }

    var n = {};
    return t.m = e, t.c = n, t.p = "dist/", t(0);
  }([function (e, t, n) {
    "use strict";

    function o(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }

    var i = Object.assign || function (e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];

        for (var o in n) {
          Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
        }
      }

      return e;
    },
        r = n(1),
        a = (o(r), n(6)),
        u = o(a),
        c = n(7),
        s = o(c),
        f = n(8),
        d = o(f),
        l = n(9),
        p = o(l),
        m = n(10),
        b = o(m),
        v = n(11),
        y = o(v),
        g = n(14),
        h = o(g),
        w = [],
        k = !1,
        x = {
      offset: 120,
      delay: 0,
      easing: "ease",
      duration: 400,
      disable: !1,
      once: !1,
      startEvent: "DOMContentLoaded",
      throttleDelay: 99,
      debounceDelay: 50,
      disableMutationObserver: !1
    },
        j = function j() {
      var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if (e && (k = !0), k) return w = (0, y.default)(w, x), (0, b.default)(w, x.once), w;
    },
        O = function O() {
      w = (0, h.default)(), j();
    },
        M = function M() {
      w.forEach(function (e, t) {
        e.node.removeAttribute("data-aos"), e.node.removeAttribute("data-aos-easing"), e.node.removeAttribute("data-aos-duration"), e.node.removeAttribute("data-aos-delay");
      });
    },
        S = function S(e) {
      return e === !0 || "mobile" === e && p.default.mobile() || "phone" === e && p.default.phone() || "tablet" === e && p.default.tablet() || "function" == typeof e && e() === !0;
    },
        _ = function _(e) {
      x = i(x, e), w = (0, h.default)();
      var t = document.all && !window.atob;
      return S(x.disable) || t ? M() : (x.disableMutationObserver || d.default.isSupported() || (console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '), x.disableMutationObserver = !0), document.querySelector("body").setAttribute("data-aos-easing", x.easing), document.querySelector("body").setAttribute("data-aos-duration", x.duration), document.querySelector("body").setAttribute("data-aos-delay", x.delay), "DOMContentLoaded" === x.startEvent && ["complete", "interactive"].indexOf(document.readyState) > -1 ? j(!0) : "load" === x.startEvent ? window.addEventListener(x.startEvent, function () {
        j(!0);
      }) : document.addEventListener(x.startEvent, function () {
        j(!0);
      }), window.addEventListener("resize", (0, s.default)(j, x.debounceDelay, !0)), window.addEventListener("orientationchange", (0, s.default)(j, x.debounceDelay, !0)), window.addEventListener("scroll", (0, u.default)(function () {
        (0, b.default)(w, x.once);
      }, x.throttleDelay)), x.disableMutationObserver || d.default.ready("[data-aos]", O), w);
    };

    e.exports = {
      init: _,
      refresh: j,
      refreshHard: O
    };
  }, function (e, t) {},,,,, function (e, t) {
    (function (t) {
      "use strict";

      function n(e, t, n) {
        function o(t) {
          var n = b,
              o = v;
          return b = v = void 0, k = t, g = e.apply(o, n);
        }

        function r(e) {
          return k = e, h = setTimeout(f, t), M ? o(e) : g;
        }

        function a(e) {
          var n = e - w,
              o = e - k,
              i = t - n;
          return S ? j(i, y - o) : i;
        }

        function c(e) {
          var n = e - w,
              o = e - k;
          return void 0 === w || n >= t || n < 0 || S && o >= y;
        }

        function f() {
          var e = O();
          return c(e) ? d(e) : void (h = setTimeout(f, a(e)));
        }

        function d(e) {
          return h = void 0, _ && b ? o(e) : (b = v = void 0, g);
        }

        function l() {
          void 0 !== h && clearTimeout(h), k = 0, b = w = v = h = void 0;
        }

        function p() {
          return void 0 === h ? g : d(O());
        }

        function m() {
          var e = O(),
              n = c(e);

          if (b = arguments, v = this, w = e, n) {
            if (void 0 === h) return r(w);
            if (S) return h = setTimeout(f, t), o(w);
          }

          return void 0 === h && (h = setTimeout(f, t)), g;
        }

        var b,
            v,
            y,
            g,
            h,
            w,
            k = 0,
            M = !1,
            S = !1,
            _ = !0;

        if ("function" != typeof e) throw new TypeError(s);
        return t = u(t) || 0, i(n) && (M = !!n.leading, S = "maxWait" in n, y = S ? x(u(n.maxWait) || 0, t) : y, _ = "trailing" in n ? !!n.trailing : _), m.cancel = l, m.flush = p, m;
      }

      function o(e, t, o) {
        var r = !0,
            a = !0;
        if ("function" != typeof e) throw new TypeError(s);
        return i(o) && (r = "leading" in o ? !!o.leading : r, a = "trailing" in o ? !!o.trailing : a), n(e, t, {
          leading: r,
          maxWait: t,
          trailing: a
        });
      }

      function i(e) {
        var t = "undefined" == typeof e ? "undefined" : c(e);
        return !!e && ("object" == t || "function" == t);
      }

      function r(e) {
        return !!e && "object" == ("undefined" == typeof e ? "undefined" : c(e));
      }

      function a(e) {
        return "symbol" == ("undefined" == typeof e ? "undefined" : c(e)) || r(e) && k.call(e) == d;
      }

      function u(e) {
        if ("number" == typeof e) return e;
        if (a(e)) return f;

        if (i(e)) {
          var t = "function" == typeof e.valueOf ? e.valueOf() : e;
          e = i(t) ? t + "" : t;
        }

        if ("string" != typeof e) return 0 === e ? e : +e;
        e = e.replace(l, "");
        var n = m.test(e);
        return n || b.test(e) ? v(e.slice(2), n ? 2 : 8) : p.test(e) ? f : +e;
      }

      var c = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
      },
          s = "Expected a function",
          f = NaN,
          d = "[object Symbol]",
          l = /^\s+|\s+$/g,
          p = /^[-+]0x[0-9a-f]+$/i,
          m = /^0b[01]+$/i,
          b = /^0o[0-7]+$/i,
          v = parseInt,
          y = "object" == ("undefined" == typeof t ? "undefined" : c(t)) && t && t.Object === Object && t,
          g = "object" == ("undefined" == typeof self ? "undefined" : c(self)) && self && self.Object === Object && self,
          h = y || g || Function("return this")(),
          w = Object.prototype,
          k = w.toString,
          x = Math.max,
          j = Math.min,
          O = function O() {
        return h.Date.now();
      };

      e.exports = o;
    }).call(t, function () {
      return this;
    }());
  }, function (e, t) {
    (function (t) {
      "use strict";

      function n(e, t, n) {
        function i(t) {
          var n = b,
              o = v;
          return b = v = void 0, O = t, g = e.apply(o, n);
        }

        function r(e) {
          return O = e, h = setTimeout(f, t), M ? i(e) : g;
        }

        function u(e) {
          var n = e - w,
              o = e - O,
              i = t - n;
          return S ? x(i, y - o) : i;
        }

        function s(e) {
          var n = e - w,
              o = e - O;
          return void 0 === w || n >= t || n < 0 || S && o >= y;
        }

        function f() {
          var e = j();
          return s(e) ? d(e) : void (h = setTimeout(f, u(e)));
        }

        function d(e) {
          return h = void 0, _ && b ? i(e) : (b = v = void 0, g);
        }

        function l() {
          void 0 !== h && clearTimeout(h), O = 0, b = w = v = h = void 0;
        }

        function p() {
          return void 0 === h ? g : d(j());
        }

        function m() {
          var e = j(),
              n = s(e);

          if (b = arguments, v = this, w = e, n) {
            if (void 0 === h) return r(w);
            if (S) return h = setTimeout(f, t), i(w);
          }

          return void 0 === h && (h = setTimeout(f, t)), g;
        }

        var b,
            v,
            y,
            g,
            h,
            w,
            O = 0,
            M = !1,
            S = !1,
            _ = !0;

        if ("function" != typeof e) throw new TypeError(c);
        return t = a(t) || 0, o(n) && (M = !!n.leading, S = "maxWait" in n, y = S ? k(a(n.maxWait) || 0, t) : y, _ = "trailing" in n ? !!n.trailing : _), m.cancel = l, m.flush = p, m;
      }

      function o(e) {
        var t = "undefined" == typeof e ? "undefined" : u(e);
        return !!e && ("object" == t || "function" == t);
      }

      function i(e) {
        return !!e && "object" == ("undefined" == typeof e ? "undefined" : u(e));
      }

      function r(e) {
        return "symbol" == ("undefined" == typeof e ? "undefined" : u(e)) || i(e) && w.call(e) == f;
      }

      function a(e) {
        if ("number" == typeof e) return e;
        if (r(e)) return s;

        if (o(e)) {
          var t = "function" == typeof e.valueOf ? e.valueOf() : e;
          e = o(t) ? t + "" : t;
        }

        if ("string" != typeof e) return 0 === e ? e : +e;
        e = e.replace(d, "");
        var n = p.test(e);
        return n || m.test(e) ? b(e.slice(2), n ? 2 : 8) : l.test(e) ? s : +e;
      }

      var u = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
      },
          c = "Expected a function",
          s = NaN,
          f = "[object Symbol]",
          d = /^\s+|\s+$/g,
          l = /^[-+]0x[0-9a-f]+$/i,
          p = /^0b[01]+$/i,
          m = /^0o[0-7]+$/i,
          b = parseInt,
          v = "object" == ("undefined" == typeof t ? "undefined" : u(t)) && t && t.Object === Object && t,
          y = "object" == ("undefined" == typeof self ? "undefined" : u(self)) && self && self.Object === Object && self,
          g = v || y || Function("return this")(),
          h = Object.prototype,
          w = h.toString,
          k = Math.max,
          x = Math.min,
          j = function j() {
        return g.Date.now();
      };

      e.exports = n;
    }).call(t, function () {
      return this;
    }());
  }, function (e, t) {
    "use strict";

    function n(e) {
      var t = void 0,
          o = void 0,
          i = void 0;

      for (t = 0; t < e.length; t += 1) {
        if (o = e[t], o.dataset && o.dataset.aos) return !0;
        if (i = o.children && n(o.children)) return !0;
      }

      return !1;
    }

    function o() {
      return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
    }

    function i() {
      return !!o();
    }

    function r(e, t) {
      var n = window.document,
          i = o(),
          r = new i(a);
      u = t, r.observe(n.documentElement, {
        childList: !0,
        subtree: !0,
        removedNodes: !0
      });
    }

    function a(e) {
      e && e.forEach(function (e) {
        var t = Array.prototype.slice.call(e.addedNodes),
            o = Array.prototype.slice.call(e.removedNodes),
            i = t.concat(o);
        if (n(i)) return u();
      });
    }

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var u = function u() {};

    t.default = {
      isSupported: i,
      ready: r
    };
  }, function (e, t) {
    "use strict";

    function n(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }

    function o() {
      return navigator.userAgent || navigator.vendor || window.opera || "";
    }

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var i = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var o = t[n];
          o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
        }
      }

      return function (t, n, o) {
        return n && e(t.prototype, n), o && e(t, o), t;
      };
    }(),
        r = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,
        a = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,
        u = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,
        c = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,
        s = function () {
      function e() {
        n(this, e);
      }

      return i(e, [{
        key: "phone",
        value: function value() {
          var e = o();
          return !(!r.test(e) && !a.test(e.substr(0, 4)));
        }
      }, {
        key: "mobile",
        value: function value() {
          var e = o();
          return !(!u.test(e) && !c.test(e.substr(0, 4)));
        }
      }, {
        key: "tablet",
        value: function value() {
          return this.mobile() && !this.phone();
        }
      }]), e;
    }();

    t.default = new s();
  }, function (e, t) {
    "use strict";

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var n = function n(e, t, _n) {
      var o = e.node.getAttribute("data-aos-once");
      t > e.position ? e.node.classList.add("aos-animate") : "undefined" != typeof o && ("false" === o || !_n && "true" !== o) && e.node.classList.remove("aos-animate");
    },
        o = function o(e, t) {
      var o = window.pageYOffset,
          i = window.innerHeight;
      e.forEach(function (e, r) {
        n(e, i + o, t);
      });
    };

    t.default = o;
  }, function (e, t, n) {
    "use strict";

    function o(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var i = n(12),
        r = o(i),
        a = function a(e, t) {
      return e.forEach(function (e, n) {
        e.node.classList.add("aos-init"), e.position = (0, r.default)(e.node, t.offset);
      }), e;
    };

    t.default = a;
  }, function (e, t, n) {
    "use strict";

    function o(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var i = n(13),
        r = o(i),
        a = function a(e, t) {
      var n = 0,
          o = 0,
          i = window.innerHeight,
          a = {
        offset: e.getAttribute("data-aos-offset"),
        anchor: e.getAttribute("data-aos-anchor"),
        anchorPlacement: e.getAttribute("data-aos-anchor-placement")
      };

      switch (a.offset && !isNaN(a.offset) && (o = parseInt(a.offset)), a.anchor && document.querySelectorAll(a.anchor) && (e = document.querySelectorAll(a.anchor)[0]), n = (0, r.default)(e).top, a.anchorPlacement) {
        case "top-bottom":
          break;

        case "center-bottom":
          n += e.offsetHeight / 2;
          break;

        case "bottom-bottom":
          n += e.offsetHeight;
          break;

        case "top-center":
          n += i / 2;
          break;

        case "bottom-center":
          n += i / 2 + e.offsetHeight;
          break;

        case "center-center":
          n += i / 2 + e.offsetHeight / 2;
          break;

        case "top-top":
          n += i;
          break;

        case "bottom-top":
          n += e.offsetHeight + i;
          break;

        case "center-top":
          n += e.offsetHeight / 2 + i;
      }

      return a.anchorPlacement || a.offset || isNaN(t) || (o = t), n + o;
    };

    t.default = a;
  }, function (e, t) {
    "use strict";

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var n = function n(e) {
      for (var t = 0, n = 0; e && !isNaN(e.offsetLeft) && !isNaN(e.offsetTop);) {
        t += e.offsetLeft - ("BODY" != e.tagName ? e.scrollLeft : 0), n += e.offsetTop - ("BODY" != e.tagName ? e.scrollTop : 0), e = e.offsetParent;
      }

      return {
        top: n,
        left: t
      };
    };

    t.default = n;
  }, function (e, t) {
    "use strict";

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var n = function n(e) {
      return e = e || document.querySelectorAll("[data-aos]"), Array.prototype.map.call(e, function (e) {
        return {
          node: e
        };
      });
    };

    t.default = n;
  }]);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/foundation-sites/dist/js/npm.js":
/*!******************************************************!*\
  !*** ./node_modules/foundation-sites/dist/js/npm.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_foundation_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../js/foundation.core */ "./node_modules/foundation-sites/js/foundation.core.js");
/* harmony import */ var _js_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../js/foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _js_foundation_util_box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../js/foundation.util.box */ "./node_modules/foundation-sites/js/foundation.util.box.js");
/* harmony import */ var _js_foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../js/foundation.util.imageLoader */ "./node_modules/foundation-sites/js/foundation.util.imageLoader.js");
/* harmony import */ var _js_foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../js/foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _js_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../js/foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _js_foundation_util_motion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../js/foundation.util.motion */ "./node_modules/foundation-sites/js/foundation.util.motion.js");
/* harmony import */ var _js_foundation_util_nest__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../js/foundation.util.nest */ "./node_modules/foundation-sites/js/foundation.util.nest.js");
/* harmony import */ var _js_foundation_util_timer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../js/foundation.util.timer */ "./node_modules/foundation-sites/js/foundation.util.timer.js");
/* harmony import */ var _js_foundation_util_touch__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../js/foundation.util.touch */ "./node_modules/foundation-sites/js/foundation.util.touch.js");
/* harmony import */ var _js_foundation_util_triggers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../js/foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");
/* harmony import */ var _js_foundation_abide__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../js/foundation.abide */ "./node_modules/foundation-sites/js/foundation.abide.js");
/* harmony import */ var _js_foundation_accordion__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../js/foundation.accordion */ "./node_modules/foundation-sites/js/foundation.accordion.js");
/* harmony import */ var _js_foundation_accordionMenu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../js/foundation.accordionMenu */ "./node_modules/foundation-sites/js/foundation.accordionMenu.js");
/* harmony import */ var _js_foundation_drilldown__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../js/foundation.drilldown */ "./node_modules/foundation-sites/js/foundation.drilldown.js");
/* harmony import */ var _js_foundation_dropdown__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../js/foundation.dropdown */ "./node_modules/foundation-sites/js/foundation.dropdown.js");
/* harmony import */ var _js_foundation_dropdownMenu__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../js/foundation.dropdownMenu */ "./node_modules/foundation-sites/js/foundation.dropdownMenu.js");
/* harmony import */ var _js_foundation_equalizer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../js/foundation.equalizer */ "./node_modules/foundation-sites/js/foundation.equalizer.js");
/* harmony import */ var _js_foundation_interchange__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../js/foundation.interchange */ "./node_modules/foundation-sites/js/foundation.interchange.js");
/* harmony import */ var _js_foundation_magellan__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../js/foundation.magellan */ "./node_modules/foundation-sites/js/foundation.magellan.js");
/* harmony import */ var _js_foundation_offcanvas__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../js/foundation.offcanvas */ "./node_modules/foundation-sites/js/foundation.offcanvas.js");
/* harmony import */ var _js_foundation_orbit__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../js/foundation.orbit */ "./node_modules/foundation-sites/js/foundation.orbit.js");
/* harmony import */ var _js_foundation_responsiveMenu__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../js/foundation.responsiveMenu */ "./node_modules/foundation-sites/js/foundation.responsiveMenu.js");
/* harmony import */ var _js_foundation_responsiveToggle__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../js/foundation.responsiveToggle */ "./node_modules/foundation-sites/js/foundation.responsiveToggle.js");
/* harmony import */ var _js_foundation_reveal__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../js/foundation.reveal */ "./node_modules/foundation-sites/js/foundation.reveal.js");
/* harmony import */ var _js_foundation_slider__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../js/foundation.slider */ "./node_modules/foundation-sites/js/foundation.slider.js");
/* harmony import */ var _js_foundation_smoothScroll__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../js/foundation.smoothScroll */ "./node_modules/foundation-sites/js/foundation.smoothScroll.js");
/* harmony import */ var _js_foundation_sticky__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../js/foundation.sticky */ "./node_modules/foundation-sites/js/foundation.sticky.js");
/* harmony import */ var _js_foundation_tabs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../js/foundation.tabs */ "./node_modules/foundation-sites/js/foundation.tabs.js");
/* harmony import */ var _js_foundation_toggler__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../js/foundation.toggler */ "./node_modules/foundation-sites/js/foundation.toggler.js");
/* harmony import */ var _js_foundation_tooltip__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../js/foundation.tooltip */ "./node_modules/foundation-sites/js/foundation.tooltip.js");
/* harmony import */ var _js_foundation_responsiveAccordionTabs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../js/foundation.responsiveAccordionTabs */ "./node_modules/foundation-sites/js/foundation.responsiveAccordionTabs.js");


_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].addToJquery(jquery__WEBPACK_IMPORTED_MODULE_0___default.a); // Add Foundation Utils to Foundation global namespace for backwards
// compatibility.


_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].rtl = _js_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["rtl"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].GetYoDigits = _js_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["GetYoDigits"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].transitionend = _js_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["transitionend"];







_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].Box = _js_foundation_util_box__WEBPACK_IMPORTED_MODULE_3__["Box"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].onImagesLoaded = _js_foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_4__["onImagesLoaded"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].Keyboard = _js_foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_5__["Keyboard"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].MediaQuery = _js_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_6__["MediaQuery"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].Motion = _js_foundation_util_motion__WEBPACK_IMPORTED_MODULE_7__["Motion"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].Move = _js_foundation_util_motion__WEBPACK_IMPORTED_MODULE_7__["Move"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].Nest = _js_foundation_util_nest__WEBPACK_IMPORTED_MODULE_8__["Nest"];
_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].Timer = _js_foundation_util_timer__WEBPACK_IMPORTED_MODULE_9__["Timer"]; // Touch and Triggers previously were almost purely sede effect driven,
// so n../../js// need to add it to Foundation, just init them.


_js_foundation_util_touch__WEBPACK_IMPORTED_MODULE_10__["Touch"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

_js_foundation_util_triggers__WEBPACK_IMPORTED_MODULE_11__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a, _js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"]);

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_abide__WEBPACK_IMPORTED_MODULE_12__["Abide"], 'Abide');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_accordion__WEBPACK_IMPORTED_MODULE_13__["Accordion"], 'Accordion');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_accordionMenu__WEBPACK_IMPORTED_MODULE_14__["AccordionMenu"], 'AccordionMenu');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_drilldown__WEBPACK_IMPORTED_MODULE_15__["Drilldown"], 'Drilldown');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_dropdown__WEBPACK_IMPORTED_MODULE_16__["Dropdown"], 'Dropdown');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_dropdownMenu__WEBPACK_IMPORTED_MODULE_17__["DropdownMenu"], 'DropdownMenu');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_equalizer__WEBPACK_IMPORTED_MODULE_18__["Equalizer"], 'Equalizer');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_interchange__WEBPACK_IMPORTED_MODULE_19__["Interchange"], 'Interchange');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_magellan__WEBPACK_IMPORTED_MODULE_20__["Magellan"], 'Magellan');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_offcanvas__WEBPACK_IMPORTED_MODULE_21__["OffCanvas"], 'OffCanvas');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_orbit__WEBPACK_IMPORTED_MODULE_22__["Orbit"], 'Orbit');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_responsiveMenu__WEBPACK_IMPORTED_MODULE_23__["ResponsiveMenu"], 'ResponsiveMenu');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_responsiveToggle__WEBPACK_IMPORTED_MODULE_24__["ResponsiveToggle"], 'ResponsiveToggle');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_reveal__WEBPACK_IMPORTED_MODULE_25__["Reveal"], 'Reveal');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_slider__WEBPACK_IMPORTED_MODULE_26__["Slider"], 'Slider');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_smoothScroll__WEBPACK_IMPORTED_MODULE_27__["SmoothScroll"], 'SmoothScroll');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_sticky__WEBPACK_IMPORTED_MODULE_28__["Sticky"], 'Sticky');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_tabs__WEBPACK_IMPORTED_MODULE_29__["Tabs"], 'Tabs');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_toggler__WEBPACK_IMPORTED_MODULE_30__["Toggler"], 'Toggler');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_tooltip__WEBPACK_IMPORTED_MODULE_31__["Tooltip"], 'Tooltip');

_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"].plugin(_js_foundation_responsiveAccordionTabs__WEBPACK_IMPORTED_MODULE_32__["ResponsiveAccordionTabs"], 'ResponsiveAccordionTabs');
/* harmony default export */ __webpack_exports__["default"] = (_js_foundation_core__WEBPACK_IMPORTED_MODULE_1__["Foundation"]);

/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.abide.js":
/*!**************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.abide.js ***!
  \**************************************************************/
/*! exports provided: Abide */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Abide", function() { return Abide; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



/**
 * Abide module.
 * @module foundation.abide
 */

var Abide =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Abide, _Plugin);

  function Abide() {
    _classCallCheck(this, Abide);

    return _possibleConstructorReturn(this, _getPrototypeOf(Abide).apply(this, arguments));
  }

  _createClass(Abide, [{
    key: "_setup",

    /**
     * Creates a new instance of Abide.
     * @class
     * @name Abide
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(true, {}, Abide.defaults, this.$element.data(), options);
      this.className = 'Abide'; // ie9 back compat

      this._init();
    }
    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      this.$inputs = this.$element.find('input, textarea, select');

      this._events();
    }
    /**
     * Initializes events for Abide.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this2 = this;

      this.$element.off('.abide').on('reset.zf.abide', function () {
        _this2.resetForm();
      }).on('submit.zf.abide', function () {
        return _this2.validateForm();
      });

      if (this.options.validateOn === 'fieldChange') {
        this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {
          _this2.validateInput(jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target));
        });
      }

      if (this.options.liveValidate) {
        this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {
          _this2.validateInput(jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target));
        });
      }

      if (this.options.validateOnBlur) {
        this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {
          _this2.validateInput(jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target));
        });
      }
    }
    /**
     * Calls necessary functions to update Abide upon DOM change
     * @private
     */

  }, {
    key: "_reflow",
    value: function _reflow() {
      this._init();
    }
    /**
     * Checks whether or not a form element has the required attribute and if it's checked or not
     * @param {Object} element - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */

  }, {
    key: "requiredCheck",
    value: function requiredCheck($el) {
      if (!$el.attr('required')) return true;
      var isGood = true;

      switch ($el[0].type) {
        case 'checkbox':
          isGood = $el[0].checked;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          var opt = $el.find('option:selected');
          if (!opt.length || !opt.val()) isGood = false;
          break;

        default:
          if (!$el.val() || !$el.val().length) isGood = false;
      }

      return isGood;
    }
    /**
     * Get:
     * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:
     *   1. The element's direct sibling('s).
     *   2. The element's parent's children.
     * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.
     *
     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
     *
     * @param {Object} $el - jQuery object to use as reference to find the form error selector.
     * @returns {Object} jQuery object with the selector.
     */

  }, {
    key: "findFormError",
    value: function findFormError($el) {
      var id = $el[0].id;
      var $error = $el.siblings(this.options.formErrorSelector);

      if (!$error.length) {
        $error = $el.parent().find(this.options.formErrorSelector);
      }

      $error = $error.add(this.$element.find("[data-form-error-for=\"".concat(id, "\"]")));
      return $error;
    }
    /**
     * Get the first element in this order:
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */

  }, {
    key: "findLabel",
    value: function findLabel($el) {
      var id = $el[0].id;
      var $label = this.$element.find("label[for=\"".concat(id, "\"]"));

      if (!$label.length) {
        return $el.closest('label');
      }

      return $label;
    }
    /**
     * Get the set of labels associated with a set of radio els in this order
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */

  }, {
    key: "findRadioLabels",
    value: function findRadioLabels($els) {
      var _this3 = this;

      var labels = $els.map(function (i, el) {
        var id = el.id;

        var $label = _this3.$element.find("label[for=\"".concat(id, "\"]"));

        if (!$label.length) {
          $label = jquery__WEBPACK_IMPORTED_MODULE_0___default()(el).closest('label');
        }

        return $label[0];
      });
      return jquery__WEBPACK_IMPORTED_MODULE_0___default()(labels);
    }
    /**
     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
     * @param {Object} $el - jQuery object to add the class to
     */

  }, {
    key: "addErrorClasses",
    value: function addErrorClasses($el) {
      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.addClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.addClass(this.options.formErrorClass);
      }

      $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
    }
    /**
     * Remove CSS error classes etc from an entire radio button group
     * @param {String} groupName - A string that specifies the name of a radio button group
     *
     */

  }, {
    key: "removeRadioErrorClasses",
    value: function removeRadioErrorClasses(groupName) {
      var $els = this.$element.find(":radio[name=\"".concat(groupName, "\"]"));
      var $labels = this.findRadioLabels($els);
      var $formErrors = this.findFormError($els);

      if ($labels.length) {
        $labels.removeClass(this.options.labelErrorClass);
      }

      if ($formErrors.length) {
        $formErrors.removeClass(this.options.formErrorClass);
      }

      $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }
    /**
     * Removes CSS error class as specified by the Abide settings from the label, input, and the form
     * @param {Object} $el - jQuery object to remove the class from
     */

  }, {
    key: "removeErrorClasses",
    value: function removeErrorClasses($el) {
      // radios need to clear all of the els
      if ($el[0].type == 'radio') {
        return this.removeRadioErrorClasses($el.attr('name'));
      }

      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.removeClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.removeClass(this.options.formErrorClass);
      }

      $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }
    /**
     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.
     * Ignores inputs with data-abide-ignore, type="hidden" or disabled attributes set
     * @fires Abide#invalid
     * @fires Abide#valid
     * @param {Object} element - jQuery object to validate, should be an HTML input
     * @returns {Boolean} goodToGo - If the input is valid or not.
     */

  }, {
    key: "validateInput",
    value: function validateInput($el) {
      var clearRequire = this.requiredCheck($el),
          validated = false,
          customValidator = true,
          validator = $el.attr('data-validator'),
          equalTo = true; // don't validate ignored inputs or hidden inputs or disabled inputs

      if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]') || $el.is('[disabled]')) {
        return true;
      }

      switch ($el[0].type) {
        case 'radio':
          validated = this.validateRadio($el.attr('name'));
          break;

        case 'checkbox':
          validated = clearRequire;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          validated = clearRequire;
          break;

        default:
          validated = this.validateText($el);
      }

      if (validator) {
        customValidator = this.matchValidation($el, validator, $el.attr('required'));
      }

      if ($el.attr('data-equalto')) {
        equalTo = this.options.validators.equalTo($el);
      }

      var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
      var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

      if (goodToGo) {
        // Re-validate inputs that depend on this one with equalto
        var dependentElements = this.$element.find("[data-equalto=\"".concat($el.attr('id'), "\"]"));

        if (dependentElements.length) {
          var _this = this;

          dependentElements.each(function () {
            if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).val()) {
              _this.validateInput(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this));
            }
          });
        }
      }

      this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);
      /**
       * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
       * Trigger includes the DOM element of the input.
       * @event Abide#valid
       * @event Abide#invalid
       */

      $el.trigger(message, [$el]);
      return goodToGo;
    }
    /**
     * Goes through a form and if there are any invalid inputs, it will display the form error element
     * @returns {Boolean} noError - true if no errors were detected...
     * @fires Abide#formvalid
     * @fires Abide#forminvalid
     */

  }, {
    key: "validateForm",
    value: function validateForm() {
      var acc = [];

      var _this = this;

      this.$inputs.each(function () {
        acc.push(_this.validateInput(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this)));
      });
      var noError = acc.indexOf(false) === -1;
      this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');
      /**
       * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
       * Trigger includes the element of the form.
       * @event Abide#formvalid
       * @event Abide#forminvalid
       */

      this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);
      return noError;
    }
    /**
     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
     * @param {Object} $el - jQuery object to validate, should be a text input HTML element
     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
     */

  }, {
    key: "validateText",
    value: function validateText($el, pattern) {
      // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
      pattern = pattern || $el.attr('pattern') || $el.attr('type');
      var inputText = $el.val();
      var valid = false;

      if (inputText.length) {
        // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
        if (this.options.patterns.hasOwnProperty(pattern)) {
          valid = this.options.patterns[pattern].test(inputText);
        } // If the pattern name isn't also the type attribute of the field, then test it as a regexp
        else if (pattern !== $el.attr('type')) {
            valid = new RegExp(pattern).test(inputText);
          } else {
            valid = true;
          }
      } // An empty field is valid if it's not required
      else if (!$el.prop('required')) {
          valid = true;
        }

      return valid;
    }
    /**
     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
     * @param {String} groupName - A string that specifies the name of a radio button group
     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
     */

  }, {
    key: "validateRadio",
    value: function validateRadio(groupName) {
      // If at least one radio in the group has the `required` attribute, the group is considered required
      // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
      var $group = this.$element.find(":radio[name=\"".concat(groupName, "\"]"));
      var valid = false,
          required = false; // For the group to be required, at least one radio needs to be required

      $group.each(function (i, e) {
        if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(e).attr('required')) {
          required = true;
        }
      });
      if (!required) valid = true;

      if (!valid) {
        // For the group to be valid, at least one radio needs to be checked
        $group.each(function (i, e) {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(e).prop('checked')) {
            valid = true;
          }
        });
      }

      ;
      return valid;
    }
    /**
     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
     * @param {Object} $el - jQuery input element.
     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
     * @param {Boolean} required - self explanatory?
     * @returns {Boolean} - true if validations passed.
     */

  }, {
    key: "matchValidation",
    value: function matchValidation($el, validators, required) {
      var _this4 = this;

      required = required ? true : false;
      var clear = validators.split(' ').map(function (v) {
        return _this4.options.validators[v]($el, required, $el.parent());
      });
      return clear.indexOf(false) === -1;
    }
    /**
     * Resets form inputs and styles
     * @fires Abide#formreset
     */

  }, {
    key: "resetForm",
    value: function resetForm() {
      var $form = this.$element,
          opts = this.options;
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(opts.labelErrorClass), $form).not('small').removeClass(opts.labelErrorClass);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(opts.inputErrorClass), $form).not('small').removeClass(opts.inputErrorClass);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()("".concat(opts.formErrorSelector, ".").concat(opts.formErrorClass)).removeClass(opts.formErrorClass);
      $form.find('[data-abide-error]').css('display', 'none');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      /**
       * Fires when the form has been reset.
       * @event Abide#formreset
       */

      $form.trigger('formreset.zf.abide', [$form]);
    }
    /**
     * Destroys an instance of Abide.
     * Removes error styles and classes from elements, without resetting their values.
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      var _this = this;

      this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');
      this.$inputs.off('.abide').each(function () {
        _this.removeErrorClasses(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this));
      });
    }
  }]);

  return Abide;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_1__["Plugin"]);
/**
 * Default settings for plugin
 */


Abide.defaults = {
  /**
   * The default event to validate inputs. Checkboxes and radios validate immediately.
   * Remove or change this value for manual validation.
   * @option
   * @type {?string}
   * @default 'fieldChange'
   */
  validateOn: 'fieldChange',

  /**
   * Class to be applied to input labels on failed validation.
   * @option
   * @type {string}
   * @default 'is-invalid-label'
   */
  labelErrorClass: 'is-invalid-label',

  /**
   * Class to be applied to inputs on failed validation.
   * @option
   * @type {string}
   * @default 'is-invalid-input'
   */
  inputErrorClass: 'is-invalid-input',

  /**
   * Class selector to use to target Form Errors for show/hide.
   * @option
   * @type {string}
   * @default '.form-error'
   */
  formErrorSelector: '.form-error',

  /**
   * Class added to Form Errors on failed validation.
   * @option
   * @type {string}
   * @default 'is-visible'
   */
  formErrorClass: 'is-visible',

  /**
   * Set to true to validate text inputs on any value change.
   * @option
   * @type {boolean}
   * @default false
   */
  liveValidate: false,

  /**
   * Set to true to validate inputs on blur.
   * @option
   * @type {boolean}
   * @default false
   */
  validateOnBlur: false,
  patterns: {
    alpha: /^[a-zA-Z]+$/,
    alpha_numeric: /^[a-zA-Z0-9]+$/,
    integer: /^[-+]?\d+$/,
    number: /^[-+]?\d*(?:[\.\,]\d+)?$/,
    // amex, visa, diners
    card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
    cvv: /^([0-9]){3,4}$/,
    // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
    email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
    url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
    // abc.de
    domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,
    datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
    // YYYY-MM-DD
    date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
    // HH:MM:SS
    time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
    dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
    // MM/DD/YYYY
    month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
    // DD/MM/YYYY
    day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,
    // #FFF or #FFFFFF
    color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,
    // Domain || URL
    website: {
      test: function test(text) {
        return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);
      }
    }
  },

  /**
   * Optional validation functions to be used. `equalTo` being the only default included function.
   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
   * el : The jQuery element to validate.
   * required : Boolean value of the required attribute be present or not.
   * parent : The direct parent of the input.
   * @option
   */
  validators: {
    equalTo: function equalTo(el, required, parent) {
      return jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(el.attr('data-equalto'))).val() === el.val();
    }
  }
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.accordion.js":
/*!******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.accordion.js ***!
  \******************************************************************/
/*! exports provided: Accordion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accordion", function() { return Accordion; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Accordion module.
 * @module foundation.accordion
 * @requires foundation.util.keyboard
 */

var Accordion =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Accordion, _Plugin);

  function Accordion() {
    _classCallCheck(this, Accordion);

    return _possibleConstructorReturn(this, _getPrototypeOf(Accordion).apply(this, arguments));
  }

  _createClass(Accordion, [{
    key: "_setup",

    /**
     * Creates a new instance of an accordion.
     * @class
     * @name Accordion
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Accordion.defaults, this.$element.data(), options);
      this.className = 'Accordion'; // ie9 back compat

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }
    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var _this2 = this;

      this.$element.attr('role', 'tablist');
      this.$tabs = this.$element.children('[data-accordion-item]');
      this.$tabs.each(function (idx, el) {
        var $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()(el),
            $content = $el.children('[data-tab-content]'),
            id = $content[0].id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["GetYoDigits"])(6, 'accordion'),
            linkId = el.id || "".concat(id, "-label");
        $el.find('a:first').attr({
          'aria-controls': id,
          'role': 'tab',
          'id': linkId,
          'aria-expanded': false,
          'aria-selected': false
        });
        $content.attr({
          'role': 'tabpanel',
          'aria-labelledby': linkId,
          'aria-hidden': true,
          'id': id
        });
      });
      var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
      this.firstTimeInit = true;

      if ($initActive.length) {
        this.down($initActive, this.firstTimeInit);
        this.firstTimeInit = false;
      }

      this._checkDeepLink = function () {
        var anchor = window.location.hash; //need a hash and a relevant anchor in this tabset

        if (anchor.length) {
          var $link = _this2.$element.find('[href$="' + anchor + '"]'),
              $anchor = jquery__WEBPACK_IMPORTED_MODULE_0___default()(anchor);

          if ($link.length && $anchor) {
            if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {
              _this2.down($anchor, _this2.firstTimeInit);

              _this2.firstTimeInit = false;
            }

            ; //roll up a little to show the titles

            if (_this2.options.deepLinkSmudge) {
              var _this = _this2;
              jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).load(function () {
                var offset = _this.$element.offset();

                jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body').animate({
                  scrollTop: offset.top
                }, _this.options.deepLinkSmudgeDelay);
              });
            }
            /**
              * Fires when the zplugin has deeplinked at pageload
              * @event Accordion#deeplink
              */


            _this2.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);
          }
        }
      }; //use browser to open a tab, if it exists in this tabset


      if (this.options.deepLink) {
        this._checkDeepLink();
      }

      this._events();
    }
    /**
     * Adds event handlers for items within the accordion.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      this.$tabs.each(function () {
        var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
        var $tabContent = $elem.children('[data-tab-content]');

        if ($tabContent.length) {
          $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
            e.preventDefault();

            _this.toggle($tabContent);
          }).on('keydown.zf.accordion', function (e) {
            _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'Accordion', {
              toggle: function toggle() {
                _this.toggle($tabContent);
              },
              next: function next() {
                var $a = $elem.next().find('a').focus();

                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              previous: function previous() {
                var $a = $elem.prev().find('a').focus();

                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              handled: function handled() {
                e.preventDefault();
                e.stopPropagation();
              }
            });
          });
        }
      });

      if (this.options.deepLink) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('popstate', this._checkDeepLink);
      }
    }
    /**
     * Toggles the selected content pane's open/close state.
     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
     * @function
     */

  }, {
    key: "toggle",
    value: function toggle($target) {
      if ($target.closest('[data-accordion]').is('[disabled]')) {
        console.info('Cannot toggle an accordion that is disabled.');
        return;
      }

      if ($target.parent().hasClass('is-active')) {
        this.up($target);
      } else {
        this.down($target);
      } //either replace or update browser history


      if (this.options.deepLink) {
        var anchor = $target.prev('a').attr('href');

        if (this.options.updateHistory) {
          history.pushState({}, '', anchor);
        } else {
          history.replaceState({}, '', anchor);
        }
      }
    }
    /**
     * Opens the accordion tab defined by `$target`.
     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
     * @param {Boolean} firstTime - flag to determine if reflow should happen.
     * @fires Accordion#down
     * @function
     */

  }, {
    key: "down",
    value: function down($target, firstTime) {
      var _this3 = this;

      /**
       * checking firstTime allows for initial render of the accordion
       * to render preset is-active panes.
       */
      if ($target.closest('[data-accordion]').is('[disabled]') && !firstTime) {
        console.info('Cannot call down on an accordion that is disabled.');
        return;
      }

      $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

      if (!this.options.multiExpand && !firstTime) {
        var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');

        if ($currentActive.length) {
          this.up($currentActive.not($target));
        }
      }

      $target.slideDown(this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done opening.
         * @event Accordion#down
         */
        _this3.$element.trigger('down.zf.accordion', [$target]);
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat($target.attr('aria-labelledby'))).attr({
        'aria-expanded': true,
        'aria-selected': true
      });
    }
    /**
     * Closes the tab defined by `$target`.
     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
     * @fires Accordion#up
     * @function
     */

  }, {
    key: "up",
    value: function up($target) {
      if ($target.closest('[data-accordion]').is('[disabled]')) {
        console.info('Cannot call up on an accordion that is disabled.');
        return;
      }

      var $aunts = $target.parent().siblings(),
          _this = this;

      if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
        return;
      }

      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */
        _this.$element.trigger('up.zf.accordion', [$target]);
      });
      $target.attr('aria-hidden', true).parent().removeClass('is-active');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat($target.attr('aria-labelledby'))).attr({
        'aria-expanded': false,
        'aria-selected': false
      });
    }
    /**
     * Destroys an instance of an accordion.
     * @fires Accordion#destroyed
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
      this.$element.find('a').off('.zf.accordion');

      if (this.options.deepLink) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('popstate', this._checkDeepLink);
      }
    }
  }]);

  return Accordion;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_3__["Plugin"]);

Accordion.defaults = {
  /**
   * Amount of time to animate the opening of an accordion pane.
   * @option
   * @type {number}
   * @default 250
   */
  slideSpeed: 250,

  /**
   * Allow the accordion to have multiple open panes.
   * @option
   * @type {boolean}
   * @default false
   */
  multiExpand: false,

  /**
   * Allow the accordion to close all panes.
   * @option
   * @type {boolean}
   * @default false
   */
  allowAllClosed: false,

  /**
   * Allows the window to scroll to content of pane specified by hash anchor
   * @option
   * @type {boolean}
   * @default false
   */
  deepLink: false,

  /**
   * Adjust the deep link scroll to make sure the top of the accordion panel is visible
   * @option
   * @type {boolean}
   * @default false
   */
  deepLinkSmudge: false,

  /**
   * Animation time (ms) for the deep link adjustment
   * @option
   * @type {number}
   * @default 300
   */
  deepLinkSmudgeDelay: 300,

  /**
   * Update the browser history with the open accordion
   * @option
   * @type {boolean}
   * @default false
   */
  updateHistory: false
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.accordionMenu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.accordionMenu.js ***!
  \**********************************************************************/
/*! exports provided: AccordionMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccordionMenu", function() { return AccordionMenu; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.nest */ "./node_modules/foundation-sites/js/foundation.util.nest.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






/**
 * AccordionMenu module.
 * @module foundation.accordionMenu
 * @requires foundation.util.keyboard
 * @requires foundation.util.nest
 */

var AccordionMenu =
/*#__PURE__*/
function (_Plugin) {
  _inherits(AccordionMenu, _Plugin);

  function AccordionMenu() {
    _classCallCheck(this, AccordionMenu);

    return _possibleConstructorReturn(this, _getPrototypeOf(AccordionMenu).apply(this, arguments));
  }

  _createClass(AccordionMenu, [{
    key: "_setup",

    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @name AccordionMenu
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, AccordionMenu.defaults, this.$element.data(), options);
      this.className = 'AccordionMenu'; // ie9 back compat

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }
    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__["Nest"].Feather(this.$element, 'accordion');

      var _this = this;

      this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');

      this.$element.attr({
        'role': 'tree',
        'aria-multiselectable': this.options.multiOpen
      });
      this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
      this.$menuLinks.each(function () {
        var linkId = this.id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["GetYoDigits"])(6, 'acc-menu-link'),
            $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            $sub = $elem.children('[data-submenu]'),
            subId = $sub[0].id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["GetYoDigits"])(6, 'acc-menu'),
            isActive = $sub.hasClass('is-active');

        if (_this.options.submenuToggle) {
          $elem.addClass('has-submenu-toggle');
          $elem.children('a').after('<button id="' + linkId + '" class="submenu-toggle" aria-controls="' + subId + '" aria-expanded="' + isActive + '" title="' + _this.options.submenuToggleText + '"><span class="submenu-toggle-text">' + _this.options.submenuToggleText + '</span></button>');
        } else {
          $elem.attr({
            'aria-controls': subId,
            'aria-expanded': isActive,
            'id': linkId
          });
        }

        $sub.attr({
          'aria-labelledby': linkId,
          'aria-hidden': !isActive,
          'role': 'group',
          'id': subId
        });
      });
      this.$element.find('li').attr({
        'role': 'treeitem'
      });
      var initPanes = this.$element.find('.is-active');

      if (initPanes.length) {
        var _this = this;

        initPanes.each(function () {
          _this.down(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this));
        });
      }

      this._events();
    }
    /**
     * Adds event handlers for items within the menu.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      this.$element.find('li').each(function () {
        var $submenu = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).children('[data-submenu]');

        if ($submenu.length) {
          if (_this.options.submenuToggle) {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
              _this.toggle($submenu);
            });
          } else {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
              e.preventDefault();

              _this.toggle($submenu);
            });
          }
        }
      }).on('keydown.zf.accordionmenu', function (e) {
        var $element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement,
            $target = $element.children('[data-submenu]');
        $elements.each(function (i) {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

            if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).children('[data-submenu]:visible').length) {
              // has open sub menu
              $nextElement = $element.find('li:first-child').find('a').first();
            }

            if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(':first-child')) {
              // is first element of sub menu
              $prevElement = $element.parents('li').first().find('a').first();
            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
              // if previous element has open sub menu
              $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
            }

            if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(':last-child')) {
              // is last element of sub menu
              $nextElement = $element.parents('li').first().next('li').find('a').first();
            }

            return;
          }
        });
        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'AccordionMenu', {
          open: function open() {
            if ($target.is(':hidden')) {
              _this.down($target);

              $target.find('li').first().find('a').first().focus();
            }
          },
          close: function close() {
            if ($target.length && !$target.is(':hidden')) {
              // close active sub of this item
              _this.up($target);
            } else if ($element.parent('[data-submenu]').length) {
              // close currently open sub
              _this.up($element.parent('[data-submenu]'));

              $element.parents('li').first().find('a').first().focus();
            }
          },
          up: function up() {
            $prevElement.focus();
            return true;
          },
          down: function down() {
            $nextElement.focus();
            return true;
          },
          toggle: function toggle() {
            if (_this.options.submenuToggle) {
              return false;
            }

            if ($element.children('[data-submenu]').length) {
              _this.toggle($element.children('[data-submenu]'));

              return true;
            }
          },
          closeAll: function closeAll() {
            _this.hideAll();
          },
          handled: function handled(preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }

            e.stopImmediatePropagation();
          }
        });
      }); //.attr('tabindex', 0);
    }
    /**
     * Closes all panes of the menu.
     * @function
     */

  }, {
    key: "hideAll",
    value: function hideAll() {
      this.up(this.$element.find('[data-submenu]'));
    }
    /**
     * Opens all panes of the menu.
     * @function
     */

  }, {
    key: "showAll",
    value: function showAll() {
      this.down(this.$element.find('[data-submenu]'));
    }
    /**
     * Toggles the open/close state of a submenu.
     * @function
     * @param {jQuery} $target - the submenu to toggle
     */

  }, {
    key: "toggle",
    value: function toggle($target) {
      if (!$target.is(':animated')) {
        if (!$target.is(':hidden')) {
          this.up($target);
        } else {
          this.down($target);
        }
      }
    }
    /**
     * Opens the sub-menu defined by `$target`.
     * @param {jQuery} $target - Sub-menu to open.
     * @fires AccordionMenu#down
     */

  }, {
    key: "down",
    value: function down($target) {
      var _this = this;

      if (!this.options.multiOpen) {
        this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
      }

      $target.addClass('is-active').attr({
        'aria-hidden': false
      });

      if (this.options.submenuToggle) {
        $target.prev('.submenu-toggle').attr({
          'aria-expanded': true
        });
      } else {
        $target.parent('.is-accordion-submenu-parent').attr({
          'aria-expanded': true
        });
      }

      $target.slideDown(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done opening.
         * @event AccordionMenu#down
         */
        _this.$element.trigger('down.zf.accordionMenu', [$target]);
      });
    }
    /**
     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
     * @param {jQuery} $target - Sub-menu to close.
     * @fires AccordionMenu#up
     */

  }, {
    key: "up",
    value: function up($target) {
      var _this = this;

      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */
        _this.$element.trigger('up.zf.accordionMenu', [$target]);
      });
      var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

      if (this.options.submenuToggle) {
        $menus.prev('.submenu-toggle').attr('aria-expanded', false);
      } else {
        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
      }
    }
    /**
     * Destroys an instance of accordion menu.
     * @fires AccordionMenu#destroyed
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.find('[data-submenu]').slideDown(0).css('display', '');
      this.$element.find('a').off('click.zf.accordionMenu');

      if (this.options.submenuToggle) {
        this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');
        this.$element.find('.submenu-toggle').remove();
      }

      _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__["Nest"].Burn(this.$element, 'accordion');
    }
  }]);

  return AccordionMenu;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_4__["Plugin"]);

AccordionMenu.defaults = {
  /**
   * Amount of time to animate the opening of a submenu in ms.
   * @option
   * @type {number}
   * @default 250
   */
  slideSpeed: 250,

  /**
   * Adds a separate submenu toggle button. This allows the parent item to have a link.
   * @option
   * @example true
   */
  submenuToggle: false,

  /**
   * The text used for the submenu toggle if enabled. This is used for screen readers only.
   * @option
   * @example true
   */
  submenuToggleText: 'Toggle menu',

  /**
   * Allow the menu to have multiple open panes.
   * @option
   * @type {boolean}
   * @default true
   */
  multiOpen: true
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.core.js":
/*!*************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.core.js ***!
  \*************************************************************/
/*! exports provided: Foundation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foundation", function() { return Foundation; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }




var FOUNDATION_VERSION = '6.4.3'; // Global Foundation object
// This is attached to the window, or used as a module for AMD/Browserify

var Foundation = {
  version: FOUNDATION_VERSION,

  /**
   * Stores initialized plugins.
   */
  _plugins: {},

  /**
   * Stores generated unique ids for plugin instances
   */
  _uuids: [],

  /**
   * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
   * @param {Object} plugin - The constructor of the plugin.
   */
  plugin: function plugin(_plugin, name) {
    // Object key to use when adding to global Foundation object
    // Examples: Foundation.Reveal, Foundation.OffCanvas
    var className = name || functionName(_plugin); // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
    // Examples: data-reveal, data-off-canvas

    var attrName = hyphenate(className); // Add to the Foundation object and the plugins list (for reflowing)

    this._plugins[attrName] = this[className] = _plugin;
  },

  /**
   * @function
   * Populates the _uuids array with pointers to each individual plugin instance.
   * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
   * Also fires the initialization event for each plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @param {String} name - the name of the plugin, passed as a camelCased string.
   * @fires Plugin#init
   */
  registerPlugin: function registerPlugin(plugin, name) {
    var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
    plugin.uuid = Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["GetYoDigits"])(6, pluginName);

    if (!plugin.$element.attr("data-".concat(pluginName))) {
      plugin.$element.attr("data-".concat(pluginName), plugin.uuid);
    }

    if (!plugin.$element.data('zfPlugin')) {
      plugin.$element.data('zfPlugin', plugin);
    }
    /**
     * Fires when the plugin has initialized.
     * @event Plugin#init
     */


    plugin.$element.trigger("init.zf.".concat(pluginName));

    this._uuids.push(plugin.uuid);

    return;
  },

  /**
   * @function
   * Removes the plugins uuid from the _uuids array.
   * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
   * Also fires the destroyed event for the plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @fires Plugin#destroyed
   */
  unregisterPlugin: function unregisterPlugin(plugin) {
    var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

    this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);

    plugin.$element.removeAttr("data-".concat(pluginName)).removeData('zfPlugin')
    /**
     * Fires when the plugin has been destroyed.
     * @event Plugin#destroyed
     */
    .trigger("destroyed.zf.".concat(pluginName));

    for (var prop in plugin) {
      plugin[prop] = null; //clean up script to prep for garbage collection.
    }

    return;
  },

  /**
   * @function
   * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
   * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
   * @default If no argument is passed, reflow all currently active plugins.
   */
  reInit: function reInit(plugins) {
    var isJQ = plugins instanceof jquery__WEBPACK_IMPORTED_MODULE_0___default.a;

    try {
      if (isJQ) {
        plugins.each(function () {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('zfPlugin')._init();
        });
      } else {
        var type = _typeof(plugins),
            _this = this,
            fns = {
          'object': function object(plgs) {
            plgs.forEach(function (p) {
              p = hyphenate(p);
              jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-' + p + ']').foundation('_init');
            });
          },
          'string': function string() {
            plugins = hyphenate(plugins);
            jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-' + plugins + ']').foundation('_init');
          },
          'undefined': function undefined() {
            this['object'](Object.keys(_this._plugins));
          }
        };

        fns[type](plugins);
      }
    } catch (err) {
      console.error(err);
    } finally {
      return plugins;
    }
  },

  /**
   * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
   * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
   * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
   */
  reflow: function reflow(elem, plugins) {
    // If plugins is undefined, just grab everything
    if (typeof plugins === 'undefined') {
      plugins = Object.keys(this._plugins);
    } // If plugins is a string, convert it to an array with one item
    else if (typeof plugins === 'string') {
        plugins = [plugins];
      }

    var _this = this; // Iterate through each plugin


    jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(plugins, function (i, name) {
      // Get the current plugin
      var plugin = _this._plugins[name]; // Localize the search to all elements inside elem, as well as elem itself, unless elem === document

      var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(elem).find('[data-' + name + ']').addBack('[data-' + name + ']'); // For each plugin found, initialize it

      $elem.each(function () {
        var $el = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            opts = {}; // Don't double-dip on plugins

        if ($el.data('zfPlugin')) {
          console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
          return;
        }

        if ($el.attr('data-options')) {
          var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
            var opt = e.split(':').map(function (el) {
              return el.trim();
            });
            if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
          });
        }

        try {
          $el.data('zfPlugin', new plugin(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this), opts));
        } catch (er) {
          console.error(er);
        } finally {
          return;
        }
      });
    });
  },
  getFnName: functionName,
  addToJquery: function addToJquery($) {
    // TODO: consider not making this a jQuery function
    // TODO: need way to reflow vs. re-initialize

    /**
     * The Foundation jQuery method.
     * @param {String|Array} method - An action to perform on the current jQuery object.
     */
    var foundation = function foundation(method) {
      var type = _typeof(method),
          $noJS = $('.no-js');

      if ($noJS.length) {
        $noJS.removeClass('no-js');
      }

      if (type === 'undefined') {
        //needs to initialize the Foundation object, or an individual plugin.
        _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"]._init();

        Foundation.reflow(this);
      } else if (type === 'string') {
        //an individual method to invoke on a plugin or group of plugins
        var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary

        var plugClass = this.data('zfPlugin'); //determine the class of plugin

        if (plugClass !== undefined && plugClass[method] !== undefined) {
          //make sure both the class and method exist
          if (this.length === 1) {
            //if there's only one, call it directly.
            plugClass[method].apply(plugClass, args);
          } else {
            this.each(function (i, el) {
              //otherwise loop through the jQuery collection and invoke the method on each
              plugClass[method].apply($(el).data('zfPlugin'), args);
            });
          }
        } else {
          //error for no class or no method
          throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
        }
      } else {
        //error for invalid argument type
        throw new TypeError("We're sorry, ".concat(type, " is not a valid parameter. You must use a string representing the method you wish to invoke."));
      }

      return this;
    };

    $.fn.foundation = foundation;
    return $;
  }
};
Foundation.util = {
  /**
   * Function for applying a debounce effect to a function call.
   * @function
   * @param {Function} func - Function to be called at end of timeout.
   * @param {Number} delay - Time in ms to delay the call of `func`.
   * @returns function
   */
  throttle: function throttle(func, delay) {
    var timer = null;
    return function () {
      var context = this,
          args = arguments;

      if (timer === null) {
        timer = setTimeout(function () {
          func.apply(context, args);
          timer = null;
        }, delay);
      }
    };
  }
};
window.Foundation = Foundation; // Polyfill for requestAnimationFrame

(function () {
  if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
    return new Date().getTime();
  };
  var vendors = ['webkit', 'moz'];

  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }

  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;

    window.requestAnimationFrame = function (callback) {
      var now = Date.now();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function () {
        callback(lastTime = nextTime);
      }, nextTime - now);
    };

    window.cancelAnimationFrame = clearTimeout;
  }
  /**
   * Polyfill for performance.now, required by rAF
   */


  if (!window.performance || !window.performance.now) {
    window.performance = {
      start: Date.now(),
      now: function now() {
        return Date.now() - this.start;
      }
    };
  }
})();

if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== 'function') {
      // closest thing possible to the ECMAScript 5
      // internal IsCallable function
      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function fNOP() {},
        fBound = function fBound() {
      return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
    };

    if (this.prototype) {
      // native functions don't have a prototype
      fNOP.prototype = this.prototype;
    }

    fBound.prototype = new fNOP();
    return fBound;
  };
} // Polyfill to get the name of a function in IE9


function functionName(fn) {
  if (Function.prototype.name === undefined) {
    var funcNameRegex = /function\s([^(]{1,})\(/;
    var results = funcNameRegex.exec(fn.toString());
    return results && results.length > 1 ? results[1].trim() : "";
  } else if (fn.prototype === undefined) {
    return fn.constructor.name;
  } else {
    return fn.prototype.constructor.name;
  }
}

function parseValue(str) {
  if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
  return str;
} // Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580


function hyphenate(str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.drilldown.js":
/*!******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.drilldown.js ***!
  \******************************************************************/
/*! exports provided: Drilldown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Drilldown", function() { return Drilldown; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.nest */ "./node_modules/foundation-sites/js/foundation.util.nest.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_util_box__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.util.box */ "./node_modules/foundation-sites/js/foundation.util.box.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }







/**
 * Drilldown module.
 * @module foundation.drilldown
 * @requires foundation.util.keyboard
 * @requires foundation.util.nest
 * @requires foundation.util.box
 */

var Drilldown =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Drilldown, _Plugin);

  function Drilldown() {
    _classCallCheck(this, Drilldown);

    return _possibleConstructorReturn(this, _getPrototypeOf(Drilldown).apply(this, arguments));
  }

  _createClass(Drilldown, [{
    key: "_setup",

    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @name Drilldown
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Drilldown.defaults, this.$element.data(), options);
      this.className = 'Drilldown'; // ie9 back compat

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('Drilldown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close',
        'TAB': 'down',
        'SHIFT_TAB': 'up'
      });
    }
    /**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__["Nest"].Feather(this.$element, 'drilldown');

      if (this.options.autoApplyClass) {
        this.$element.addClass('drilldown');
      }

      this.$element.attr({
        'role': 'tree',
        'aria-multiselectable': false
      });
      this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
      this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role', 'group');
      this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'treeitem').find('a');
      this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["GetYoDigits"])(6, 'drilldown'));

      this._prepareMenu();

      this._registerEvents();

      this._keyboardEvents();
    }
    /**
     * prepares drilldown menu by setting attributes to links and elements
     * sets a min height to prevent content jumping
     * wraps the element if not already wrapped
     * @private
     * @function
     */

  }, {
    key: "_prepareMenu",
    value: function _prepareMenu() {
      var _this = this; // if(!this.options.holdOpen){
      //   this._menuLinkEvents();
      // }


      this.$submenuAnchors.each(function () {
        var $link = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
        var $sub = $link.parent();

        if (_this.options.parentLink) {
          $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menuitem"></li>');
        }

        $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
        $link.children('[data-submenu]').attr({
          'aria-hidden': true,
          'tabindex': 0,
          'role': 'group'
        });

        _this._events($link);
      });
      this.$submenus.each(function () {
        var $menu = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            $back = $menu.find('.js-drilldown-back');

        if (!$back.length) {
          switch (_this.options.backButtonPosition) {
            case "bottom":
              $menu.append(_this.options.backButton);
              break;

            case "top":
              $menu.prepend(_this.options.backButton);
              break;

            default:
              console.error("Unsupported backButtonPosition value '" + _this.options.backButtonPosition + "'");
          }
        }

        _this._back($menu);
      });
      this.$submenus.addClass('invisible');

      if (!this.options.autoHeight) {
        this.$submenus.addClass('drilldown-submenu-cover-previous');
      } // create a wrapper on element if it doesn't exist.


      if (!this.$element.parent().hasClass('is-drilldown')) {
        this.$wrapper = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.options.wrapper).addClass('is-drilldown');
        if (this.options.animateHeight) this.$wrapper.addClass('animate-height');
        this.$element.wrap(this.$wrapper);
      } // set wrapper


      this.$wrapper = this.$element.parent();
      this.$wrapper.css(this._getMaxDims());
    }
  }, {
    key: "_resize",
    value: function _resize() {
      this.$wrapper.css({
        'max-width': 'none',
        'min-height': 'none'
      }); // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths

      this.$wrapper.css(this._getMaxDims());
    }
    /**
     * Adds event handlers to elements in the menu.
     * @function
     * @private
     * @param {jQuery} $elem - the current menu item to add handlers to.
     */

  }, {
    key: "_events",
    value: function _events($elem) {
      var _this = this;

      $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
          e.stopImmediatePropagation();
          e.preventDefault();
        } // if(e.target !== e.currentTarget.firstElementChild){
        //   return false;
        // }


        _this._show($elem.parent('li'));

        if (_this.options.closeOnClick) {
          var $body = jquery__WEBPACK_IMPORTED_MODULE_0___default()('body');
          $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
            if (e.target === _this.$element[0] || jquery__WEBPACK_IMPORTED_MODULE_0___default.a.contains(_this.$element[0], e.target)) {
              return;
            }

            e.preventDefault();

            _this._hideAll();

            $body.off('.zf.drilldown');
          });
        }
      });
    }
    /**
     * Adds event handlers to the menu element.
     * @function
     * @private
     */

  }, {
    key: "_registerEvents",
    value: function _registerEvents() {
      if (this.options.scrollTop) {
        this._bindHandler = this._scrollTop.bind(this);
        this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);
      }

      this.$element.on('mutateme.zf.trigger', this._resize.bind(this));
    }
    /**
     * Scroll to Top of Element or data-scroll-top-element
     * @function
     * @fires Drilldown#scrollme
     */

  }, {
    key: "_scrollTop",
    value: function _scrollTop() {
      var _this = this;

      var $scrollTopElement = _this.options.scrollTopElement != '' ? jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this.options.scrollTopElement) : _this.$element,
          scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset, 10);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body').stop(true).animate({
        scrollTop: scrollPos
      }, _this.options.animationDuration, _this.options.animationEasing, function () {
        /**
          * Fires after the menu has scrolled
          * @event Drilldown#scrollme
          */
        if (this === jquery__WEBPACK_IMPORTED_MODULE_0___default()('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');
      });
    }
    /**
     * Adds keydown event listener to `li`'s in the menu.
     * @private
     */

  }, {
    key: "_keyboardEvents",
    value: function _keyboardEvents() {
      var _this = this;

      this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {
        var $element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            $elements = $element.parent('li').parent('ul').children('li').children('a'),
            $prevElement,
            $nextElement;
        $elements.each(function (i) {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1));
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            return;
          }
        });
        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'Drilldown', {
          next: function next() {
            if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));

              $element.parent('li').one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          previous: function previous() {
            _this._hide($element.parent('li').parent('ul'));

            $element.parent('li').parent('ul').one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])($element), function () {
              setTimeout(function () {
                $element.parent('li').parent('ul').parent('li').children('a').first().focus();
              }, 1);
            });
            return true;
          },
          up: function up() {
            $prevElement.focus(); // Don't tap focus on first element in root ul

            return !$element.is(_this.$element.find('> li:first-child > a'));
          },
          down: function down() {
            $nextElement.focus(); // Don't tap focus on last element in root ul

            return !$element.is(_this.$element.find('> li:last-child > a'));
          },
          close: function close() {
            // Don't close on element in root ul
            if (!$element.is(_this.$element.find('> li > a'))) {
              _this._hide($element.parent().parent());

              $element.parent().parent().siblings('a').focus();
            }
          },
          open: function open() {
            if (!$element.is(_this.$menuItems)) {
              // not menu item means back button
              _this._hide($element.parent('li').parent('ul'));

              $element.parent('li').parent('ul').one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])($element), function () {
                setTimeout(function () {
                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                }, 1);
              });
              return true;
            } else if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));

              $element.parent('li').one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          handled: function handled(preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }

            e.stopImmediatePropagation();
          }
        });
      }); // end keyboardAccess
    }
    /**
     * Closes all open elements, and returns to root menu.
     * @function
     * @fires Drilldown#closed
     */

  }, {
    key: "_hideAll",
    value: function _hideAll() {
      var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
      if (this.options.autoHeight) this.$wrapper.css({
        height: $elem.parent().closest('ul').data('calcHeight')
      });
      $elem.one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])($elem), function (e) {
        $elem.removeClass('is-active is-closing');
      });
      /**
       * Fires when the menu is fully closed.
       * @event Drilldown#closed
       */

      this.$element.trigger('closed.zf.drilldown');
    }
    /**
     * Adds event listener for each `back` button, and closes open menus.
     * @function
     * @fires Drilldown#back
     * @param {jQuery} $elem - the current sub-menu to add `back` event.
     */

  }, {
    key: "_back",
    value: function _back($elem) {
      var _this = this;

      $elem.off('click.zf.drilldown');
      $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
        e.stopImmediatePropagation(); // console.log('mouseup on back');

        _this._hide($elem); // If there is a parent submenu, call show


        var parentSubMenu = $elem.parent('li').parent('ul').parent('li');

        if (parentSubMenu.length) {
          _this._show(parentSubMenu);
        }
      });
    }
    /**
     * Adds event listener to menu items w/o submenus to close open menus on click.
     * @function
     * @private
     */

  }, {
    key: "_menuLinkEvents",
    value: function _menuLinkEvents() {
      var _this = this;

      this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        // e.stopImmediatePropagation();
        setTimeout(function () {
          _this._hideAll();
        }, 0);
      });
    }
    /**
     * Opens a submenu.
     * @function
     * @fires Drilldown#open
     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
     */

  }, {
    key: "_show",
    value: function _show($elem) {
      if (this.options.autoHeight) this.$wrapper.css({
        height: $elem.children('[data-submenu]').data('calcHeight')
      });
      $elem.attr('aria-expanded', true);
      $elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden', false);
      /**
       * Fires when the submenu has opened.
       * @event Drilldown#open
       */

      this.$element.trigger('open.zf.drilldown', [$elem]);
    }
  }, {
    key: "_hide",

    /**
     * Hides a submenu
     * @function
     * @fires Drilldown#hide
     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
     */
    value: function _hide($elem) {
      if (this.options.autoHeight) this.$wrapper.css({
        height: $elem.parent().closest('ul').data('calcHeight')
      });

      var _this = this;

      $elem.parent('li').attr('aria-expanded', false);
      $elem.attr('aria-hidden', true).addClass('is-closing');
      $elem.addClass('is-closing').one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])($elem), function () {
        $elem.removeClass('is-active is-closing');
        $elem.blur().addClass('invisible');
      });
      /**
       * Fires when the submenu has closed.
       * @event Drilldown#hide
       */

      $elem.trigger('hide.zf.drilldown', [$elem]);
    }
    /**
     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
     * Prevents content jumping.
     * @function
     * @private
     */

  }, {
    key: "_getMaxDims",
    value: function _getMaxDims() {
      var maxHeight = 0,
          result = {},
          _this = this;

      this.$submenus.add(this.$element).each(function () {
        var numOfElems = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).children('li').length;
        var height = _foundation_util_box__WEBPACK_IMPORTED_MODULE_4__["Box"].GetDimensions(this).height;
        maxHeight = height > maxHeight ? height : maxHeight;

        if (_this.options.autoHeight) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('calcHeight', height);
          if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).hasClass('is-drilldown-submenu')) result['height'] = height;
        }
      });
      if (!this.options.autoHeight) result['min-height'] = "".concat(maxHeight, "px");
      result['max-width'] = "".concat(this.$element[0].getBoundingClientRect().width, "px");
      return result;
    }
    /**
     * Destroys the Drilldown Menu
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);

      this._hideAll();

      this.$element.off('mutateme.zf.trigger');
      _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__["Nest"].Burn(this.$element, 'drilldown');
      this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
      this.$submenuAnchors.each(function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).off('.zf.drilldown');
      });
      this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');
      this.$element.find('a').each(function () {
        var $link = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
        $link.removeAttr('tabindex');

        if ($link.data('savedHref')) {
          $link.attr('href', $link.data('savedHref')).removeData('savedHref');
        } else {
          return;
        }
      });
    }
  }]);

  return Drilldown;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_5__["Plugin"]);

Drilldown.defaults = {
  /**
   * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are
   * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.
   * @option
   * @type {boolian}
   * @default true
   */
  autoApplyClass: true,

  /**
   * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @type {string}
   * @default '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>'
   */
  backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',

  /**
   * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.
   * @option
   * @type {string}
   * @default top
   */
  backButtonPosition: 'top',

  /**
   * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @type {string}
   * @default '<div></div>'
   */
  wrapper: '<div></div>',

  /**
   * Adds the parent link to the submenu.
   * @option
   * @type {boolean}
   * @default false
   */
  parentLink: false,

  /**
   * Allow the menu to return to root list on body click.
   * @option
   * @type {boolean}
   * @default false
   */
  closeOnClick: false,

  /**
   * Allow the menu to auto adjust height.
   * @option
   * @type {boolean}
   * @default false
   */
  autoHeight: false,

  /**
   * Animate the auto adjust height.
   * @option
   * @type {boolean}
   * @default false
   */
  animateHeight: false,

  /**
   * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button
   * @option
   * @type {boolean}
   * @default false
   */
  scrollTop: false,

  /**
   * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken
   * @option
   * @type {string}
   * @default ''
   */
  scrollTopElement: '',

  /**
   * ScrollTop offset
   * @option
   * @type {number}
   * @default 0
   */
  scrollTopOffset: 0,

  /**
   * Scroll animation duration
   * @option
   * @type {number}
   * @default 500
   */
  animationDuration: 500,

  /**
   * Scroll animation easing. Can be `'swing'` or `'linear'`.
   * @option
   * @type {string}
   * @see {@link https://api.jquery.com/animate|JQuery animate}
   * @default 'swing'
   */
  animationEasing: 'swing' // holdOpen: false

};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.dropdown.js":
/*!*****************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.dropdown.js ***!
  \*****************************************************************/
/*! exports provided: Dropdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dropdown", function() { return Dropdown; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_positionable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.positionable */ "./node_modules/foundation-sites/js/foundation.positionable.js");
/* harmony import */ var _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






/**
 * Dropdown module.
 * @module foundation.dropdown
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.triggers
 */

var Dropdown =
/*#__PURE__*/
function (_Positionable) {
  _inherits(Dropdown, _Positionable);

  function Dropdown() {
    _classCallCheck(this, Dropdown);

    return _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).apply(this, arguments));
  }

  _createClass(Dropdown, [{
    key: "_setup",

    /**
     * Creates a new instance of a dropdown.
     * @class
     * @name Dropdown
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Dropdown.defaults, this.$element.data(), options);
      this.className = 'Dropdown'; // ie9 back compat
      // Triggers init is idempotent, just need to make sure it is initialized

      _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_4__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close'
      });
    }
    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var $id = this.$element.attr('id');
      this.$anchors = jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-toggle=\"".concat($id, "\"]")).length ? jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-toggle=\"".concat($id, "\"]")) : jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-open=\"".concat($id, "\"]"));
      this.$anchors.attr({
        'aria-controls': $id,
        'data-is-focus': false,
        'data-yeti-box': $id,
        'aria-haspopup': true,
        'aria-expanded': false
      });

      this._setCurrentAnchor(this.$anchors.first());

      if (this.options.parentClass) {
        this.$parent = this.$element.parents('.' + this.options.parentClass);
      } else {
        this.$parent = null;
      }

      this.$element.attr({
        'aria-hidden': 'true',
        'data-yeti-box': $id,
        'data-resize': $id,
        'aria-labelledby': this.$currentAnchor.id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["GetYoDigits"])(6, 'dd-anchor')
      });

      _get(_getPrototypeOf(Dropdown.prototype), "_init", this).call(this);

      this._events();
    }
  }, {
    key: "_getDefaultPosition",
    value: function _getDefaultPosition() {
      // handle legacy classnames
      var position = this.$element[0].className.match(/(top|left|right|bottom)/g);

      if (position) {
        return position[0];
      } else {
        return 'bottom';
      }
    }
  }, {
    key: "_getDefaultAlignment",
    value: function _getDefaultAlignment() {
      // handle legacy float approach
      var horizontalPosition = /float-(\S+)/.exec(this.$currentAnchor.className);

      if (horizontalPosition) {
        return horizontalPosition[1];
      }

      return _get(_getPrototypeOf(Dropdown.prototype), "_getDefaultAlignment", this).call(this);
    }
    /**
     * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.
     * Recursively calls itself if a collision is detected, with a new position class.
     * @function
     * @private
     */

  }, {
    key: "_setPosition",
    value: function _setPosition() {
      _get(_getPrototypeOf(Dropdown.prototype), "_setPosition", this).call(this, this.$currentAnchor, this.$element, this.$parent);
    }
    /**
     * Make it a current anchor.
     * Current anchor as the reference for the position of Dropdown panes.
     * @param {HTML} el - DOM element of the anchor.
     * @function
     * @private
     */

  }, {
    key: "_setCurrentAnchor",
    value: function _setCurrentAnchor(el) {
      this.$currentAnchor = jquery__WEBPACK_IMPORTED_MODULE_0___default()(el);
    }
    /**
     * Adds event listeners to the element utilizing the triggers utility library.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': this._setPosition.bind(this)
      });
      this.$anchors.off('click.zf.trigger').on('click.zf.trigger', function () {
        _this._setCurrentAnchor(this);
      });

      if (this.options.hover) {
        this.$anchors.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
          _this._setCurrentAnchor(this);

          var bodyData = jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').data();

          if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.open();

              _this.$anchors.data('hover', true);
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdown', function () {
          clearTimeout(_this.timeout);
          _this.timeout = setTimeout(function () {
            _this.close();

            _this.$anchors.data('hover', false);
          }, _this.options.hoverDelay);
        });

        if (this.options.hoverPane) {
          this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            clearTimeout(_this.timeout);
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();

              _this.$anchors.data('hover', false);
            }, _this.options.hoverDelay);
          });
        }
      }

      this.$anchors.add(this.$element).on('keydown.zf.dropdown', function (e) {
        var $target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            visibleFocusableElements = _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].findFocusable(_this.$element);
        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'Dropdown', {
          open: function open() {
            if ($target.is(_this.$anchors)) {
              _this.open();

              _this.$element.attr('tabindex', -1).focus();

              e.preventDefault();
            }
          },
          close: function close() {
            _this.close();

            _this.$anchors.focus();
          }
        });
      });
    }
    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */

  }, {
    key: "_addBodyHandler",
    value: function _addBodyHandler() {
      var $body = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).not(this.$element),
          _this = this;

      $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
        if (_this.$anchors.is(e.target) || _this.$anchors.find(e.target).length) {
          return;
        }

        if (_this.$element.find(e.target).length) {
          return;
        }

        _this.close();

        $body.off('click.zf.dropdown');
      });
    }
    /**
     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
     * @function
     * @fires Dropdown#closeme
     * @fires Dropdown#show
     */

  }, {
    key: "open",
    value: function open() {
      // var _this = this;

      /**
       * Fires to close other open dropdowns, typically when dropdown is opening
       * @event Dropdown#closeme
       */
      this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
      this.$anchors.addClass('hover').attr({
        'aria-expanded': true
      }); // this.$element/*.show()*/;

      this.$element.addClass('is-opening');

      this._setPosition();

      this.$element.removeClass('is-opening').addClass('is-open').attr({
        'aria-hidden': false
      });

      if (this.options.autoFocus) {
        var $focusable = _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].findFocusable(this.$element);

        if ($focusable.length) {
          $focusable.eq(0).focus();
        }
      }

      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }

      if (this.options.trapFocus) {
        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].trapFocus(this.$element);
      }
      /**
       * Fires once the dropdown is visible.
       * @event Dropdown#show
       */


      this.$element.trigger('show.zf.dropdown', [this.$element]);
    }
    /**
     * Closes the open dropdown pane.
     * @function
     * @fires Dropdown#hide
     */

  }, {
    key: "close",
    value: function close() {
      if (!this.$element.hasClass('is-open')) {
        return false;
      }

      this.$element.removeClass('is-open').attr({
        'aria-hidden': true
      });
      this.$anchors.removeClass('hover').attr('aria-expanded', false);
      /**
       * Fires once the dropdown is no longer visible.
       * @event Dropdown#hide
       */

      this.$element.trigger('hide.zf.dropdown', [this.$element]);

      if (this.options.trapFocus) {
        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].releaseFocus(this.$element);
      }
    }
    /**
     * Toggles the dropdown pane's visibility.
     * @function
     */

  }, {
    key: "toggle",
    value: function toggle() {
      if (this.$element.hasClass('is-open')) {
        if (this.$anchors.data('hover')) return;
        this.close();
      } else {
        this.open();
      }
    }
    /**
     * Destroys the dropdown.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.off('.zf.trigger').hide();
      this.$anchors.off('.zf.dropdown');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).off('click.zf.dropdown');
    }
  }]);

  return Dropdown;
}(_foundation_positionable__WEBPACK_IMPORTED_MODULE_3__["Positionable"]);

Dropdown.defaults = {
  /**
   * Class that designates bounding container of Dropdown (default: window)
   * @option
   * @type {?string}
   * @default null
   */
  parentClass: null,

  /**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @type {number}
   * @default 250
   */
  hoverDelay: 250,

  /**
   * Allow submenus to open on hover events
   * @option
   * @type {boolean}
   * @default false
   */
  hover: false,

  /**
   * Don't close dropdown when hovering over dropdown pane
   * @option
   * @type {boolean}
   * @default false
   */
  hoverPane: false,

  /**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @type {number}
   * @default 0
   */
  vOffset: 0,

  /**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @type {number}
   * @default 0
   */
  hOffset: 0,

  /**
   * DEPRECATED: Class applied to adjust open position.
   * @option
   * @type {string}
   * @default ''
   */
  positionClass: '',

  /**
   * Position of dropdown. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  position: 'auto',

  /**
   * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',

  /**
   * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.
   * @option
   * @type {boolean}
   * @default false
   */
  allowOverlap: false,

  /**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * @option
   * @type {boolean}
   * @default true
   */
  allowBottomOverlap: true,

  /**
   * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
   * @option
   * @type {boolean}
   * @default false
   */
  trapFocus: false,

  /**
   * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
   * @option
   * @type {boolean}
   * @default false
   */
  autoFocus: false,

  /**
   * Allows a click on the body to close the dropdown.
   * @option
   * @type {boolean}
   * @default false
   */
  closeOnClick: false
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.dropdownMenu.js":
/*!*********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.dropdownMenu.js ***!
  \*********************************************************************/
/*! exports provided: DropdownMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownMenu", function() { return DropdownMenu; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.nest */ "./node_modules/foundation-sites/js/foundation.util.nest.js");
/* harmony import */ var _foundation_util_box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.box */ "./node_modules/foundation-sites/js/foundation.util.box.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }







/**
 * DropdownMenu module.
 * @module foundation.dropdown-menu
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.nest
 */

var DropdownMenu =
/*#__PURE__*/
function (_Plugin) {
  _inherits(DropdownMenu, _Plugin);

  function DropdownMenu() {
    _classCallCheck(this, DropdownMenu);

    return _possibleConstructorReturn(this, _getPrototypeOf(DropdownMenu).apply(this, arguments));
  }

  _createClass(DropdownMenu, [{
    key: "_setup",

    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @name DropdownMenu
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, DropdownMenu.defaults, this.$element.data(), options);
      this.className = 'DropdownMenu'; // ie9 back compat

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }
    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__["Nest"].Feather(this.$element, 'dropdown');
      var subs = this.$element.find('li.is-dropdown-submenu-parent');
      this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');
      this.$menuItems = this.$element.find('[role="menuitem"]');
      this.$tabs = this.$element.children('[role="menuitem"]');
      this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

      if (this.options.alignment === 'auto') {
        if (this.$element.hasClass(this.options.rightClass) || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_4__["rtl"])() || this.$element.parents('.top-bar-right').is('*')) {
          this.options.alignment = 'right';
          subs.addClass('opens-left');
        } else {
          this.options.alignment = 'left';
          subs.addClass('opens-right');
        }
      } else {
        if (this.options.alignment === 'right') {
          subs.addClass('opens-left');
        } else {
          subs.addClass('opens-right');
        }
      }

      this.changed = false;

      this._events();
    }
  }, {
    key: "_isVertical",
    value: function _isVertical() {
      return this.$tabs.css('display') === 'block' || this.$element.css('flex-direction') === 'column';
    }
  }, {
    key: "_isRtl",
    value: function _isRtl() {
      return this.$element.hasClass('align-right') || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_4__["rtl"])() && !this.$element.hasClass('align-left');
    }
    /**
     * Adds event listeners to elements within the menu
     * @private
     * @function
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this,
          hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
          parClass = 'is-dropdown-submenu-parent'; // used for onClick and in the keyboard handlers


      var handleClickFn = function handleClickFn(e) {
        var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target).parentsUntil('ul', ".".concat(parClass)),
            hasSub = $elem.hasClass(parClass),
            hasClicked = $elem.attr('data-is-click') === 'true',
            $sub = $elem.children('.is-dropdown-submenu');

        if (hasSub) {
          if (hasClicked) {
            if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
              return;
            } else {
              e.stopImmediatePropagation();
              e.preventDefault();

              _this._hide($elem);
            }
          } else {
            e.preventDefault();
            e.stopImmediatePropagation();

            _this._show($sub);

            $elem.add($elem.parentsUntil(_this.$element, ".".concat(parClass))).attr('data-is-click', true);
          }
        }
      };

      if (this.options.clickOpen || hasTouch) {
        this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
      } // Handle Leaf element Clicks


      if (_this.options.closeOnClickInside) {
        this.$menuItems.on('click.zf.dropdownmenu', function (e) {
          var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
              hasSub = $elem.hasClass(parClass);

          if (!hasSub) {
            _this._hide();
          }
        });
      }

      if (!this.options.disableHover) {
        this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
          var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
              hasSub = $elem.hasClass(parClass);

          if (hasSub) {
            clearTimeout($elem.data('_delay'));
            $elem.data('_delay', setTimeout(function () {
              _this._show($elem.children('.is-dropdown-submenu'));
            }, _this.options.hoverDelay));
          }
        }).on('mouseleave.zf.dropdownmenu', function (e) {
          var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
              hasSub = $elem.hasClass(parClass);

          if (hasSub && _this.options.autoclose) {
            if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
              return false;
            }

            clearTimeout($elem.data('_delay'));
            $elem.data('_delay', setTimeout(function () {
              _this._hide($elem);
            }, _this.options.closingTime));
          }
        });
      }

      this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
        var $element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target).parentsUntil('ul', '[role="menuitem"]'),
            isTab = _this.$tabs.index($element) > -1,
            $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
            $prevElement,
            $nextElement;
        $elements.each(function (i) {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is($element)) {
            $prevElement = $elements.eq(i - 1);
            $nextElement = $elements.eq(i + 1);
            return;
          }
        });

        var nextSibling = function nextSibling() {
          $nextElement.children('a:first').focus();
          e.preventDefault();
        },
            prevSibling = function prevSibling() {
          $prevElement.children('a:first').focus();
          e.preventDefault();
        },
            openSub = function openSub() {
          var $sub = $element.children('ul.is-dropdown-submenu');

          if ($sub.length) {
            _this._show($sub);

            $element.find('li > a:first').focus();
            e.preventDefault();
          } else {
            return;
          }
        },
            closeSub = function closeSub() {
          //if ($element.is(':first-child')) {
          var close = $element.parent('ul').parent('li');
          close.children('a:first').focus();

          _this._hide(close);

          e.preventDefault(); //}
        };

        var functions = {
          open: openSub,
          close: function close() {
            _this._hide(_this.$element);

            _this.$menuItems.eq(0).children('a').focus(); // focus to first element


            e.preventDefault();
          },
          handled: function handled() {
            e.stopImmediatePropagation();
          }
        };

        if (isTab) {
          if (_this._isVertical()) {
            // vertical menu
            if (_this._isRtl()) {
              // right aligned
              jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: closeSub,
                previous: openSub
              });
            } else {
              // left aligned
              jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: openSub,
                previous: closeSub
              });
            }
          } else {
            // horizontal menu
            if (_this._isRtl()) {
              // right aligned
              jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(functions, {
                next: prevSibling,
                previous: nextSibling,
                down: openSub,
                up: closeSub
              });
            } else {
              // left aligned
              jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(functions, {
                next: nextSibling,
                previous: prevSibling,
                down: openSub,
                up: closeSub
              });
            }
          }
        } else {
          // not tabs -> one sub
          if (_this._isRtl()) {
            // right aligned
            jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(functions, {
              next: closeSub,
              previous: openSub,
              down: nextSibling,
              up: prevSibling
            });
          } else {
            // left aligned
            jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend(functions, {
              next: openSub,
              previous: closeSub,
              down: nextSibling,
              up: prevSibling
            });
          }
        }

        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'DropdownMenu', functions);
      });
    }
    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */

  }, {
    key: "_addBodyHandler",
    value: function _addBodyHandler() {
      var $body = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body),
          _this = this;

      $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
        var $link = _this.$element.find(e.target);

        if ($link.length) {
          return;
        }

        _this._hide();

        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
      });
    }
    /**
     * Opens a dropdown pane, and checks for collisions first.
     * @param {jQuery} $sub - ul element that is a submenu to show
     * @function
     * @private
     * @fires DropdownMenu#show
     */

  }, {
    key: "_show",
    value: function _show($sub) {
      var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
        return jquery__WEBPACK_IMPORTED_MODULE_0___default()(el).find($sub).length > 0;
      }));
      var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');

      this._hide($sibs, idx);

      $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');
      var clear = _foundation_util_box__WEBPACK_IMPORTED_MODULE_3__["Box"].ImNotTouchingYou($sub, null, true);

      if (!clear) {
        var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
            $parentLi = $sub.parent('.is-dropdown-submenu-parent');
        $parentLi.removeClass("opens".concat(oldClass)).addClass("opens-".concat(this.options.alignment));
        clear = _foundation_util_box__WEBPACK_IMPORTED_MODULE_3__["Box"].ImNotTouchingYou($sub, null, true);

        if (!clear) {
          $parentLi.removeClass("opens-".concat(this.options.alignment)).addClass('opens-inner');
        }

        this.changed = true;
      }

      $sub.css('visibility', '');

      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }
      /**
       * Fires when the new dropdown pane is visible.
       * @event DropdownMenu#show
       */


      this.$element.trigger('show.zf.dropdownmenu', [$sub]);
    }
    /**
     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
     * @function
     * @param {jQuery} $elem - element with a submenu to hide
     * @param {Number} idx - index of the $tabs collection to hide
     * @private
     */

  }, {
    key: "_hide",
    value: function _hide($elem, idx) {
      var $toClose;

      if ($elem && $elem.length) {
        $toClose = $elem;
      } else if (idx !== undefined) {
        $toClose = this.$tabs.not(function (i, el) {
          return i === idx;
        });
      } else {
        $toClose = this.$element;
      }

      var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

      if (somethingToClose) {
        $toClose.find('li.is-active').add($toClose).attr({
          'data-is-click': false
        }).removeClass('is-active');
        $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');

        if (this.changed || $toClose.find('opens-inner').length) {
          var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
          $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass("opens-inner opens-".concat(this.options.alignment)).addClass("opens-".concat(oldClass));
          this.changed = false;
        }
        /**
         * Fires when the open menus are closed.
         * @event DropdownMenu#hide
         */


        this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
      }
    }
    /**
     * Destroys the plugin.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).off('.zf.dropdownmenu');
      _foundation_util_nest__WEBPACK_IMPORTED_MODULE_2__["Nest"].Burn(this.$element, 'dropdown');
    }
  }]);

  return DropdownMenu;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_5__["Plugin"]);
/**
 * Default settings for plugin
 */


DropdownMenu.defaults = {
  /**
   * Disallows hover events from opening submenus
   * @option
   * @type {boolean}
   * @default false
   */
  disableHover: false,

  /**
   * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
   * @option
   * @type {boolean}
   * @default true
   */
  autoclose: true,

  /**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @type {number}
   * @default 50
   */
  hoverDelay: 50,

  /**
   * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
   * @option
   * @type {boolean}
   * @default false
   */
  clickOpen: false,

  /**
   * Amount of time to delay closing a submenu on a mouseleave event.
   * @option
   * @type {number}
   * @default 500
   */
  closingTime: 500,

  /**
   * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',

  /**
   * Allow clicks on the body to close any open submenus.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClick: true,

  /**
   * Allow clicks on leaf anchor links to close any open submenus.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClickInside: true,

  /**
   * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
   * @option
   * @type {string}
   * @default 'vertical'
   */
  verticalClass: 'vertical',

  /**
   * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
   * @option
   * @type {string}
   * @default 'align-right'
   */
  rightClass: 'align-right',

  /**
   * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
   * @option
   * @type {boolean}
   * @default true
   */
  forceFollow: true
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.equalizer.js":
/*!******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.equalizer.js ***!
  \******************************************************************/
/*! exports provided: Equalizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Equalizer", function() { return Equalizer; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.imageLoader */ "./node_modules/foundation-sites/js/foundation.util.imageLoader.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






/**
 * Equalizer module.
 * @module foundation.equalizer
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.imageLoader if equalizer contains images
 */

var Equalizer =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Equalizer, _Plugin);

  function Equalizer() {
    _classCallCheck(this, Equalizer);

    return _possibleConstructorReturn(this, _getPrototypeOf(Equalizer).apply(this, arguments));
  }

  _createClass(Equalizer, [{
    key: "_setup",

    /**
     * Creates a new instance of Equalizer.
     * @class
     * @name Equalizer
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Equalizer.defaults, this.$element.data(), options);
      this.className = 'Equalizer'; // ie9 back compat

      this._init();
    }
    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var eqId = this.$element.attr('data-equalizer') || '';
      var $watched = this.$element.find("[data-equalizer-watch=\"".concat(eqId, "\"]"));

      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"]._init();

      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
      this.$element.attr('data-resize', eqId || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["GetYoDigits"])(6, 'eq'));
      this.$element.attr('data-mutate', eqId || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["GetYoDigits"])(6, 'eq'));
      this.hasNested = this.$element.find('[data-equalizer]').length > 0;
      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
      this.isOn = false;
      this._bindHandler = {
        onResizeMeBound: this._onResizeMe.bind(this),
        onPostEqualizedBound: this._onPostEqualized.bind(this)
      };
      var imgs = this.$element.find('img');
      var tooSmall;

      if (this.options.equalizeOn) {
        tooSmall = this._checkMQ();
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
      } else {
        this._events();
      }

      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
        if (imgs.length) {
          Object(_foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_2__["onImagesLoaded"])(imgs, this._reflow.bind(this));
        } else {
          this._reflow();
        }
      }
    }
    /**
     * Removes event listeners if the breakpoint is too small.
     * @private
     */

  }, {
    key: "_pauseEvents",
    value: function _pauseEvents() {
      this.isOn = false;
      this.$element.off({
        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,
        'mutateme.zf.trigger': this._bindHandler.onResizeMeBound
      });
    }
    /**
     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
     * @private
     */

  }, {
    key: "_onResizeMe",
    value: function _onResizeMe(e) {
      this._reflow();
    }
    /**
     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
     * @private
     */

  }, {
    key: "_onPostEqualized",
    value: function _onPostEqualized(e) {
      if (e.target !== this.$element[0]) {
        this._reflow();
      }
    }
    /**
     * Initializes events for Equalizer.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      this._pauseEvents();

      if (this.hasNested) {
        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
      } else {
        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
        this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);
      }

      this.isOn = true;
    }
    /**
     * Checks the current breakpoint to the minimum required size.
     * @private
     */

  }, {
    key: "_checkMQ",
    value: function _checkMQ() {
      var tooSmall = !_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].is(this.options.equalizeOn);

      if (tooSmall) {
        if (this.isOn) {
          this._pauseEvents();

          this.$watched.css('height', 'auto');
        }
      } else {
        if (!this.isOn) {
          this._events();
        }
      }

      return tooSmall;
    }
    /**
     * A noop version for the plugin
     * @private
     */

  }, {
    key: "_killswitch",
    value: function _killswitch() {
      return;
    }
    /**
     * Calls necessary functions to update Equalizer upon DOM change
     * @private
     */

  }, {
    key: "_reflow",
    value: function _reflow() {
      if (!this.options.equalizeOnStack) {
        if (this._isStacked()) {
          this.$watched.css('height', 'auto');
          return false;
        }
      }

      if (this.options.equalizeByRow) {
        this.getHeightsByRow(this.applyHeightByRow.bind(this));
      } else {
        this.getHeights(this.applyHeight.bind(this));
      }
    }
    /**
     * Manually determines if the first 2 elements are *NOT* stacked.
     * @private
     */

  }, {
    key: "_isStacked",
    value: function _isStacked() {
      if (!this.$watched[0] || !this.$watched[1]) {
        return true;
      }

      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
    }
    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} heights - An array of heights of children within Equalizer container
     */

  }, {
    key: "getHeights",
    value: function getHeights(cb) {
      var heights = [];

      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        heights.push(this.$watched[i].offsetHeight);
      }

      cb(heights);
    }
    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     */

  }, {
    key: "getHeightsByRow",
    value: function getHeightsByRow(cb) {
      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
          groups = [],
          group = 0; //group by Row

      groups[group] = [];

      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto'; //maybe could use this.$watched[i].offsetTop

        var elOffsetTop = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.$watched[i]).offset().top;

        if (elOffsetTop != lastElTopOffset) {
          group++;
          groups[group] = [];
          lastElTopOffset = elOffsetTop;
        }

        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
      }

      for (var j = 0, ln = groups.length; j < ln; j++) {
        var heights = jquery__WEBPACK_IMPORTED_MODULE_0___default()(groups[j]).map(function () {
          return this[1];
        }).get();
        var max = Math.max.apply(null, heights);
        groups[j].push(max);
      }

      cb(groups);
    }
    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
     * @param {array} heights - An array of heights of children within Equalizer container
     * @fires Equalizer#preequalized
     * @fires Equalizer#postequalized
     */

  }, {
    key: "applyHeight",
    value: function applyHeight(heights) {
      var max = Math.max.apply(null, heights);
      /**
       * Fires before the heights are applied
       * @event Equalizer#preequalized
       */

      this.$element.trigger('preequalized.zf.equalizer');
      this.$watched.css('height', max);
      /**
       * Fires when the heights have been applied
       * @event Equalizer#postequalized
       */

      this.$element.trigger('postequalized.zf.equalizer');
    }
    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     * @fires Equalizer#preequalized
     * @fires Equalizer#preequalizedrow
     * @fires Equalizer#postequalizedrow
     * @fires Equalizer#postequalized
     */

  }, {
    key: "applyHeightByRow",
    value: function applyHeightByRow(groups) {
      /**
       * Fires before the heights are applied
       */
      this.$element.trigger('preequalized.zf.equalizer');

      for (var i = 0, len = groups.length; i < len; i++) {
        var groupsILength = groups[i].length,
            max = groups[i][groupsILength - 1];

        if (groupsILength <= 2) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(groups[i][0][0]).css({
            'height': 'auto'
          });
          continue;
        }
        /**
          * Fires before the heights per row are applied
          * @event Equalizer#preequalizedrow
          */


        this.$element.trigger('preequalizedrow.zf.equalizer');

        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(groups[i][j][0]).css({
            'height': max
          });
        }
        /**
          * Fires when the heights per row have been applied
          * @event Equalizer#postequalizedrow
          */


        this.$element.trigger('postequalizedrow.zf.equalizer');
      }
      /**
       * Fires when the heights have been applied
       */


      this.$element.trigger('postequalized.zf.equalizer');
    }
    /**
     * Destroys an instance of Equalizer.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this._pauseEvents();

      this.$watched.css('height', 'auto');
    }
  }]);

  return Equalizer;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_4__["Plugin"]);
/**
 * Default settings for plugin
 */


Equalizer.defaults = {
  /**
   * Enable height equalization when stacked on smaller screens.
   * @option
   * @type {boolean}
   * @default false
   */
  equalizeOnStack: false,

  /**
   * Enable height equalization row by row.
   * @option
   * @type {boolean}
   * @default false
   */
  equalizeByRow: false,

  /**
   * String representing the minimum breakpoint size the plugin should equalize heights on.
   * @option
   * @type {string}
   * @default ''
   */
  equalizeOn: ''
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.interchange.js":
/*!********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.interchange.js ***!
  \********************************************************************/
/*! exports provided: Interchange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interchange", function() { return Interchange; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Interchange module.
 * @module foundation.interchange
 * @requires foundation.util.mediaQuery
 */

var Interchange =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Interchange, _Plugin);

  function Interchange() {
    _classCallCheck(this, Interchange);

    return _possibleConstructorReturn(this, _getPrototypeOf(Interchange).apply(this, arguments));
  }

  _createClass(Interchange, [{
    key: "_setup",

    /**
     * Creates a new instance of Interchange.
     * @class
     * @name Interchange
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';
      this.className = 'Interchange'; // ie9 back compat

      this._init();

      this._events();
    }
    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"]._init();

      var id = this.$element[0].id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["GetYoDigits"])(6, 'interchange');
      this.$element.attr({
        'data-resize': id,
        'id': id
      });

      this._addBreakpoints();

      this._generateRules();

      this._reflow();
    }
    /**
     * Initializes events for Interchange.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this2 = this;

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function () {
        return _this2._reflow();
      });
    }
    /**
     * Calls necessary functions to update Interchange upon DOM change
     * @function
     * @private
     */

  }, {
    key: "_reflow",
    value: function _reflow() {
      var match; // Iterate through each rule, but only save the last match

      for (var i in this.rules) {
        if (this.rules.hasOwnProperty(i)) {
          var rule = this.rules[i];

          if (window.matchMedia(rule.query).matches) {
            match = rule;
          }
        }
      }

      if (match) {
        this.replace(match.path);
      }
    }
    /**
     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
     * @function
     * @private
     */

  }, {
    key: "_addBreakpoints",
    value: function _addBreakpoints() {
      for (var i in _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].queries) {
        if (_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].queries.hasOwnProperty(i)) {
          var query = _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].queries[i];
          Interchange.SPECIAL_QUERIES[query.name] = query.value;
        }
      }
    }
    /**
     * Checks the Interchange element for the provided media query + content pairings
     * @function
     * @private
     * @param {Object} element - jQuery object that is an Interchange instance
     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
     */

  }, {
    key: "_generateRules",
    value: function _generateRules(element) {
      var rulesList = [];
      var rules;

      if (this.options.rules) {
        rules = this.options.rules;
      } else {
        rules = this.$element.data('interchange');
      }

      rules = typeof rules === 'string' ? rules.match(/\[.*?\]/g) : rules;

      for (var i in rules) {
        if (rules.hasOwnProperty(i)) {
          var rule = rules[i].slice(1, -1).split(', ');
          var path = rule.slice(0, -1).join('');
          var query = rule[rule.length - 1];

          if (Interchange.SPECIAL_QUERIES[query]) {
            query = Interchange.SPECIAL_QUERIES[query];
          }

          rulesList.push({
            path: path,
            query: query
          });
        }
      }

      this.rules = rulesList;
    }
    /**
     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
     * @function
     * @param {String} path - Path to the image or HTML partial.
     * @fires Interchange#replaced
     */

  }, {
    key: "replace",
    value: function replace(path) {
      if (this.currentPath === path) return;

      var _this = this,
          trigger = 'replaced.zf.interchange'; // Replacing images


      if (this.$element[0].nodeName === 'IMG') {
        this.$element.attr('src', path).on('load', function () {
          _this.currentPath = path;
        }).trigger(trigger);
      } // Replacing background images
      else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
          path = path.replace(/\(/g, '%28').replace(/\)/g, '%29');
          this.$element.css({
            'background-image': 'url(' + path + ')'
          }).trigger(trigger);
        } // Replacing HTML
        else {
            jquery__WEBPACK_IMPORTED_MODULE_0___default.a.get(path, function (response) {
              _this.$element.html(response).trigger(trigger);

              jquery__WEBPACK_IMPORTED_MODULE_0___default()(response).foundation();
              _this.currentPath = path;
            });
          }
      /**
       * Fires when content in an Interchange element is done being loaded.
       * @event Interchange#replaced
       */
      // this.$element.trigger('replaced.zf.interchange');

    }
    /**
     * Destroys an instance of interchange.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.off('resizeme.zf.trigger');
    }
  }]);

  return Interchange;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_2__["Plugin"]);
/**
 * Default settings for plugin
 */


Interchange.defaults = {
  /**
   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
   * @option
   * @type {?array}
   * @default null
   */
  rules: null
};
Interchange.SPECIAL_QUERIES = {
  'landscape': 'screen and (orientation: landscape)',
  'portrait': 'screen and (orientation: portrait)',
  'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.magellan.js":
/*!*****************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.magellan.js ***!
  \*****************************************************************/
/*! exports provided: Magellan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Magellan", function() { return Magellan; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_smoothScroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.smoothScroll */ "./node_modules/foundation-sites/js/foundation.smoothScroll.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Magellan module.
 * @module foundation.magellan
 * @requires foundation.smoothScroll
 */

var Magellan =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Magellan, _Plugin);

  function Magellan() {
    _classCallCheck(this, Magellan);

    return _possibleConstructorReturn(this, _getPrototypeOf(Magellan).apply(this, arguments));
  }

  _createClass(Magellan, [{
    key: "_setup",

    /**
     * Creates a new instance of Magellan.
     * @class
     * @name Magellan
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Magellan.defaults, this.$element.data(), options);
      this.className = 'Magellan'; // ie9 back compat

      this._init();

      this.calcPoints();
    }
    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var id = this.$element[0].id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["GetYoDigits"])(6, 'magellan');

      var _this = this;

      this.$targets = jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-magellan-target]');
      this.$links = this.$element.find('a');
      this.$element.attr({
        'data-resize': id,
        'data-scroll': id,
        'id': id
      });
      this.$active = jquery__WEBPACK_IMPORTED_MODULE_0___default()();
      this.scrollPos = parseInt(window.pageYOffset, 10);

      this._events();
    }
    /**
     * Calculates an array of pixel values that are the demarcation lines between locations on the page.
     * Can be invoked if new elements are added or the size of a location changes.
     * @function
     */

  }, {
    key: "calcPoints",
    value: function calcPoints() {
      var _this = this,
          body = document.body,
          html = document.documentElement;

      this.points = [];
      this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
      this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));
      this.$targets.each(function () {
        var $tar = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            pt = Math.round($tar.offset().top - _this.options.threshold);
        $tar.targetPoint = pt;

        _this.points.push(pt);
      });
    }
    /**
     * Initializes events for Magellan.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this,
          $body = jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body'),
          opts = {
        duration: _this.options.animationDuration,
        easing: _this.options.animationEasing
      };

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).one('load', function () {
        if (_this.options.deepLinking) {
          if (location.hash) {
            _this.scrollToLoc(location.hash);
          }
        }

        _this.calcPoints();

        _this._updateActive();
      });
      this.$element.on({
        'resizeme.zf.trigger': this.reflow.bind(this),
        'scrollme.zf.trigger': this._updateActive.bind(this)
      }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
        e.preventDefault();
        var arrival = this.getAttribute('href');

        _this.scrollToLoc(arrival);
      });

      this._deepLinkScroll = function (e) {
        if (_this.options.deepLinking) {
          _this.scrollToLoc(window.location.hash);
        }
      };

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('popstate', this._deepLinkScroll);
    }
    /**
     * Function to scroll to a given location on the page.
     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
     * @function
     */

  }, {
    key: "scrollToLoc",
    value: function scrollToLoc(loc) {
      this._inTransition = true;

      var _this = this;

      var options = {
        animationEasing: this.options.animationEasing,
        animationDuration: this.options.animationDuration,
        threshold: this.options.threshold,
        offset: this.options.offset
      };
      _foundation_smoothScroll__WEBPACK_IMPORTED_MODULE_3__["SmoothScroll"].scrollToLoc(loc, options, function () {
        _this._inTransition = false;

        _this._updateActive();
      });
    }
    /**
     * Calls necessary functions to update Magellan upon DOM change
     * @function
     */

  }, {
    key: "reflow",
    value: function reflow() {
      this.calcPoints();

      this._updateActive();
    }
    /**
     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
     * @private
     * @function
     * @fires Magellan#update
     */

  }, {
    key: "_updateActive",
    value: function _updateActive()
    /*evt, elem, scrollPos*/
    {
      if (this._inTransition) {
        return;
      }

      var winPos =
      /*scrollPos ||*/
      parseInt(window.pageYOffset, 10),
          curIdx;

      if (winPos + this.winHeight === this.docHeight) {
        curIdx = this.points.length - 1;
      } else if (winPos < this.points[0]) {
        curIdx = undefined;
      } else {
        var isDown = this.scrollPos < winPos,
            _this = this,
            curVisible = this.points.filter(function (p, i) {
          return isDown ? p - _this.options.offset <= winPos : p - _this.options.offset - _this.options.threshold <= winPos;
        });

        curIdx = curVisible.length ? curVisible.length - 1 : 0;
      }

      this.$active.removeClass(this.options.activeClass);
      this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = "";

        if (curIdx != undefined) {
          hash = this.$active[0].getAttribute('href');
        }

        if (hash !== window.location.hash) {
          if (window.history.pushState) {
            window.history.pushState(null, null, hash);
          } else {
            window.location.hash = hash;
          }
        }
      }

      this.scrollPos = winPos;
      /**
       * Fires when magellan is finished updating to the new active element.
       * @event Magellan#update
       */

      this.$element.trigger('update.zf.magellan', [this.$active]);
    }
    /**
     * Destroys an instance of Magellan and resets the url of the window.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.off('.zf.trigger .zf.magellan').find(".".concat(this.options.activeClass)).removeClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        window.location.hash.replace(hash, '');
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('popstate', this._deepLinkScroll);
    }
  }]);

  return Magellan;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_2__["Plugin"]);
/**
 * Default settings for plugin
 */


Magellan.defaults = {
  /**
   * Amount of time, in ms, the animated scrolling should take between locations.
   * @option
   * @type {number}
   * @default 500
   */
  animationDuration: 500,

  /**
   * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
   * @option
   * @type {string}
   * @default 'linear'
   * @see {@link https://api.jquery.com/animate|Jquery animate}
   */
  animationEasing: 'linear',

  /**
   * Number of pixels to use as a marker for location changes.
   * @option
   * @type {number}
   * @default 50
   */
  threshold: 50,

  /**
   * Class applied to the active locations link on the magellan container.
   * @option
   * @type {string}
   * @default 'is-active'
   */
  activeClass: 'is-active',

  /**
   * Allows the script to manipulate the url of the current page, and if supported, alter the history.
   * @option
   * @type {boolean}
   * @default false
   */
  deepLinking: false,

  /**
   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
   * @option
   * @type {number}
   * @default 0
   */
  offset: 0
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.offcanvas.js":
/*!******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.offcanvas.js ***!
  \******************************************************************/
/*! exports provided: OffCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OffCanvas", function() { return OffCanvas; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }







/**
 * OffCanvas module.
 * @module foundation.offcanvas
 * @requires foundation.util.keyboard
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.triggers
 */

var OffCanvas =
/*#__PURE__*/
function (_Plugin) {
  _inherits(OffCanvas, _Plugin);

  function OffCanvas() {
    _classCallCheck(this, OffCanvas);

    return _possibleConstructorReturn(this, _getPrototypeOf(OffCanvas).apply(this, arguments));
  }

  _createClass(OffCanvas, [{
    key: "_setup",

    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @name OffCanvas
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      var _this2 = this;

      this.className = 'OffCanvas'; // ie9 back compat

      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.contentClasses = {
        base: [],
        reveal: []
      };
      this.$lastTrigger = jquery__WEBPACK_IMPORTED_MODULE_0___default()();
      this.$triggers = jquery__WEBPACK_IMPORTED_MODULE_0___default()();
      this.position = 'left';
      this.$content = jquery__WEBPACK_IMPORTED_MODULE_0___default()();
      this.nested = !!this.options.nested; // Defines the CSS transition/position classes of the off-canvas content container.

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(['push', 'overlap']).each(function (index, val) {
        _this2.contentClasses.base.push('has-transition-' + val);
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(['left', 'right', 'top', 'bottom']).each(function (index, val) {
        _this2.contentClasses.base.push('has-position-' + val);

        _this2.contentClasses.reveal.push('has-reveal-' + val);
      }); // Triggers init is idempotent, just need to make sure it is initialized

      _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_5__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"]._init();

      this._init();

      this._events();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }
    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var id = this.$element.attr('id');
      this.$element.attr('aria-hidden', 'true'); // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)

      if (this.options.contentId) {
        this.$content = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#' + this.options.contentId);
      } else if (this.$element.siblings('[data-off-canvas-content]').length) {
        this.$content = this.$element.siblings('[data-off-canvas-content]').first();
      } else {
        this.$content = this.$element.closest('[data-off-canvas-content]').first();
      }

      if (!this.options.contentId) {
        // Assume that the off-canvas element is nested if it isn't a sibling of the content
        this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;
      } else if (this.options.contentId && this.options.nested === null) {
        // Warning if using content ID without setting the nested option
        // Once the element is nested it is required to work properly in this case
        console.warn('Remember to use the nested option if using the content ID option!');
      }

      if (this.nested === true) {
        // Force transition overlap if nested
        this.options.transition = 'overlap'; // Remove appropriate classes if already assigned in markup

        this.$element.removeClass('is-transition-push');
      }

      this.$element.addClass("is-transition-".concat(this.options.transition, " is-closed")); // Find triggers that affect this element and add aria-expanded to them

      this.$triggers = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id); // Get position by checking for related CSS class

      this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\-(left|top|right|bottom)/)[1] : this.position; // Add an overlay over the content if necessary

      if (this.options.contentOverlay === true) {
        var overlay = document.createElement('div');
        var overlayPosition = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.$element).css("position") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';
        overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);
        this.$overlay = jquery__WEBPACK_IMPORTED_MODULE_0___default()(overlay);

        if (overlayPosition === 'is-overlay-fixed') {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.$overlay).insertAfter(this.$element);
        } else {
          this.$content.append(this.$overlay);
        }
      }

      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

      if (this.options.isRevealed === true) {
        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];

        this._setMQChecker();
      }

      if (this.options.transitionTime) {
        this.$element.css('transition-duration', this.options.transitionTime);
      } // Initally remove all transition/position CSS classes from off-canvas content container.


      this._removeContentClasses();
    }
    /**
     * Adds event handlers to the off-canvas wrapper and the exit overlay.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      this.$element.off('.zf.trigger .zf.offcanvas').on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
      });

      if (this.options.closeOnClick === true) {
        var $target = this.options.contentOverlay ? this.$overlay : this.$content;
        $target.on({
          'click.zf.offcanvas': this.close.bind(this)
        });
      }
    }
    /**
     * Applies event listener for elements that will reveal at certain breakpoints.
     * @private
     */

  }, {
    key: "_setMQChecker",
    value: function _setMQChecker() {
      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('changed.zf.mediaquery', function () {
        if (_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        } else {
          _this.reveal(false);
        }
      }).one('load.zf.offcanvas', function () {
        if (_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        }
      });
    }
    /**
     * Removes the CSS transition/position classes of the off-canvas content container.
     * Removing the classes is important when another off-canvas gets opened that uses the same content container.
     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
     * @private
     */

  }, {
    key: "_removeContentClasses",
    value: function _removeContentClasses(hasReveal) {
      if (typeof hasReveal !== 'boolean') {
        this.$content.removeClass(this.contentClasses.base.join(' '));
      } else if (hasReveal === false) {
        this.$content.removeClass("has-reveal-".concat(this.position));
      }
    }
    /**
     * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.
     * Beforehand any transition/position class gets removed.
     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
     * @private
     */

  }, {
    key: "_addContentClasses",
    value: function _addContentClasses(hasReveal) {
      this._removeContentClasses(hasReveal);

      if (typeof hasReveal !== 'boolean') {
        this.$content.addClass("has-transition-".concat(this.options.transition, " has-position-").concat(this.position));
      } else if (hasReveal === true) {
        this.$content.addClass("has-reveal-".concat(this.position));
      }
    }
    /**
     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
     * @param {Boolean} isRevealed - true if element should be revealed.
     * @function
     */

  }, {
    key: "reveal",
    value: function reveal(isRevealed) {
      if (isRevealed) {
        this.close();
        this.isRevealed = true;
        this.$element.attr('aria-hidden', 'false');
        this.$element.off('open.zf.trigger toggle.zf.trigger');
        this.$element.removeClass('is-closed');
      } else {
        this.isRevealed = false;
        this.$element.attr('aria-hidden', 'true');
        this.$element.off('open.zf.trigger toggle.zf.trigger').on({
          'open.zf.trigger': this.open.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this)
        });
        this.$element.addClass('is-closed');
      }

      this._addContentClasses(isRevealed);
    }
    /**
     * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.
     * @private
     */

  }, {
    key: "_stopScrolling",
    value: function _stopScrolling(event) {
      return false;
    } // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios
    // Only really works for y, not sure how to extend to x or if we need to.

  }, {
    key: "_recordScrollable",
    value: function _recordScrollable(event) {
      var elem = this; // called from event handler context with this as elem
      // If the element is scrollable (content overflows), then...

      if (elem.scrollHeight !== elem.clientHeight) {
        // If we're at the top, scroll down one pixel to allow scrolling up
        if (elem.scrollTop === 0) {
          elem.scrollTop = 1;
        } // If we're at the bottom, scroll up one pixel to allow scrolling down


        if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {
          elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;
        }
      }

      elem.allowUp = elem.scrollTop > 0;
      elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;
      elem.lastY = event.originalEvent.pageY;
    }
  }, {
    key: "_stopScrollPropagation",
    value: function _stopScrollPropagation(event) {
      var elem = this; // called from event handler context with this as elem

      var up = event.pageY < elem.lastY;
      var down = !up;
      elem.lastY = event.pageY;

      if (up && elem.allowUp || down && elem.allowDown) {
        event.stopPropagation();
      } else {
        event.preventDefault();
      }
    }
    /**
     * Opens the off-canvas menu.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     * @fires OffCanvas#opened
     */

  }, {
    key: "open",
    value: function open(event, trigger) {
      if (this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }

      var _this = this;

      if (trigger) {
        this.$lastTrigger = trigger;
      }

      if (this.options.forceTo === 'top') {
        window.scrollTo(0, 0);
      } else if (this.options.forceTo === 'bottom') {
        window.scrollTo(0, document.body.scrollHeight);
      }

      if (this.options.transitionTime && this.options.transition !== 'overlap') {
        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);
      } else {
        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');
      }
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#opened
       */


      this.$element.addClass('is-open').removeClass('is-closed');
      this.$triggers.attr('aria-expanded', 'true');
      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');
      this.$content.addClass('is-open-' + this.position); // If `contentScroll` is set to false, add class and disable scrolling on touch devices.

      if (this.options.contentScroll === false) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);
        this.$element.on('touchstart', this._recordScrollable);
        this.$element.on('touchmove', this._stopScrollPropagation);
      }

      if (this.options.contentOverlay === true) {
        this.$overlay.addClass('is-visible');
      }

      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
        this.$overlay.addClass('is-closable');
      }

      if (this.options.autoFocus === true) {
        this.$element.one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])(this.$element), function () {
          if (!_this.$element.hasClass('is-open')) {
            return; // exit if prematurely closed
          }

          var canvasFocus = _this.$element.find('[data-autofocus]');

          if (canvasFocus.length) {
            canvasFocus.eq(0).focus();
          } else {
            _this.$element.find('a, button').eq(0).focus();
          }
        });
      }

      if (this.options.trapFocus === true) {
        this.$content.attr('tabindex', '-1');
        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].trapFocus(this.$element);
      }

      this._addContentClasses();
    }
    /**
     * Closes the off-canvas menu.
     * @function
     * @param {Function} cb - optional cb to fire after closure.
     * @fires OffCanvas#closed
     */

  }, {
    key: "close",
    value: function close(cb) {
      if (!this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }

      var _this = this;

      this.$element.removeClass('is-open');
      this.$element.attr('aria-hidden', 'true')
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */
      .trigger('closed.zf.offcanvas');
      this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom'); // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.

      if (this.options.contentScroll === false) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);
        this.$element.off('touchstart', this._recordScrollable);
        this.$element.off('touchmove', this._stopScrollPropagation);
      }

      if (this.options.contentOverlay === true) {
        this.$overlay.removeClass('is-visible');
      }

      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
        this.$overlay.removeClass('is-closable');
      }

      this.$triggers.attr('aria-expanded', 'false');

      if (this.options.trapFocus === true) {
        this.$content.removeAttr('tabindex');
        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].releaseFocus(this.$element);
      } // Listen to transitionEnd and add class when done.


      this.$element.one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["transitionend"])(this.$element), function (e) {
        _this.$element.addClass('is-closed');

        _this._removeContentClasses();
      });
    }
    /**
     * Toggles the off-canvas menu open or closed.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     */

  }, {
    key: "toggle",
    value: function toggle(event, trigger) {
      if (this.$element.hasClass('is-open')) {
        this.close(event, trigger);
      } else {
        this.open(event, trigger);
      }
    }
    /**
     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
     * @function
     * @private
     */

  }, {
    key: "_handleKeyboard",
    value: function _handleKeyboard(e) {
      var _this3 = this;

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'OffCanvas', {
        close: function close() {
          _this3.close();

          _this3.$lastTrigger.focus();

          return true;
        },
        handled: function handled() {
          e.stopPropagation();
          e.preventDefault();
        }
      });
    }
    /**
     * Destroys the offcanvas plugin.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.close();
      this.$element.off('.zf.trigger .zf.offcanvas');
      this.$overlay.off('.zf.offcanvas');
    }
  }]);

  return OffCanvas;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_4__["Plugin"]);

OffCanvas.defaults = {
  /**
   * Allow the user to click outside of the menu to close it.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClick: true,

  /**
   * Adds an overlay on top of `[data-off-canvas-content]`.
   * @option
   * @type {boolean}
   * @default true
   */
  contentOverlay: true,

  /**
   * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.
   * @option
   * @type {?string}
   * @default null
   */
  contentId: null,

  /**
   * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.
   * @option
   * @type {boolean}
   * @default null
   */
  nested: null,

  /**
   * Enable/disable scrolling of the main content when an off canvas panel is open.
   * @option
   * @type {boolean}
   * @default true
   */
  contentScroll: true,

  /**
   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
   * @option
   * @type {number}
   * @default null
   */
  transitionTime: null,

  /**
   * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.
   * @option
   * @type {string}
   * @default push
   */
  transition: 'push',

  /**
   * Force the page to scroll to top or bottom on open.
   * @option
   * @type {?string}
   * @default null
   */
  forceTo: null,

  /**
   * Allow the offcanvas to remain open for certain breakpoints.
   * @option
   * @type {boolean}
   * @default false
   */
  isRevealed: false,

  /**
   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
   * @option
   * @type {?string}
   * @default null
   */
  revealOn: null,

  /**
   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
   * @option
   * @type {boolean}
   * @default true
   */
  autoFocus: true,

  /**
   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
   * @option
   * @type {string}
   * @default reveal-for-
   * @todo improve the regex testing for this.
   */
  revealClass: 'reveal-for-',

  /**
   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
   * @option
   * @type {boolean}
   * @default false
   */
  trapFocus: false
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.orbit.js":
/*!**************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.orbit.js ***!
  \**************************************************************/
/*! exports provided: Orbit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Orbit", function() { return Orbit; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.motion */ "./node_modules/foundation-sites/js/foundation.util.motion.js");
/* harmony import */ var _foundation_util_timer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.timer */ "./node_modules/foundation-sites/js/foundation.util.timer.js");
/* harmony import */ var _foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.util.imageLoader */ "./node_modules/foundation-sites/js/foundation.util.imageLoader.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_touch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./foundation.util.touch */ "./node_modules/foundation-sites/js/foundation.util.touch.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }









/**
 * Orbit module.
 * @module foundation.orbit
 * @requires foundation.util.keyboard
 * @requires foundation.util.motion
 * @requires foundation.util.timer
 * @requires foundation.util.imageLoader
 * @requires foundation.util.touch
 */

var Orbit =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Orbit, _Plugin);

  function Orbit() {
    _classCallCheck(this, Orbit);

    return _possibleConstructorReturn(this, _getPrototypeOf(Orbit).apply(this, arguments));
  }

  _createClass(Orbit, [{
    key: "_setup",

    /**
    * Creates a new instance of an orbit carousel.
    * @class
    * @name Orbit
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
    * @param {Object} options - Overrides to the default plugin settings.
    */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Orbit.defaults, this.$element.data(), options);
      this.className = 'Orbit'; // ie9 back compat

      _foundation_util_touch__WEBPACK_IMPORTED_MODULE_7__["Touch"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a); // Touch init is idempotent, we just need to make sure it's initialied.

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('Orbit', {
        'ltr': {
          'ARROW_RIGHT': 'next',
          'ARROW_LEFT': 'previous'
        },
        'rtl': {
          'ARROW_LEFT': 'next',
          'ARROW_RIGHT': 'previous'
        }
      });
    }
    /**
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
    * @function
    * @private
    */

  }, {
    key: "_init",
    value: function _init() {
      // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide
      this._reset();

      this.$wrapper = this.$element.find(".".concat(this.options.containerClass));
      this.$slides = this.$element.find(".".concat(this.options.slideClass));
      var $images = this.$element.find('img'),
          initActive = this.$slides.filter('.is-active'),
          id = this.$element[0].id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_5__["GetYoDigits"])(6, 'orbit');
      this.$element.attr({
        'data-resize': id,
        'id': id
      });

      if (!initActive.length) {
        this.$slides.eq(0).addClass('is-active');
      }

      if (!this.options.useMUI) {
        this.$slides.addClass('no-motionui');
      }

      if ($images.length) {
        Object(_foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_4__["onImagesLoaded"])($images, this._prepareForOrbit.bind(this));
      } else {
        this._prepareForOrbit(); //hehe

      }

      if (this.options.bullets) {
        this._loadBullets();
      }

      this._events();

      if (this.options.autoPlay && this.$slides.length > 1) {
        this.geoSync();
      }

      if (this.options.accessible) {
        // allow wrapper to be focusable to enable arrow navigation
        this.$wrapper.attr('tabindex', 0);
      }
    }
    /**
    * Creates a jQuery collection of bullets, if they are being used.
    * @function
    * @private
    */

  }, {
    key: "_loadBullets",
    value: function _loadBullets() {
      this.$bullets = this.$element.find(".".concat(this.options.boxOfBullets)).find('button');
    }
    /**
    * Sets a `timer` object on the orbit, and starts the counter for the next slide.
    * @function
    */

  }, {
    key: "geoSync",
    value: function geoSync() {
      var _this = this;

      this.timer = new _foundation_util_timer__WEBPACK_IMPORTED_MODULE_3__["Timer"](this.$element, {
        duration: this.options.timerDelay,
        infinite: false
      }, function () {
        _this.changeSlide(true);
      });
      this.timer.start();
    }
    /**
    * Sets wrapper and slide heights for the orbit.
    * @function
    * @private
    */

  }, {
    key: "_prepareForOrbit",
    value: function _prepareForOrbit() {
      var _this = this;

      this._setWrapperHeight();
    }
    /**
    * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
    * @function
    * @private
    * @param {Function} cb - a callback function to fire when complete.
    */

  }, {
    key: "_setWrapperHeight",
    value: function _setWrapperHeight(cb) {
      //rewrite this to `for` loop
      var max = 0,
          temp,
          counter = 0,
          _this = this;

      this.$slides.each(function () {
        temp = this.getBoundingClientRect().height;
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('data-slide', counter);

        if (!/mui/g.test(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this)[0].className) && _this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {
          //if not the active slide, set css position and display property
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).css({
            'position': 'relative',
            'display': 'none'
          });
        }

        max = temp > max ? temp : max;
        counter++;
      });

      if (counter === this.$slides.length) {
        this.$wrapper.css({
          'height': max
        }); //only change the wrapper height property once.

        if (cb) {
          cb(max);
        } //fire callback with max height dimension.

      }
    }
    /**
    * Sets the max-height of each slide.
    * @function
    * @private
    */

  }, {
    key: "_setSlideHeight",
    value: function _setSlideHeight(height) {
      this.$slides.each(function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).css('max-height', height);
      });
    }
    /**
    * Adds event listeners to basically everything within the element.
    * @function
    * @private
    */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this; //***************************************
      //**Now using custom event - thanks to:**
      //**      Yohai Ararat of Toronto      **
      //***************************************
      //


      this.$element.off('.resizeme.zf.trigger').on({
        'resizeme.zf.trigger': this._prepareForOrbit.bind(this)
      });

      if (this.$slides.length > 1) {
        if (this.options.swipe) {
          this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
            e.preventDefault();

            _this.changeSlide(true);
          }).on('swiperight.zf.orbit', function (e) {
            e.preventDefault();

            _this.changeSlide(false);
          });
        } //***************************************


        if (this.options.autoPlay) {
          this.$slides.on('click.zf.orbit', function () {
            _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);

            _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
          });

          if (this.options.pauseOnHover) {
            this.$element.on('mouseenter.zf.orbit', function () {
              _this.timer.pause();
            }).on('mouseleave.zf.orbit', function () {
              if (!_this.$element.data('clickedOn')) {
                _this.timer.start();
              }
            });
          }
        }

        if (this.options.navButtons) {
          var $controls = this.$element.find(".".concat(this.options.nextClass, ", .").concat(this.options.prevClass));
          $controls.attr('tabindex', 0) //also need to handle enter/return and spacebar key presses
          .on('click.zf.orbit touchend.zf.orbit', function (e) {
            e.preventDefault();

            _this.changeSlide(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).hasClass(_this.options.nextClass));
          });
        }

        if (this.options.bullets) {
          this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
            if (/is-active/g.test(this.className)) {
              return false;
            } //if this is active, kick out of function.


            var idx = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('slide'),
                ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                $slide = _this.$slides.eq(idx);

            _this.changeSlide(ltr, $slide, idx);
          });
        }

        if (this.options.accessible) {
          this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
            // handle keyboard event with keyboard util
            _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'Orbit', {
              next: function next() {
                _this.changeSlide(true);
              },
              previous: function previous() {
                _this.changeSlide(false);
              },
              handled: function handled() {
                // if bullet is focused, make sure focus moves
                if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target).is(_this.$bullets)) {
                  _this.$bullets.filter('.is-active').focus();
                }
              }
            });
          });
        }
      }
    }
    /**
     * Resets Orbit so it can be reinitialized
     */

  }, {
    key: "_reset",
    value: function _reset() {
      // Don't do anything if there are no slides (first run)
      if (typeof this.$slides == 'undefined') {
        return;
      }

      if (this.$slides.length > 1) {
        // Remove old events
        this.$element.off('.zf.orbit').find('*').off('.zf.orbit'); // Restart timer if autoPlay is enabled

        if (this.options.autoPlay) {
          this.timer.restart();
        } // Reset all sliddes


        this.$slides.each(function (el) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();
        }); // Show the first slide

        this.$slides.first().addClass('is-active').show(); // Triggers when the slide has finished animating

        this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]); // Select first bullet if bullets are present

        if (this.options.bullets) {
          this._updateBullets(0);
        }
      }
    }
    /**
    * Changes the current slide to a new one.
    * @function
    * @param {Boolean} isLTR - flag if the slide should move left to right.
    * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
    * @param {Number} idx - the index of the new slide in its collection, if one chosen.
    * @fires Orbit#slidechange
    */

  }, {
    key: "changeSlide",
    value: function changeSlide(isLTR, chosenSlide, idx) {
      if (!this.$slides) {
        return;
      } // Don't freak out if we're in the middle of cleanup


      var $curSlide = this.$slides.filter('.is-active').eq(0);

      if (/mui/g.test($curSlide[0].className)) {
        return false;
      } //if the slide is currently animating, kick out of the function


      var $firstSlide = this.$slides.first(),
          $lastSlide = this.$slides.last(),
          dirIn = isLTR ? 'Right' : 'Left',
          dirOut = isLTR ? 'Left' : 'Right',
          _this = this,
          $newSlide;

      if (!chosenSlide) {
        //most of the time, this will be auto played or clicked from the navButtons.
        $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
        this.options.infiniteWrap ? $curSlide.next(".".concat(this.options.slideClass)).length ? $curSlide.next(".".concat(this.options.slideClass)) : $firstSlide : $curSlide.next(".".concat(this.options.slideClass)) : //pick next slide if moving left to right
        this.options.infiniteWrap ? $curSlide.prev(".".concat(this.options.slideClass)).length ? $curSlide.prev(".".concat(this.options.slideClass)) : $lastSlide : $curSlide.prev(".".concat(this.options.slideClass)); //pick prev slide if moving right to left
      } else {
        $newSlide = chosenSlide;
      }

      if ($newSlide.length) {
        /**
        * Triggers before the next slide starts animating in and only if a next slide has been found.
        * @event Orbit#beforeslidechange
        */
        this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

        if (this.options.bullets) {
          idx = idx || this.$slides.index($newSlide); //grab index to update bullets

          this._updateBullets(idx);
        }

        if (this.options.useMUI && !this.$element.is(':hidden')) {
          _foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__["Motion"].animateIn($newSlide.addClass('is-active').css({
            'position': 'absolute',
            'top': 0
          }), this.options["animInFrom".concat(dirIn)], function () {
            $newSlide.css({
              'position': 'relative',
              'display': 'block'
            }).attr('aria-live', 'polite');
          });
          _foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__["Motion"].animateOut($curSlide.removeClass('is-active'), this.options["animOutTo".concat(dirOut)], function () {
            $curSlide.removeAttr('aria-live');

            if (_this.options.autoPlay && !_this.timer.isPaused) {
              _this.timer.restart();
            } //do stuff?

          });
        } else {
          $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
          $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();

          if (this.options.autoPlay && !this.timer.isPaused) {
            this.timer.restart();
          }
        }
        /**
        * Triggers when the slide has finished animating in.
        * @event Orbit#slidechange
        */


        this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
      }
    }
    /**
    * Updates the active state of the bullets, if displayed.
    * @function
    * @private
    * @param {Number} idx - the index of the current slide.
    */

  }, {
    key: "_updateBullets",
    value: function _updateBullets(idx) {
      var $oldBullet = this.$element.find(".".concat(this.options.boxOfBullets)).find('.is-active').removeClass('is-active').blur(),
          span = $oldBullet.find('span:last').detach(),
          $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
    }
    /**
    * Destroys the carousel and hides the element.
    * @function
    */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
    }
  }]);

  return Orbit;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_6__["Plugin"]);

Orbit.defaults = {
  /**
  * Tells the JS to look for and loadBullets.
  * @option
   * @type {boolean}
  * @default true
  */
  bullets: true,

  /**
  * Tells the JS to apply event listeners to nav buttons
  * @option
   * @type {boolean}
  * @default true
  */
  navButtons: true,

  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-in-right'
  */
  animInFromRight: 'slide-in-right',

  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-out-right'
  */
  animOutToRight: 'slide-out-right',

  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-in-left'
  *
  */
  animInFromLeft: 'slide-in-left',

  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-out-left'
  */
  animOutToLeft: 'slide-out-left',

  /**
  * Allows Orbit to automatically animate on page load.
  * @option
   * @type {boolean}
  * @default true
  */
  autoPlay: true,

  /**
  * Amount of time, in ms, between slide transitions
  * @option
   * @type {number}
  * @default 5000
  */
  timerDelay: 5000,

  /**
  * Allows Orbit to infinitely loop through the slides
  * @option
   * @type {boolean}
  * @default true
  */
  infiniteWrap: true,

  /**
  * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
  * @option
   * @type {boolean}
  * @default true
  */
  swipe: true,

  /**
  * Allows the timing function to pause animation on hover.
  * @option
   * @type {boolean}
  * @default true
  */
  pauseOnHover: true,

  /**
  * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
  * @option
   * @type {boolean}
  * @default true
  */
  accessible: true,

  /**
  * Class applied to the container of Orbit
  * @option
   * @type {string}
  * @default 'orbit-container'
  */
  containerClass: 'orbit-container',

  /**
  * Class applied to individual slides.
  * @option
   * @type {string}
  * @default 'orbit-slide'
  */
  slideClass: 'orbit-slide',

  /**
  * Class applied to the bullet container. You're welcome.
  * @option
   * @type {string}
  * @default 'orbit-bullets'
  */
  boxOfBullets: 'orbit-bullets',

  /**
  * Class applied to the `next` navigation button.
  * @option
   * @type {string}
  * @default 'orbit-next'
  */
  nextClass: 'orbit-next',

  /**
  * Class applied to the `previous` navigation button.
  * @option
   * @type {string}
  * @default 'orbit-previous'
  */
  prevClass: 'orbit-previous',

  /**
  * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
  * @option
   * @type {boolean}
  * @default true
  */
  useMUI: true
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.plugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.plugin.js ***!
  \***************************************************************/
/*! exports provided: Plugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plugin", function() { return Plugin; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


 // Abstract class for providing lifecycle hooks. Expect plugins to define AT LEAST
// {function} _setup (replaces previous constructor),
// {function} _destroy (replaces previous destroy)

var Plugin =
/*#__PURE__*/
function () {
  function Plugin(element, options) {
    _classCallCheck(this, Plugin);

    this._setup(element, options);

    var pluginName = getPluginName(this);
    this.uuid = Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["GetYoDigits"])(6, pluginName);

    if (!this.$element.attr("data-".concat(pluginName))) {
      this.$element.attr("data-".concat(pluginName), this.uuid);
    }

    if (!this.$element.data('zfPlugin')) {
      this.$element.data('zfPlugin', this);
    }
    /**
     * Fires when the plugin has initialized.
     * @event Plugin#init
     */


    this.$element.trigger("init.zf.".concat(pluginName));
  }

  _createClass(Plugin, [{
    key: "destroy",
    value: function destroy() {
      this._destroy();

      var pluginName = getPluginName(this);
      this.$element.removeAttr("data-".concat(pluginName)).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger("destroyed.zf.".concat(pluginName));

      for (var prop in this) {
        this[prop] = null; //clean up script to prep for garbage collection.
      }
    }
  }]);

  return Plugin;
}(); // Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580


function hyphenate(str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

function getPluginName(obj) {
  if (typeof obj.constructor.name !== 'undefined') {
    return hyphenate(obj.constructor.name);
  } else {
    return hyphenate(obj.className);
  }
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.positionable.js":
/*!*********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.positionable.js ***!
  \*********************************************************************/
/*! exports provided: Positionable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Positionable", function() { return Positionable; });
/* harmony import */ var _foundation_util_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundation.util.box */ "./node_modules/foundation-sites/js/foundation.util.box.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




var POSITIONS = ['left', 'right', 'top', 'bottom'];
var VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];
var HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];
var ALIGNMENTS = {
  'left': VERTICAL_ALIGNMENTS,
  'right': VERTICAL_ALIGNMENTS,
  'top': HORIZONTAL_ALIGNMENTS,
  'bottom': HORIZONTAL_ALIGNMENTS
};

function nextItem(item, array) {
  var currentIdx = array.indexOf(item);

  if (currentIdx === array.length - 1) {
    return array[0];
  } else {
    return array[currentIdx + 1];
  }
}

var Positionable =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Positionable, _Plugin);

  function Positionable() {
    _classCallCheck(this, Positionable);

    return _possibleConstructorReturn(this, _getPrototypeOf(Positionable).apply(this, arguments));
  }

  _createClass(Positionable, [{
    key: "_init",

    /**
     * Abstract class encapsulating the tether-like explicit positioning logic
     * including repositioning based on overlap.
     * Expects classes to define defaults for vOffset, hOffset, position,
     * alignment, allowOverlap, and allowBottomOverlap. They can do this by
     * extending the defaults, or (for now recommended due to the way docs are
     * generated) by explicitly declaring them.
     *
     **/
    value: function _init() {
      this.triedPositions = {};
      this.position = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;
      this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;
    }
  }, {
    key: "_getDefaultPosition",
    value: function _getDefaultPosition() {
      return 'bottom';
    }
  }, {
    key: "_getDefaultAlignment",
    value: function _getDefaultAlignment() {
      switch (this.position) {
        case 'bottom':
        case 'top':
          return Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["rtl"])() ? 'right' : 'left';

        case 'left':
        case 'right':
          return 'bottom';
      }
    }
    /**
     * Adjusts the positionable possible positions by iterating through alignments
     * and positions.
     * @function
     * @private
     */

  }, {
    key: "_reposition",
    value: function _reposition() {
      if (this._alignmentsExhausted(this.position)) {
        this.position = nextItem(this.position, POSITIONS);
        this.alignment = ALIGNMENTS[this.position][0];
      } else {
        this._realign();
      }
    }
    /**
     * Adjusts the dropdown pane possible positions by iterating through alignments
     * on the current position.
     * @function
     * @private
     */

  }, {
    key: "_realign",
    value: function _realign() {
      this._addTriedPosition(this.position, this.alignment);

      this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position]);
    }
  }, {
    key: "_addTriedPosition",
    value: function _addTriedPosition(position, alignment) {
      this.triedPositions[position] = this.triedPositions[position] || [];
      this.triedPositions[position].push(alignment);
    }
  }, {
    key: "_positionsExhausted",
    value: function _positionsExhausted() {
      var isExhausted = true;

      for (var i = 0; i < POSITIONS.length; i++) {
        isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);
      }

      return isExhausted;
    }
  }, {
    key: "_alignmentsExhausted",
    value: function _alignmentsExhausted(position) {
      return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;
    } // When we're trying to center, we don't want to apply offset that's going to
    // take us just off center, so wrap around to return 0 for the appropriate
    // offset in those alignments.  TODO: Figure out if we want to make this
    // configurable behavior... it feels more intuitive, especially for tooltips, but
    // it's possible someone might actually want to start from center and then nudge
    // slightly off.

  }, {
    key: "_getVOffset",
    value: function _getVOffset() {
      return this.options.vOffset;
    }
  }, {
    key: "_getHOffset",
    value: function _getHOffset() {
      return this.options.hOffset;
    }
  }, {
    key: "_setPosition",
    value: function _setPosition($anchor, $element, $parent) {
      if ($anchor.attr('aria-expanded') === 'false') {
        return false;
      }

      var $eleDims = _foundation_util_box__WEBPACK_IMPORTED_MODULE_0__["Box"].GetDimensions($element),
          $anchorDims = _foundation_util_box__WEBPACK_IMPORTED_MODULE_0__["Box"].GetDimensions($anchor);
      $element.offset(_foundation_util_box__WEBPACK_IMPORTED_MODULE_0__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));

      if (!this.options.allowOverlap) {
        var overlaps = {};
        var minOverlap = 100000000; // default coordinates to how we start, in case we can't figure out better

        var minCoordinates = {
          position: this.position,
          alignment: this.alignment
        };

        while (!this._positionsExhausted()) {
          var overlap = _foundation_util_box__WEBPACK_IMPORTED_MODULE_0__["Box"].OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);

          if (overlap === 0) {
            return;
          }

          if (overlap < minOverlap) {
            minOverlap = overlap;
            minCoordinates = {
              position: this.position,
              alignment: this.alignment
            };
          }

          this._reposition();

          $element.offset(_foundation_util_box__WEBPACK_IMPORTED_MODULE_0__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
        } // If we get through the entire loop, there was no non-overlapping
        // position available. Pick the version with least overlap.


        this.position = minCoordinates.position;
        this.alignment = minCoordinates.alignment;
        $element.offset(_foundation_util_box__WEBPACK_IMPORTED_MODULE_0__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
      }
    }
  }]);

  return Positionable;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_1__["Plugin"]);

Positionable.defaults = {
  /**
   * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  position: 'auto',

  /**
   * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',

  /**
   * Allow overlap of container/window. If false, dropdown positionable first
   * try to position as defined by data-position and data-alignment, but
   * reposition if it would cause an overflow.
   * @option
   * @type {boolean}
   * @default false
   */
  allowOverlap: false,

  /**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * @option
   * @type {boolean}
   * @default true
   */
  allowBottomOverlap: true,

  /**
   * Number of pixels the positionable should be separated vertically from anchor
   * @option
   * @type {number}
   * @default 0
   */
  vOffset: 0,

  /**
   * Number of pixels the positionable should be separated horizontally from anchor
   * @option
   * @type {number}
   * @default 0
   */
  hOffset: 0
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.responsiveAccordionTabs.js":
/*!********************************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.responsiveAccordionTabs.js ***!
  \********************************************************************************/
/*! exports provided: ResponsiveAccordionTabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResponsiveAccordionTabs", function() { return ResponsiveAccordionTabs; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_accordion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.accordion */ "./node_modules/foundation-sites/js/foundation.accordion.js");
/* harmony import */ var _foundation_tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.tabs */ "./node_modules/foundation-sites/js/foundation.tabs.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






 // The plugin matches the plugin classes with these plugin instances.

var MenuPlugins = {
  tabs: {
    cssClass: 'tabs',
    plugin: _foundation_tabs__WEBPACK_IMPORTED_MODULE_5__["Tabs"]
  },
  accordion: {
    cssClass: 'accordion',
    plugin: _foundation_accordion__WEBPACK_IMPORTED_MODULE_4__["Accordion"]
  }
};
/**
 * ResponsiveAccordionTabs module.
 * @module foundation.responsiveAccordionTabs
 * @requires foundation.util.motion
 * @requires foundation.accordion
 * @requires foundation.tabs
 */

var ResponsiveAccordionTabs =
/*#__PURE__*/
function (_Plugin) {
  _inherits(ResponsiveAccordionTabs, _Plugin);

  function ResponsiveAccordionTabs() {
    _classCallCheck(this, ResponsiveAccordionTabs);

    return _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveAccordionTabs).apply(this, arguments));
  }

  _createClass(ResponsiveAccordionTabs, [{
    key: "_setup",

    /**
     * Creates a new instance of a responsive accordion tabs.
     * @class
     * @name ResponsiveAccordionTabs
     * @fires ResponsiveAccordionTabs#init
     * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element);
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, this.$element.data(), options);
      this.rules = this.$element.data('responsive-accordion-tabs');
      this.currentMq = null;
      this.currentPlugin = null;
      this.className = 'ResponsiveAccordionTabs'; // ie9 back compat

      if (!this.$element.attr('id')) {
        this.$element.attr('id', Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["GetYoDigits"])(6, 'responsiveaccordiontabs'));
      }

      ;

      this._init();

      this._events();
    }
    /**
     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"]._init(); // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules


      if (typeof this.rules === 'string') {
        var rulesTree = {}; // Parse rules from "classes" pulled from data attribute

        var rules = this.rules.split(' '); // Iterate through every rule found

        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i].split('-');
          var ruleSize = rule.length > 1 ? rule[0] : 'small';
          var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      this._getAllOptions();

      if (!jquery__WEBPACK_IMPORTED_MODULE_0___default.a.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      }
    }
  }, {
    key: "_getAllOptions",
    value: function _getAllOptions() {
      //get all defaults and options
      var _this = this;

      _this.allOptions = {};

      for (var key in MenuPlugins) {
        if (MenuPlugins.hasOwnProperty(key)) {
          var obj = MenuPlugins[key];

          try {
            var dummyPlugin = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<ul></ul>');
            var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);

            for (var keyKey in tmpPlugin.options) {
              if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {
                var objObj = tmpPlugin.options[keyKey];
                _this.allOptions[keyKey] = objObj;
              }
            }

            tmpPlugin.destroy();
          } catch (e) {}
        }
      }
    }
    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      });
    }
    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */

  }, {
    key: "_checkMediaQueries",
    value: function _checkMediaQueries() {
      var matchedMq,
          _this = this; // Iterate through each rule and find the last matching rule


      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(this.rules, function (key) {
        if (_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].atLeast(key)) {
          matchedMq = key;
        }
      }); // No match? No dice

      if (!matchedMq) return; // Plugin already initialized? We good

      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return; // Remove existing plugin-specific CSS classes

      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      }); // Add the CSS class for the new plugin

      this.$element.addClass(this.rules[matchedMq].cssClass); // Create an instance of the new plugin

      if (this.currentPlugin) {
        //don't know why but on nested elements data zfPlugin get's lost
        if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
        this.currentPlugin.destroy();
      }

      this._handleMarkup(this.rules[matchedMq].cssClass);

      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
      this.storezfData = this.currentPlugin.$element.data('zfPlugin');
    }
  }, {
    key: "_handleMarkup",
    value: function _handleMarkup(toSet) {
      var _this = this,
          fromString = 'accordion';

      var $panels = jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-tabs-content=' + this.$element.attr('id') + ']');
      if ($panels.length) fromString = 'tabs';

      if (fromString === toSet) {
        return;
      }

      ;
      var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';
      var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';
      this.$element.removeAttr('role');
      var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
      var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');

      if (fromString === 'tabs') {
        $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
        $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');
      } else {
        $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');
      }

      ;
      $panels.css({
        display: '',
        visibility: ''
      });
      $liHeads.css({
        display: '',
        visibility: ''
      });

      if (toSet === 'accordion') {
        $panels.each(function (key, value) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({
            height: ''
          });
          jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').detach();
          $liHeads.addClass('accordion-item').attr('data-accordion-item', '');
          $liHeadsA.addClass('accordion-title');
        });
      } else if (toSet === 'tabs') {
        var $tabsContent = jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-tabs-content=' + _this.$element.attr('id') + ']');
        var $placeholder = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#tabs-placeholder-' + _this.$element.attr('id'));

        if ($placeholder.length) {
          $tabsContent = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
          $placeholder.remove();
        } else {
          $tabsContent = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
        }

        ;
        $panels.each(function (key, value) {
          var tempValue = jquery__WEBPACK_IMPORTED_MODULE_0___default()(value).appendTo($tabsContent).addClass(tabsPanel);
          var hash = $liHeadsA.get(key).hash.slice(1);
          var id = jquery__WEBPACK_IMPORTED_MODULE_0___default()(value).attr('id') || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["GetYoDigits"])(6, 'accordion');

          if (hash !== id) {
            if (hash !== '') {
              jquery__WEBPACK_IMPORTED_MODULE_0___default()(value).attr('id', hash);
            } else {
              hash = id;
              jquery__WEBPACK_IMPORTED_MODULE_0___default()(value).attr('id', hash);
              jquery__WEBPACK_IMPORTED_MODULE_0___default()($liHeadsA.get(key)).attr('href', jquery__WEBPACK_IMPORTED_MODULE_0___default()($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
            }

            ;
          }

          ;
          var isActive = jquery__WEBPACK_IMPORTED_MODULE_0___default()($liHeads.get(key)).hasClass('is-active');

          if (isActive) {
            tempValue.addClass('is-active');
          }

          ;
        });
        $liHeads.addClass(tabsTitle);
      }

      ;
    }
    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      if (this.currentPlugin) this.currentPlugin.destroy();
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('.zf.ResponsiveAccordionTabs');
    }
  }]);

  return ResponsiveAccordionTabs;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_3__["Plugin"]);

ResponsiveAccordionTabs.defaults = {};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.responsiveMenu.js":
/*!***********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.responsiveMenu.js ***!
  \***********************************************************************/
/*! exports provided: ResponsiveMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResponsiveMenu", function() { return ResponsiveMenu; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_dropdownMenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.dropdownMenu */ "./node_modules/foundation-sites/js/foundation.dropdownMenu.js");
/* harmony import */ var _foundation_drilldown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.drilldown */ "./node_modules/foundation-sites/js/foundation.drilldown.js");
/* harmony import */ var _foundation_accordionMenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./foundation.accordionMenu */ "./node_modules/foundation-sites/js/foundation.accordionMenu.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }








var MenuPlugins = {
  dropdown: {
    cssClass: 'dropdown',
    plugin: _foundation_dropdownMenu__WEBPACK_IMPORTED_MODULE_4__["DropdownMenu"]
  },
  drilldown: {
    cssClass: 'drilldown',
    plugin: _foundation_drilldown__WEBPACK_IMPORTED_MODULE_5__["Drilldown"]
  },
  accordion: {
    cssClass: 'accordion-menu',
    plugin: _foundation_accordionMenu__WEBPACK_IMPORTED_MODULE_6__["AccordionMenu"]
  }
}; // import "foundation.util.triggers.js";

/**
 * ResponsiveMenu module.
 * @module foundation.responsiveMenu
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 */

var ResponsiveMenu =
/*#__PURE__*/
function (_Plugin) {
  _inherits(ResponsiveMenu, _Plugin);

  function ResponsiveMenu() {
    _classCallCheck(this, ResponsiveMenu);

    return _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveMenu).apply(this, arguments));
  }

  _createClass(ResponsiveMenu, [{
    key: "_setup",

    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @name ResponsiveMenu
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;
      this.className = 'ResponsiveMenu'; // ie9 back compat

      this._init();

      this._events();
    }
    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"]._init(); // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules


      if (typeof this.rules === 'string') {
        var rulesTree = {}; // Parse rules from "classes" pulled from data attribute

        var rules = this.rules.split(' '); // Iterate through every rule found

        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i].split('-');
          var ruleSize = rule.length > 1 ? rule[0] : 'small';
          var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      if (!jquery__WEBPACK_IMPORTED_MODULE_0___default.a.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      } // Add data-mutate since children may need it.


      this.$element.attr('data-mutate', this.$element.attr('data-mutate') || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_2__["GetYoDigits"])(6, 'responsive-menu'));
    }
    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      }); // $(window).on('resize.zf.ResponsiveMenu', function() {
      //   _this._checkMediaQueries();
      // });
    }
    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */

  }, {
    key: "_checkMediaQueries",
    value: function _checkMediaQueries() {
      var matchedMq,
          _this = this; // Iterate through each rule and find the last matching rule


      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(this.rules, function (key) {
        if (_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].atLeast(key)) {
          matchedMq = key;
        }
      }); // No match? No dice

      if (!matchedMq) return; // Plugin already initialized? We good

      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return; // Remove existing plugin-specific CSS classes

      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      }); // Add the CSS class for the new plugin

      this.$element.addClass(this.rules[matchedMq].cssClass); // Create an instance of the new plugin

      if (this.currentPlugin) this.currentPlugin.destroy();
      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
    }
    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.currentPlugin.destroy();
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('.zf.ResponsiveMenu');
    }
  }]);

  return ResponsiveMenu;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_3__["Plugin"]);

ResponsiveMenu.defaults = {};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.responsiveToggle.js":
/*!*************************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.responsiveToggle.js ***!
  \*************************************************************************/
/*! exports provided: ResponsiveToggle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResponsiveToggle", function() { return ResponsiveToggle; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.motion */ "./node_modules/foundation-sites/js/foundation.util.motion.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * ResponsiveToggle module.
 * @module foundation.responsiveToggle
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.motion
 */

var ResponsiveToggle =
/*#__PURE__*/
function (_Plugin) {
  _inherits(ResponsiveToggle, _Plugin);

  function ResponsiveToggle() {
    _classCallCheck(this, ResponsiveToggle);

    return _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveToggle).apply(this, arguments));
  }

  _createClass(ResponsiveToggle, [{
    key: "_setup",

    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @name ResponsiveToggle
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element);
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);
      this.className = 'ResponsiveToggle'; // ie9 back compat

      this._init();

      this._events();
    }
    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"]._init();

      var targetID = this.$element.data('responsive-toggle');

      if (!targetID) {
        console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
      }

      this.$targetMenu = jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(targetID));
      this.$toggler = this.$element.find('[data-toggle]').filter(function () {
        var target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('toggle');
        return target === targetID || target === "";
      });
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, this.options, this.$targetMenu.data()); // If they were set, parse the animation classes

      if (this.options.animate) {
        var input = this.options.animate.split(' ');
        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      }

      this._update();
    }
    /**
     * Adds necessary event handlers for the tab bar to work.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      this._updateMqHandler = this._update.bind(this);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('changed.zf.mediaquery', this._updateMqHandler);
      this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
    }
    /**
     * Checks the current media query to determine if the tab bar should be visible or hidden.
     * @function
     * @private
     */

  }, {
    key: "_update",
    value: function _update() {
      // Mobile
      if (!_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].atLeast(this.options.hideFor)) {
        this.$element.show();
        this.$targetMenu.hide();
      } // Desktop
      else {
          this.$element.hide();
          this.$targetMenu.show();
        }
    }
    /**
     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
     * @function
     * @fires ResponsiveToggle#toggled
     */

  }, {
    key: "toggleMenu",
    value: function toggleMenu() {
      var _this2 = this;

      if (!_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__["MediaQuery"].atLeast(this.options.hideFor)) {
        /**
         * Fires when the element attached to the tab bar toggles.
         * @event ResponsiveToggle#toggled
         */
        if (this.options.animate) {
          if (this.$targetMenu.is(':hidden')) {
            _foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__["Motion"].animateIn(this.$targetMenu, this.animationIn, function () {
              _this2.$element.trigger('toggled.zf.responsiveToggle');

              _this2.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');
            });
          } else {
            _foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__["Motion"].animateOut(this.$targetMenu, this.animationOut, function () {
              _this2.$element.trigger('toggled.zf.responsiveToggle');
            });
          }
        } else {
          this.$targetMenu.toggle(0);
          this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');
          this.$element.trigger('toggled.zf.responsiveToggle');
        }
      }
    }
  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.off('.zf.responsiveToggle');
      this.$toggler.off('.zf.responsiveToggle');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('changed.zf.mediaquery', this._updateMqHandler);
    }
  }]);

  return ResponsiveToggle;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_3__["Plugin"]);

ResponsiveToggle.defaults = {
  /**
   * The breakpoint after which the menu is always shown, and the tab bar is hidden.
   * @option
   * @type {string}
   * @default 'medium'
   */
  hideFor: 'medium',

  /**
   * To decide if the toggle should be animated or not.
   * @option
   * @type {boolean}
   * @default false
   */
  animate: false
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.reveal.js":
/*!***************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.reveal.js ***!
  \***************************************************************/
/*! exports provided: Reveal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reveal", function() { return Reveal; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_util_motion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.motion */ "./node_modules/foundation-sites/js/foundation.util.motion.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }







/**
 * Reveal module.
 * @module foundation.reveal
 * @requires foundation.util.keyboard
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.motion if using animations
 */

var Reveal =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Reveal, _Plugin);

  function Reveal() {
    _classCallCheck(this, Reveal);

    return _possibleConstructorReturn(this, _getPrototypeOf(Reveal).apply(this, arguments));
  }

  _createClass(Reveal, [{
    key: "_setup",

    /**
     * Creates a new instance of Reveal.
     * @class
     * @name Reveal
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Reveal.defaults, this.$element.data(), options);
      this.className = 'Reveal'; // ie9 back compat

      this._init(); // Triggers init is idempotent, just need to make sure it is initialized


      _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_5__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);
      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('Reveal', {
        'ESCAPE': 'close'
      });
    }
    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"]._init();

      this.id = this.$element.attr('id');
      this.isActive = false;
      this.cached = {
        mq: _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].current
      };
      this.isMobile = mobileSniff();
      this.$anchor = jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-open=\"".concat(this.id, "\"]")).length ? jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-open=\"".concat(this.id, "\"]")) : jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-toggle=\"".concat(this.id, "\"]"));
      this.$anchor.attr({
        'aria-controls': this.id,
        'aria-haspopup': true,
        'tabindex': 0
      });

      if (this.options.fullScreen || this.$element.hasClass('full')) {
        this.options.fullScreen = true;
        this.options.overlay = false;
      }

      if (this.options.overlay && !this.$overlay) {
        this.$overlay = this._makeOverlay(this.id);
      }

      this.$element.attr({
        'role': 'dialog',
        'aria-hidden': true,
        'data-yeti-box': this.id,
        'data-resize': this.id
      });

      if (this.$overlay) {
        this.$element.detach().appendTo(this.$overlay);
      } else {
        this.$element.detach().appendTo(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.options.appendTo));
        this.$element.addClass('without-overlay');
      }

      this._events();

      if (this.options.deepLink && window.location.hash === "#".concat(this.id)) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).one('load.zf.reveal', this.open.bind(this));
      }
    }
    /**
     * Creates an overlay div to display behind the modal.
     * @private
     */

  }, {
    key: "_makeOverlay",
    value: function _makeOverlay() {
      var additionalOverlayClasses = '';

      if (this.options.additionalOverlayClasses) {
        additionalOverlayClasses = ' ' + this.options.additionalOverlayClasses;
      }

      return jquery__WEBPACK_IMPORTED_MODULE_0___default()('<div></div>').addClass('reveal-overlay' + additionalOverlayClasses).appendTo(this.options.appendTo);
    }
    /**
     * Updates position of modal
     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
     * @private
     */

  }, {
    key: "_updatePosition",
    value: function _updatePosition() {
      var width = this.$element.outerWidth();
      var outerWidth = jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).width();
      var height = this.$element.outerHeight();
      var outerHeight = jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).height();
      var left, top;

      if (this.options.hOffset === 'auto') {
        left = parseInt((outerWidth - width) / 2, 10);
      } else {
        left = parseInt(this.options.hOffset, 10);
      }

      if (this.options.vOffset === 'auto') {
        if (height > outerHeight) {
          top = parseInt(Math.min(100, outerHeight / 10), 10);
        } else {
          top = parseInt((outerHeight - height) / 4, 10);
        }
      } else {
        top = parseInt(this.options.vOffset, 10);
      }

      this.$element.css({
        top: top + 'px'
      }); // only worry about left if we don't have an overlay or we havea  horizontal offset,
      // otherwise we're perfectly in the middle

      if (!this.$overlay || this.options.hOffset !== 'auto') {
        this.$element.css({
          left: left + 'px'
        });
        this.$element.css({
          margin: '0px'
        });
      }
    }
    /**
     * Adds event handlers for the modal.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this2 = this;

      var _this = this;

      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': function closeZfTrigger(event, $element) {
          if (event.target === _this.$element[0] || jquery__WEBPACK_IMPORTED_MODULE_0___default()(event.target).parents('[data-closable]')[0] === $element) {
            // only close reveal when it's explicitly called
            return _this2.close.apply(_this2);
          }
        },
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': function resizemeZfTrigger() {
          _this._updatePosition();
        }
      });

      if (this.options.closeOnClick && this.options.overlay) {
        this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || jquery__WEBPACK_IMPORTED_MODULE_0___default.a.contains(_this.$element[0], e.target) || !jquery__WEBPACK_IMPORTED_MODULE_0___default.a.contains(document, e.target)) {
            return;
          }

          _this.close();
        });
      }

      if (this.options.deepLink) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on("popstate.zf.reveal:".concat(this.id), this._handleState.bind(this));
      }
    }
    /**
     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
     * @private
     */

  }, {
    key: "_handleState",
    value: function _handleState(e) {
      if (window.location.hash === '#' + this.id && !this.isActive) {
        this.open();
      } else {
        this.close();
      }
    }
    /**
     * Opens the modal controlled by `this.$anchor`, and closes all others by default.
     * @function
     * @fires Reveal#closeme
     * @fires Reveal#open
     */

  }, {
    key: "open",
    value: function open() {
      var _this3 = this;

      // either update or replace browser history
      if (this.options.deepLink) {
        var hash = "#".concat(this.id);

        if (window.history.pushState) {
          if (this.options.updateHistory) {
            window.history.pushState({}, '', hash);
          } else {
            window.history.replaceState({}, '', hash);
          }
        } else {
          window.location.hash = hash;
        }
      }

      this.isActive = true; // Make elements invisible, but remove display: none so we can get size and positioning

      this.$element.css({
        'visibility': 'hidden'
      }).show().scrollTop(0);

      if (this.options.overlay) {
        this.$overlay.css({
          'visibility': 'hidden'
        }).show();
      }

      this._updatePosition();

      this.$element.hide().css({
        'visibility': ''
      });

      if (this.$overlay) {
        this.$overlay.css({
          'visibility': ''
        }).hide();

        if (this.$element.hasClass('fast')) {
          this.$overlay.addClass('fast');
        } else if (this.$element.hasClass('slow')) {
          this.$overlay.addClass('slow');
        }
      }

      if (!this.options.multipleOpened) {
        /**
         * Fires immediately before the modal opens.
         * Closes any other modals that are currently open
         * @event Reveal#closeme
         */
        this.$element.trigger('closeme.zf.reveal', this.id);
      }

      var _this = this;

      function addRevealOpenClasses() {
        if (_this.isMobile) {
          if (!_this.originalScrollPos) {
            _this.originalScrollPos = window.pageYOffset;
          }

          jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body').addClass('is-reveal-open');
        } else {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').addClass('is-reveal-open');
        }
      } // Motion UI method of reveal


      if (this.options.animationIn) {
        var afterAnimation = function afterAnimation() {
          _this.$element.attr({
            'aria-hidden': false,
            'tabindex': -1
          }).focus();

          addRevealOpenClasses();
          _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].trapFocus(_this.$element);
        };

        if (this.options.overlay) {
          _foundation_util_motion__WEBPACK_IMPORTED_MODULE_3__["Motion"].animateIn(this.$overlay, 'fade-in');
        }

        _foundation_util_motion__WEBPACK_IMPORTED_MODULE_3__["Motion"].animateIn(this.$element, this.options.animationIn, function () {
          if (_this3.$element) {
            // protect against object having been removed
            _this3.focusableElements = _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].findFocusable(_this3.$element);
            afterAnimation();
          }
        });
      } // jQuery method of reveal
      else {
          if (this.options.overlay) {
            this.$overlay.show(0);
          }

          this.$element.show(this.options.showDelay);
        } // handle accessibility


      this.$element.attr({
        'aria-hidden': false,
        'tabindex': -1
      }).focus();
      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].trapFocus(this.$element);
      addRevealOpenClasses();

      this._extraHandlers();
      /**
       * Fires when the modal has successfully opened.
       * @event Reveal#open
       */


      this.$element.trigger('open.zf.reveal');
    }
    /**
     * Adds extra event handlers for the body and window if necessary.
     * @private
     */

  }, {
    key: "_extraHandlers",
    value: function _extraHandlers() {
      var _this = this;

      if (!this.$element) {
        return;
      } // If we're in the middle of cleanup, don't freak out


      this.focusableElements = _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].findFocusable(this.$element);

      if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || jquery__WEBPACK_IMPORTED_MODULE_0___default.a.contains(_this.$element[0], e.target) || !jquery__WEBPACK_IMPORTED_MODULE_0___default.a.contains(document, e.target)) {
            return;
          }

          _this.close();
        });
      }

      if (this.options.closeOnEsc) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('keydown.zf.reveal', function (e) {
          _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'Reveal', {
            close: function close() {
              if (_this.options.closeOnEsc) {
                _this.close();
              }
            }
          });
        });
      }
    }
    /**
     * Closes the modal.
     * @function
     * @fires Reveal#closed
     */

  }, {
    key: "close",
    value: function close() {
      if (!this.isActive || !this.$element.is(':visible')) {
        return false;
      }

      var _this = this; // Motion UI method of hiding


      if (this.options.animationOut) {
        if (this.options.overlay) {
          _foundation_util_motion__WEBPACK_IMPORTED_MODULE_3__["Motion"].animateOut(this.$overlay, 'fade-out');
        }

        _foundation_util_motion__WEBPACK_IMPORTED_MODULE_3__["Motion"].animateOut(this.$element, this.options.animationOut, finishUp);
      } // jQuery method of hiding
      else {
          this.$element.hide(this.options.hideDelay);

          if (this.options.overlay) {
            this.$overlay.hide(0, finishUp);
          } else {
            finishUp();
          }
        } // Conditionals to remove extra event listeners added on open


      if (this.options.closeOnEsc) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('keydown.zf.reveal');
      }

      if (!this.options.overlay && this.options.closeOnClick) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').off('click.zf.reveal');
      }

      this.$element.off('keydown.zf.reveal');

      function finishUp() {
        if (_this.isMobile) {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()('.reveal:visible').length === 0) {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body').removeClass('is-reveal-open');
          }

          if (_this.originalScrollPos) {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').scrollTop(_this.originalScrollPos);
            _this.originalScrollPos = null;
          }
        } else {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()('.reveal:visible').length === 0) {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()('body').removeClass('is-reveal-open');
          }
        }

        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].releaseFocus(_this.$element);

        _this.$element.attr('aria-hidden', true);
        /**
        * Fires when the modal is done closing.
        * @event Reveal#closed
        */


        _this.$element.trigger('closed.zf.reveal');
      }
      /**
      * Resets the modal content
      * This prevents a running video to keep going in the background
      */


      if (this.options.resetOnClose) {
        this.$element.html(this.$element.html());
      }

      this.isActive = false;

      if (_this.options.deepLink) {
        if (window.history.replaceState) {
          window.history.replaceState('', document.title, window.location.href.replace("#".concat(this.id), ''));
        } else {
          window.location.hash = '';
        }
      }

      this.$anchor.focus();
    }
    /**
     * Toggles the open/closed state of a modal.
     * @function
     */

  }, {
    key: "toggle",
    value: function toggle() {
      if (this.isActive) {
        this.close();
      } else {
        this.open();
      }
    }
  }, {
    key: "_destroy",

    /**
     * Destroys an instance of a modal.
     * @function
     */
    value: function _destroy() {
      if (this.options.overlay) {
        this.$element.appendTo(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()

        this.$overlay.hide().off().remove();
      }

      this.$element.hide().off();
      this.$anchor.off('.zf');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off(".zf.reveal:".concat(this.id));
    }
  }]);

  return Reveal;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_4__["Plugin"]);

Reveal.defaults = {
  /**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @type {string}
   * @default ''
   */
  animationIn: '',

  /**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @type {string}
   * @default ''
   */
  animationOut: '',

  /**
   * Time, in ms, to delay the opening of a modal after a click if no animation used.
   * @option
   * @type {number}
   * @default 0
   */
  showDelay: 0,

  /**
   * Time, in ms, to delay the closing of a modal after a click if no animation used.
   * @option
   * @type {number}
   * @default 0
   */
  hideDelay: 0,

  /**
   * Allows a click on the body/overlay to close the modal.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClick: true,

  /**
   * Allows the modal to close if the user presses the `ESCAPE` key.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnEsc: true,

  /**
   * If true, allows multiple modals to be displayed at once.
   * @option
   * @type {boolean}
   * @default false
   */
  multipleOpened: false,

  /**
   * Distance, in pixels, the modal should push down from the top of the screen.
   * @option
   * @type {number|string}
   * @default auto
   */
  vOffset: 'auto',

  /**
   * Distance, in pixels, the modal should push in from the side of the screen.
   * @option
   * @type {number|string}
   * @default auto
   */
  hOffset: 'auto',

  /**
   * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
   * @option
   * @type {boolean}
   * @default false
   */
  fullScreen: false,

  /**
   * Percentage of screen height the modal should push up from the bottom of the view.
   * @option
   * @type {number}
   * @default 10
   */
  btmOffsetPct: 10,

  /**
   * Allows the modal to generate an overlay div, which will cover the view when modal opens.
   * @option
   * @type {boolean}
   * @default true
   */
  overlay: true,

  /**
   * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
   * @option
   * @type {boolean}
   * @default false
   */
  resetOnClose: false,

  /**
   * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
   * @option
   * @type {boolean}
   * @default false
   */
  deepLink: false,

  /**
   * Update the browser history with the open modal
   * @option
   * @default false
   */
  updateHistory: false,

  /**
  * Allows the modal to append to custom div.
  * @option
  * @type {string}
  * @default "body"
  */
  appendTo: "body",

  /**
   * Allows adding additional class names to the reveal overlay.
   * @option
   * @type {string}
   * @default ''
   */
  additionalOverlayClasses: ''
};

function iPhoneSniff() {
  return /iP(ad|hone|od).*OS/.test(window.navigator.userAgent);
}

function androidSniff() {
  return /Android/.test(window.navigator.userAgent);
}

function mobileSniff() {
  return iPhoneSniff() || androidSniff();
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.slider.js":
/*!***************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.slider.js ***!
  \***************************************************************/
/*! exports provided: Slider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slider", function() { return Slider; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.motion */ "./node_modules/foundation-sites/js/foundation.util.motion.js");
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_touch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./foundation.util.touch */ "./node_modules/foundation-sites/js/foundation.util.touch.js");
/* harmony import */ var _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }








/**
 * Slider module.
 * @module foundation.slider
 * @requires foundation.util.motion
 * @requires foundation.util.triggers
 * @requires foundation.util.keyboard
 * @requires foundation.util.touch
 */

var Slider =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Slider, _Plugin);

  function Slider() {
    _classCallCheck(this, Slider);

    return _possibleConstructorReturn(this, _getPrototypeOf(Slider).apply(this, arguments));
  }

  _createClass(Slider, [{
    key: "_setup",

    /**
     * Creates a new instance of a slider control.
     * @class
     * @name Slider
     * @param {jQuery} element - jQuery object to make into a slider control.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Slider.defaults, this.$element.data(), options);
      this.className = 'Slider'; // ie9 back compat
      // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.

      _foundation_util_touch__WEBPACK_IMPORTED_MODULE_5__["Touch"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);
      _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_6__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('Slider', {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease',
          'SHIFT_ARROW_RIGHT': 'increase_fast',
          'SHIFT_ARROW_UP': 'increase_fast',
          'SHIFT_ARROW_DOWN': 'decrease_fast',
          'SHIFT_ARROW_LEFT': 'decrease_fast',
          'HOME': 'min',
          'END': 'max'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease',
          'SHIFT_ARROW_LEFT': 'increase_fast',
          'SHIFT_ARROW_RIGHT': 'decrease_fast'
        }
      });
    }
    /**
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      this.inputs = this.$element.find('input');
      this.handles = this.$element.find('[data-slider-handle]');
      this.$handle = this.handles.eq(0);
      this.$input = this.inputs.length ? this.inputs.eq(0) : jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(this.$handle.attr('aria-controls')));
      this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

      var isDbl = false,
          _this = this;

      if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
        this.options.disabled = true;
        this.$element.addClass(this.options.disabledClass);
      }

      if (!this.inputs.length) {
        this.inputs = jquery__WEBPACK_IMPORTED_MODULE_0___default()().add(this.$input);
        this.options.binding = true;
      }

      this._setInitAttr(0);

      if (this.handles[1]) {
        this.options.doubleSided = true;
        this.$handle2 = this.handles.eq(1);
        this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(this.$handle2.attr('aria-controls')));

        if (!this.inputs[1]) {
          this.inputs = this.inputs.add(this.$input2);
        }

        isDbl = true; // this.$handle.triggerHandler('click.zf.slider');

        this._setInitAttr(1);
      } // Set handle positions


      this.setHandles();

      this._events();
    }
  }, {
    key: "setHandles",
    value: function setHandles() {
      var _this2 = this;

      if (this.handles[1]) {
        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {
          _this2._setHandlePos(_this2.$handle2, _this2.inputs.eq(1).val(), true);
        });
      } else {
        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);
      }
    }
  }, {
    key: "_reflow",
    value: function _reflow() {
      this.setHandles();
    }
    /**
    * @function
    * @private
    * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)
    */

  }, {
    key: "_pctOfBar",
    value: function _pctOfBar(value) {
      var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);

      switch (this.options.positionValueFunction) {
        case "pow":
          pctOfBar = this._logTransform(pctOfBar);
          break;

        case "log":
          pctOfBar = this._powTransform(pctOfBar);
          break;
      }

      return pctOfBar.toFixed(2);
    }
    /**
    * @function
    * @private
    * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value
    */

  }, {
    key: "_value",
    value: function _value(pctOfBar) {
      switch (this.options.positionValueFunction) {
        case "pow":
          pctOfBar = this._powTransform(pctOfBar);
          break;

        case "log":
          pctOfBar = this._logTransform(pctOfBar);
          break;
      }

      var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;
      return value;
    }
    /**
    * @function
    * @private
    * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function
    */

  }, {
    key: "_logTransform",
    value: function _logTransform(value) {
      return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);
    }
    /**
    * @function
    * @private
    * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function
    */

  }, {
    key: "_powTransform",
    value: function _powTransform(value) {
      return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);
    }
    /**
     * Sets the position of the selected handle and fill bar.
     * @function
     * @private
     * @param {jQuery} $hndl - the selected handle to move.
     * @param {Number} location - floating point between the start and end values of the slider bar.
     * @param {Function} cb - callback function to fire on completion.
     * @fires Slider#moved
     * @fires Slider#changed
     */

  }, {
    key: "_setHandlePos",
    value: function _setHandlePos($hndl, location, noInvert, cb) {
      // don't move if the slider has been disabled since its initialization
      if (this.$element.hasClass(this.options.disabledClass)) {
        return;
      } //might need to alter that slightly for bars that will have odd number selections.


      location = parseFloat(location); //on input change events, convert string to number...grumble.
      // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max

      if (location < this.options.start) {
        location = this.options.start;
      } else if (location > this.options.end) {
        location = this.options.end;
      }

      var isDbl = this.options.doubleSided; //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
      //for click and drag events, it's weird due to the scale(-1, 1) css property

      if (this.options.vertical && !noInvert) {
        location = this.options.end - location;
      }

      if (isDbl) {
        //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
        if (this.handles.index($hndl) === 0) {
          var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
          location = location >= h2Val ? h2Val - this.options.step : location;
        } else {
          var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
          location = location <= h1Val ? h1Val + this.options.step : location;
        }
      }

      var _this = this,
          vert = this.options.vertical,
          hOrW = vert ? 'height' : 'width',
          lOrT = vert ? 'top' : 'left',
          handleDim = $hndl[0].getBoundingClientRect()[hOrW],
          elemDim = this.$element[0].getBoundingClientRect()[hOrW],
          //percentage of bar min/max value based on click or drag point
      pctOfBar = this._pctOfBar(location),
          //number of actual pixels to shift the handle, based on the percentage obtained above
      pxToMove = (elemDim - handleDim) * pctOfBar,
          //percentage of bar to shift the handle
      movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal); //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value


      location = parseFloat(location.toFixed(this.options.decimal)); // declare empty object for css adjustments, only used with 2 handled-sliders

      var css = {};

      this._setValues($hndl, location); // TODO update to calculate based on values set to respective inputs??


      if (isDbl) {
        var isLeftHndl = this.handles.index($hndl) === 0,
            //empty variable, will be used for min-height/width for fill bar
        dim,
            //percentage w/h of the handle compared to the slider bar
        handlePct = ~~(percent(handleDim, elemDim) * 100); //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar

        if (isLeftHndl) {
          //left or top percentage value to apply to the fill bar.
          css[lOrT] = "".concat(movement, "%"); //calculate the new min-height/width for the fill bar.

          dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct; //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
          //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.

          if (cb && typeof cb === 'function') {
            cb();
          } //this is only needed for the initialization of 2 handled sliders

        } else {
          //just caching the value of the left/bottom handle's left/top property
          var handlePos = parseFloat(this.$handle[0].style[lOrT]); //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
          //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself

          dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
        } // assign the min-height/width to our css object


        css["min-".concat(hOrW)] = "".concat(dim, "%");
      }

      this.$element.one('finished.zf.animate', function () {
        /**
         * Fires when the handle is done moving.
         * @event Slider#moved
         */
        _this.$element.trigger('moved.zf.slider', [$hndl]);
      }); //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.

      var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;
      Object(_foundation_util_motion__WEBPACK_IMPORTED_MODULE_2__["Move"])(moveTime, $hndl, function () {
        // adjusting the left/top property of the handle, based on the percentage calculated above
        // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,
        // fall back to next best guess.
        if (isNaN(movement)) {
          $hndl.css(lOrT, "".concat(pctOfBar * 100, "%"));
        } else {
          $hndl.css(lOrT, "".concat(movement, "%"));
        }

        if (!_this.options.doubleSided) {
          //if single-handled, a simple method to expand the fill bar
          _this.$fill.css(hOrW, "".concat(pctOfBar * 100, "%"));
        } else {
          //otherwise, use the css object we created above
          _this.$fill.css(css);
        }
      });
      /**
       * Fires when the value has not been change for a given time.
       * @event Slider#changed
       */

      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function () {
        _this.$element.trigger('changed.zf.slider', [$hndl]);
      }, _this.options.changedDelay);
    }
    /**
     * Sets the initial attribute for the slider element.
     * @function
     * @private
     * @param {Number} idx - index of the current handle/input to use.
     */

  }, {
    key: "_setInitAttr",
    value: function _setInitAttr(idx) {
      var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;
      var id = this.inputs.eq(idx).attr('id') || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["GetYoDigits"])(6, 'slider');
      this.inputs.eq(idx).attr({
        'id': id,
        'max': this.options.end,
        'min': this.options.start,
        'step': this.options.step
      });
      this.inputs.eq(idx).val(initVal);
      this.handles.eq(idx).attr({
        'role': 'slider',
        'aria-controls': id,
        'aria-valuemax': this.options.end,
        'aria-valuemin': this.options.start,
        'aria-valuenow': initVal,
        'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
        'tabindex': 0
      });
    }
    /**
     * Sets the input and `aria-valuenow` values for the slider element.
     * @function
     * @private
     * @param {jQuery} $handle - the currently selected handle.
     * @param {Number} val - floating point of the new value.
     */

  }, {
    key: "_setValues",
    value: function _setValues($handle, val) {
      var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
      this.inputs.eq(idx).val(val);
      $handle.attr('aria-valuenow', val);
    }
    /**
     * Handles events on the slider element.
     * Calculates the new location of the current handle.
     * If there are two handles and the bar was clicked, it determines which handle to move.
     * @function
     * @private
     * @param {Object} e - the `event` object passed from the listener.
     * @param {jQuery} $handle - the current handle to calculate for, if selected.
     * @param {Number} val - floating point number for the new value of the slider.
     * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
     */

  }, {
    key: "_handleEvent",
    value: function _handleEvent(e, $handle, val) {
      var value, hasVal;

      if (!val) {
        //click or drag events
        e.preventDefault();

        var _this = this,
            vertical = this.options.vertical,
            param = vertical ? 'height' : 'width',
            direction = vertical ? 'top' : 'left',
            eventOffset = vertical ? e.pageY : e.pageX,
            halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
            barDim = this.$element[0].getBoundingClientRect()[param],
            windowScroll = vertical ? jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).scrollTop() : jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).scrollLeft();

        var elemOffset = this.$element.offset()[direction]; // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
        // best way to guess this is simulated is if clientY == pageY

        if (e.clientY === e.pageY) {
          eventOffset = eventOffset + windowScroll;
        }

        var eventFromBar = eventOffset - elemOffset;
        var barXY;

        if (eventFromBar < 0) {
          barXY = 0;
        } else if (eventFromBar > barDim) {
          barXY = barDim;
        } else {
          barXY = eventFromBar;
        }

        var offsetPct = percent(barXY, barDim);
        value = this._value(offsetPct); // turn everything around for RTL, yay math!

        if (Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_3__["rtl"])() && !this.options.vertical) {
          value = this.options.end - value;
        }

        value = _this._adjustValue(null, value); //boolean flag for the setHandlePos fn, specifically for vertical sliders

        hasVal = false;

        if (!$handle) {
          //figure out which handle it is, pass it to the next function.
          var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
              secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
          $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
        }
      } else {
        //change event on input
        value = this._adjustValue(null, val);
        hasVal = true;
      }

      this._setHandlePos($handle, value, hasVal);
    }
    /**
     * Adjustes value for handle in regard to step value. returns adjusted value
     * @function
     * @private
     * @param {jQuery} $handle - the selected handle.
     * @param {Number} value - value to adjust. used if $handle is falsy
     */

  }, {
    key: "_adjustValue",
    value: function _adjustValue($handle, value) {
      var val,
          step = this.options.step,
          div = parseFloat(step / 2),
          left,
          prev_val,
          next_val;

      if (!!$handle) {
        val = parseFloat($handle.attr('aria-valuenow'));
      } else {
        val = value;
      }

      left = val % step;
      prev_val = val - left;
      next_val = prev_val + step;

      if (left === 0) {
        return val;
      }

      val = val >= prev_val + div ? next_val : prev_val;
      return val;
    }
    /**
     * Adds event listeners to the slider elements.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      this._eventsForHandle(this.$handle);

      if (this.handles[1]) {
        this._eventsForHandle(this.$handle2);
      }
    }
    /**
     * Adds event listeners a particular handle
     * @function
     * @private
     * @param {jQuery} $handle - the current handle to apply listeners to.
     */

  }, {
    key: "_eventsForHandle",
    value: function _eventsForHandle($handle) {
      var _this = this,
          curHandle,
          timer;

      this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
        var idx = _this.inputs.index(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this));

        _this._handleEvent(e, _this.handles.eq(idx), jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).val());
      });

      if (this.options.clickSelect) {
        this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
          if (_this.$element.data('dragging')) {
            return false;
          }

          if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.target).is('[data-slider-handle]')) {
            if (_this.options.doubleSided) {
              _this._handleEvent(e);
            } else {
              _this._handleEvent(e, _this.$handle);
            }
          }
        });
      }

      if (this.options.draggable) {
        this.handles.addTouch();
        var $body = jquery__WEBPACK_IMPORTED_MODULE_0___default()('body');
        $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
          $handle.addClass('is-dragging');

          _this.$fill.addClass('is-dragging'); //


          _this.$element.data('dragging', true);

          curHandle = jquery__WEBPACK_IMPORTED_MODULE_0___default()(e.currentTarget);
          $body.on('mousemove.zf.slider', function (e) {
            e.preventDefault();

            _this._handleEvent(e, curHandle);
          }).on('mouseup.zf.slider', function (e) {
            _this._handleEvent(e, curHandle);

            $handle.removeClass('is-dragging');

            _this.$fill.removeClass('is-dragging');

            _this.$element.data('dragging', false);

            $body.off('mousemove.zf.slider mouseup.zf.slider');
          });
        }) // prevent events triggered by touch
        .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
          e.preventDefault();
        });
      }

      $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
        var _$handle = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
            oldValue = parseFloat(_this.inputs.eq(idx).val()),
            newValue; // handle keyboard event with keyboard util


        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'Slider', {
          decrease: function decrease() {
            newValue = oldValue - _this.options.step;
          },
          increase: function increase() {
            newValue = oldValue + _this.options.step;
          },
          decrease_fast: function decrease_fast() {
            newValue = oldValue - _this.options.step * 10;
          },
          increase_fast: function increase_fast() {
            newValue = oldValue + _this.options.step * 10;
          },
          min: function min() {
            newValue = _this.options.start;
          },
          max: function max() {
            newValue = _this.options.end;
          },
          handled: function handled() {
            // only set handle pos when event was handled specially
            e.preventDefault();

            _this._setHandlePos(_$handle, newValue, true);
          }
        });
        /*if (newValue) { // if pressed key has special function, update value
          e.preventDefault();
          _this._setHandlePos(_$handle, newValue);
        }*/
      });
    }
    /**
     * Destroys the slider plugin.
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.handles.off('.zf.slider');
      this.inputs.off('.zf.slider');
      this.$element.off('.zf.slider');
      clearTimeout(this.timeout);
    }
  }]);

  return Slider;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_4__["Plugin"]);

Slider.defaults = {
  /**
   * Minimum value for the slider scale.
   * @option
   * @type {number}
   * @default 0
   */
  start: 0,

  /**
   * Maximum value for the slider scale.
   * @option
   * @type {number}
   * @default 100
   */
  end: 100,

  /**
   * Minimum value change per change event.
   * @option
   * @type {number}
   * @default 1
   */
  step: 1,

  /**
   * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
   * @option
   * @type {number}
   * @default 0
   */
  initialStart: 0,

  /**
   * Value at which the right handle/second input should be set to on initialization.
   * @option
   * @type {number}
   * @default 100
   */
  initialEnd: 100,

  /**
   * Allows the input to be located outside the container and visible. Set to by the JS
   * @option
   * @type {boolean}
   * @default false
   */
  binding: false,

  /**
   * Allows the user to click/tap on the slider bar to select a value.
   * @option
   * @type {boolean}
   * @default true
   */
  clickSelect: true,

  /**
   * Set to true and use the `vertical` class to change alignment to vertical.
   * @option
   * @type {boolean}
   * @default false
   */
  vertical: false,

  /**
   * Allows the user to drag the slider handle(s) to select a value.
   * @option
   * @type {boolean}
   * @default true
   */
  draggable: true,

  /**
   * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
   * @option
   * @type {boolean}
   * @default false
   */
  disabled: false,

  /**
   * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
   * @option
   * @type {boolean}
   * @default false
   */
  doubleSided: false,

  /**
   * Potential future feature.
   */
  // steps: 100,

  /**
   * Number of decimal places the plugin should go to for floating point precision.
   * @option
   * @type {number}
   * @default 2
   */
  decimal: 2,

  /**
   * Time delay for dragged elements.
   */
  // dragDelay: 0,

  /**
   * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
   * @option
   * @type {number}
   * @default 200
   */
  moveTime: 200,
  //update this if changing the transition time in the sass

  /**
   * Class applied to disabled sliders.
   * @option
   * @type {string}
   * @default 'disabled'
   */
  disabledClass: 'disabled',

  /**
   * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
   * @option
   * @type {boolean}
   * @default false
   */
  invertVertical: false,

  /**
   * Milliseconds before the `changed.zf-slider` event is triggered after value change.
   * @option
   * @type {number}
   * @default 500
   */
  changedDelay: 500,

  /**
  * Basevalue for non-linear sliders
  * @option
  * @type {number}
  * @default 5
  */
  nonLinearBase: 5,

  /**
  * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.
  * @option
  * @type {string}
  * @default 'linear'
  */
  positionValueFunction: 'linear'
};

function percent(frac, num) {
  return frac / num;
}

function absPosition($handle, dir, clickPos, param) {
  return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
}

function baseLog(base, value) {
  return Math.log(value) / Math.log(base);
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.smoothScroll.js":
/*!*********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.smoothScroll.js ***!
  \*********************************************************************/
/*! exports provided: SmoothScroll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SmoothScroll", function() { return SmoothScroll; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




/**
 * SmoothScroll module.
 * @module foundation.smooth-scroll
 */

var SmoothScroll =
/*#__PURE__*/
function (_Plugin) {
  _inherits(SmoothScroll, _Plugin);

  function SmoothScroll() {
    _classCallCheck(this, SmoothScroll);

    return _possibleConstructorReturn(this, _getPrototypeOf(SmoothScroll).apply(this, arguments));
  }

  _createClass(SmoothScroll, [{
    key: "_setup",

    /**
     * Creates a new instance of SmoothScroll.
     * @class
     * @name SmoothScroll
     * @fires SmoothScroll#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, SmoothScroll.defaults, this.$element.data(), options);
      this.className = 'SmoothScroll'; // ie9 back compat

      this._init();
    }
    /**
     * Initialize the SmoothScroll plugin
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var id = this.$element[0].id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["GetYoDigits"])(6, 'smooth-scroll');

      var _this = this;

      this.$element.attr({
        'id': id
      });

      this._events();
    }
    /**
     * Initializes events for SmoothScroll.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this; // click handler function.


      var handleLinkClick = function handleLinkClick(e) {
        // exit function if the event source isn't coming from an anchor with href attribute starts with '#'
        if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is('a[href^="#"]')) {
          return false;
        }

        var arrival = this.getAttribute('href');
        _this._inTransition = true;
        SmoothScroll.scrollToLoc(arrival, _this.options, function () {
          _this._inTransition = false;
        });
        e.preventDefault();
      };

      this.$element.on('click.zf.smoothScroll', handleLinkClick);
      this.$element.on('click.zf.smoothScroll', 'a[href^="#"]', handleLinkClick);
    }
    /**
     * Function to scroll to a given location on the page.
     * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'
     * @param {Object} options - The options to use.
     * @param {Function} callback - The callback function.
     * @static
     * @function
     */

  }], [{
    key: "scrollToLoc",
    value: function scrollToLoc(loc) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SmoothScroll.defaults;
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      // Do nothing if target does not exist to prevent errors
      if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(loc).length) {
        return false;
      }

      var scrollPos = Math.round(jquery__WEBPACK_IMPORTED_MODULE_0___default()(loc).offset().top - options.threshold / 2 - options.offset);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body').stop(true).animate({
        scrollTop: scrollPos
      }, options.animationDuration, options.animationEasing, function () {
        if (callback && typeof callback == "function") {
          callback();
        }
      });
    }
  }]);

  return SmoothScroll;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_2__["Plugin"]);
/**
 * Default settings for plugin.
 */


SmoothScroll.defaults = {
  /**
   * Amount of time, in ms, the animated scrolling should take between locations.
   * @option
   * @type {number}
   * @default 500
   */
  animationDuration: 500,

  /**
   * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
   * @option
   * @type {string}
   * @default 'linear'
   * @see {@link https://api.jquery.com/animate|Jquery animate}
   */
  animationEasing: 'linear',

  /**
   * Number of pixels to use as a marker for location changes.
   * @option
   * @type {number}
   * @default 50
   */
  threshold: 50,

  /**
   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
   * @option
   * @type {number}
   * @default 0
   */
  offset: 0
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.sticky.js":
/*!***************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.sticky.js ***!
  \***************************************************************/
/*! exports provided: Sticky */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sticky", function() { return Sticky; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






/**
 * Sticky module.
 * @module foundation.sticky
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 */

var Sticky =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Sticky, _Plugin);

  function Sticky() {
    _classCallCheck(this, Sticky);

    return _possibleConstructorReturn(this, _getPrototypeOf(Sticky).apply(this, arguments));
  }

  _createClass(Sticky, [{
    key: "_setup",

    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @name Sticky
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Sticky.defaults, this.$element.data(), options);
      this.className = 'Sticky'; // ie9 back compat
      // Triggers init is idempotent, just need to make sure it is initialized

      _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_4__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

      this._init();
    }
    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"]._init();

      var $parent = this.$element.parent('[data-sticky-container]'),
          id = this.$element[0].id || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["GetYoDigits"])(6, 'sticky'),
          _this = this;

      if ($parent.length) {
        this.$container = $parent;
      } else {
        this.wasWrapped = true;
        this.$element.wrap(this.options.container);
        this.$container = this.$element.parent();
      }

      this.$container.addClass(this.options.containerClass);
      this.$element.addClass(this.options.stickyClass).attr({
        'data-resize': id,
        'data-mutate': id
      });

      if (this.options.anchor !== '') {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()('#' + _this.options.anchor).attr({
          'data-mutate': id
        });
      }

      this.scrollCount = this.options.checkEvery;
      this.isStuck = false;
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).one('load.zf.sticky', function () {
        //We calculate the container height to have correct values for anchor points offset calculation.
        _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;

        _this.$container.css('height', _this.containerHeight);

        _this.elemHeight = _this.containerHeight;

        if (_this.options.anchor !== '') {
          _this.$anchor = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#' + _this.options.anchor);
        } else {
          _this._parsePoints();
        }

        _this._setSizes(function () {
          var scroll = window.pageYOffset;

          _this._calc(false, scroll); //Unstick the element will ensure that proper classes are set.


          if (!_this.isStuck) {
            _this._removeSticky(scroll >= _this.topPoint ? false : true);
          }
        });

        _this._events(id.split('-').reverse().join('-'));
      });
    }
    /**
     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
     * @function
     * @private
     */

  }, {
    key: "_parsePoints",
    value: function _parsePoints() {
      var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
          btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
          pts = [top, btm],
          breaks = {};

      for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
        var pt;

        if (typeof pts[i] === 'number') {
          pt = pts[i];
        } else {
          var place = pts[i].split(':'),
              anchor = jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(place[0]));
          pt = anchor.offset().top;

          if (place[1] && place[1].toLowerCase() === 'bottom') {
            pt += anchor[0].getBoundingClientRect().height;
          }
        }

        breaks[i] = pt;
      }

      this.points = breaks;
      return;
    }
    /**
     * Adds event handlers for the scrolling element.
     * @private
     * @param {String} id - pseudo-random id for unique scroll event listener.
     */

  }, {
    key: "_events",
    value: function _events(id) {
      var _this = this,
          scrollListener = this.scrollListener = "scroll.zf.".concat(id);

      if (this.isOn) {
        return;
      }

      if (this.canStick) {
        this.isOn = true;
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off(scrollListener).on(scrollListener, function (e) {
          if (_this.scrollCount === 0) {
            _this.scrollCount = _this.options.checkEvery;

            _this._setSizes(function () {
              _this._calc(false, window.pageYOffset);
            });
          } else {
            _this.scrollCount--;

            _this._calc(false, window.pageYOffset);
          }
        });
      }

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
        _this._eventsHandler(id);
      });
      this.$element.on('mutateme.zf.trigger', function (e, el) {
        _this._eventsHandler(id);
      });

      if (this.$anchor) {
        this.$anchor.on('mutateme.zf.trigger', function (e, el) {
          _this._eventsHandler(id);
        });
      }
    }
    /**
     * Handler for events.
     * @private
     * @param {String} id - pseudo-random id for unique scroll event listener.
     */

  }, {
    key: "_eventsHandler",
    value: function _eventsHandler(id) {
      var _this = this,
          scrollListener = this.scrollListener = "scroll.zf.".concat(id);

      _this._setSizes(function () {
        _this._calc(false);

        if (_this.canStick) {
          if (!_this.isOn) {
            _this._events(id);
          }
        } else if (_this.isOn) {
          _this._pauseListeners(scrollListener);
        }
      });
    }
    /**
     * Removes event handlers for scroll and change events on anchor.
     * @fires Sticky#pause
     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
     */

  }, {
    key: "_pauseListeners",
    value: function _pauseListeners(scrollListener) {
      this.isOn = false;
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off(scrollListener);
      /**
       * Fires when the plugin is paused due to resize event shrinking the view.
       * @event Sticky#pause
       * @private
       */

      this.$element.trigger('pause.zf.sticky');
    }
    /**
     * Called on every `scroll` event and on `_init`
     * fires functions based on booleans and cached values
     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
     */

  }, {
    key: "_calc",
    value: function _calc(checkSizes, scroll) {
      if (checkSizes) {
        this._setSizes();
      }

      if (!this.canStick) {
        if (this.isStuck) {
          this._removeSticky(true);
        }

        return false;
      }

      if (!scroll) {
        scroll = window.pageYOffset;
      }

      if (scroll >= this.topPoint) {
        if (scroll <= this.bottomPoint) {
          if (!this.isStuck) {
            this._setSticky();
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(false);
          }
        }
      } else {
        if (this.isStuck) {
          this._removeSticky(true);
        }
      }
    }
    /**
     * Causes the $element to become stuck.
     * Adds `position: fixed;`, and helper classes.
     * @fires Sticky#stuckto
     * @function
     * @private
     */

  }, {
    key: "_setSticky",
    value: function _setSticky() {
      var _this = this,
          stickTo = this.options.stickTo,
          mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
          notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
          css = {};

      css[mrgn] = "".concat(this.options[mrgn], "em");
      css[stickTo] = 0;
      css[notStuckTo] = 'auto';
      this.isStuck = true;
      this.$element.removeClass("is-anchored is-at-".concat(notStuckTo)).addClass("is-stuck is-at-".concat(stickTo)).css(css)
      /**
       * Fires when the $element has become `position: fixed;`
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
       * @event Sticky#stuckto
       */
      .trigger("sticky.zf.stuckto:".concat(stickTo));
      this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
        _this._setSizes();
      });
    }
    /**
     * Causes the $element to become unstuck.
     * Removes `position: fixed;`, and helper classes.
     * Adds other helper classes.
     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
     * @fires Sticky#unstuckfrom
     * @private
     */

  }, {
    key: "_removeSticky",
    value: function _removeSticky(isTop) {
      var stickTo = this.options.stickTo,
          stickToTop = stickTo === 'top',
          css = {},
          anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
          mrgn = stickToTop ? 'marginTop' : 'marginBottom',
          notStuckTo = stickToTop ? 'bottom' : 'top',
          topOrBottom = isTop ? 'top' : 'bottom';
      css[mrgn] = 0;
      css['bottom'] = 'auto';

      if (isTop) {
        css['top'] = 0;
      } else {
        css['top'] = anchorPt;
      }

      this.isStuck = false;
      this.$element.removeClass("is-stuck is-at-".concat(stickTo)).addClass("is-anchored is-at-".concat(topOrBottom)).css(css)
      /**
       * Fires when the $element has become anchored.
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
       * @event Sticky#unstuckfrom
       */
      .trigger("sticky.zf.unstuckfrom:".concat(topOrBottom));
    }
    /**
     * Sets the $element and $container sizes for plugin.
     * Calls `_setBreakPoints`.
     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
     * @private
     */

  }, {
    key: "_setSizes",
    value: function _setSizes(cb) {
      this.canStick = _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].is(this.options.stickyOn);

      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        }
      }

      var _this = this,
          newElemWidth = this.$container[0].getBoundingClientRect().width,
          comp = window.getComputedStyle(this.$container[0]),
          pdngl = parseInt(comp['padding-left'], 10),
          pdngr = parseInt(comp['padding-right'], 10);

      if (this.$anchor && this.$anchor.length) {
        this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
      } else {
        this._parsePoints();
      }

      this.$element.css({
        'max-width': "".concat(newElemWidth - pdngl - pdngr, "px")
      });
      var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;

      if (this.$element.css("display") == "none") {
        newContainerHeight = 0;
      }

      this.containerHeight = newContainerHeight;
      this.$container.css({
        height: newContainerHeight
      });
      this.elemHeight = newContainerHeight;

      if (!this.isStuck) {
        if (this.$element.hasClass('is-at-bottom')) {
          var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
          this.$element.css('top', anchorPt);
        }
      }

      this._setBreakPoints(newContainerHeight, function () {
        if (cb && typeof cb === 'function') {
          cb();
        }
      });
    }
    /**
     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
     * @param {Function} cb - optional callback function to be called on completion.
     * @private
     */

  }, {
    key: "_setBreakPoints",
    value: function _setBreakPoints(elemHeight, cb) {
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        } else {
          return false;
        }
      }

      var mTop = emCalc(this.options.marginTop),
          mBtm = emCalc(this.options.marginBottom),
          topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
          bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,
          // topPoint = this.$anchor.offset().top || this.points[0],
      // bottomPoint = topPoint + this.anchorHeight || this.points[1],
      winHeight = window.innerHeight;

      if (this.options.stickTo === 'top') {
        topPoint -= mTop;
        bottomPoint -= elemHeight + mTop;
      } else if (this.options.stickTo === 'bottom') {
        topPoint -= winHeight - (elemHeight + mBtm);
        bottomPoint -= winHeight - mBtm;
      } else {//this would be the stickTo: both option... tricky
      }

      this.topPoint = topPoint;
      this.bottomPoint = bottomPoint;

      if (cb && typeof cb === 'function') {
        cb();
      }
    }
    /**
     * Destroys the current sticky element.
     * Resets the element to the top position first.
     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this._removeSticky(true);

      this.$element.removeClass("".concat(this.options.stickyClass, " is-anchored is-at-top")).css({
        height: '',
        top: '',
        bottom: '',
        'max-width': ''
      }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');

      if (this.$anchor && this.$anchor.length) {
        this.$anchor.off('change.zf.sticky');
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off(this.scrollListener);

      if (this.wasWrapped) {
        this.$element.unwrap();
      } else {
        this.$container.removeClass(this.options.containerClass).css({
          height: ''
        });
      }
    }
  }]);

  return Sticky;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_3__["Plugin"]);

Sticky.defaults = {
  /**
   * Customizable container template. Add your own classes for styling and sizing.
   * @option
   * @type {string}
   * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
   */
  container: '<div data-sticky-container></div>',

  /**
   * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
   * @option
   * @type {string}
   * @default 'top'
   */
  stickTo: 'top',

  /**
   * If anchored to a single element, the id of that element.
   * @option
   * @type {string}
   * @default ''
   */
  anchor: '',

  /**
   * If using more than one element as anchor points, the id of the top anchor.
   * @option
   * @type {string}
   * @default ''
   */
  topAnchor: '',

  /**
   * If using more than one element as anchor points, the id of the bottom anchor.
   * @option
   * @type {string}
   * @default ''
   */
  btmAnchor: '',

  /**
   * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
   * @option
   * @type {number}
   * @default 1
   */
  marginTop: 1,

  /**
   * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
   * @option
   * @type {number}
   * @default 1
   */
  marginBottom: 1,

  /**
   * Breakpoint string that is the minimum screen size an element should become sticky.
   * @option
   * @type {string}
   * @default 'medium'
   */
  stickyOn: 'medium',

  /**
   * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
   * @option
   * @type {string}
   * @default 'sticky'
   */
  stickyClass: 'sticky',

  /**
   * Class applied to sticky container. Foundation defaults to `sticky-container`.
   * @option
   * @type {string}
   * @default 'sticky-container'
   */
  containerClass: 'sticky-container',

  /**
   * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
   * @option
   * @type {number}
   * @default -1
   */
  checkEvery: -1
};
/**
 * Helper function to calculate em values
 * @param Number {em} - number of em's to calculate into pixels
 */

function emCalc(em) {
  return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.tabs.js":
/*!*************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.tabs.js ***!
  \*************************************************************/
/*! exports provided: Tabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tabs", function() { return Tabs; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.keyboard */ "./node_modules/foundation-sites/js/foundation.util.keyboard.js");
/* harmony import */ var _foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.imageLoader */ "./node_modules/foundation-sites/js/foundation.util.imageLoader.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Tabs module.
 * @module foundation.tabs
 * @requires foundation.util.keyboard
 * @requires foundation.util.imageLoader if tabs contain images
 */

var Tabs =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Tabs, _Plugin);

  function Tabs() {
    _classCallCheck(this, Tabs);

    return _possibleConstructorReturn(this, _getPrototypeOf(Tabs).apply(this, arguments));
  }

  _createClass(Tabs, [{
    key: "_setup",

    /**
     * Creates a new instance of tabs.
     * @class
     * @name Tabs
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Tabs.defaults, this.$element.data(), options);
      this.className = 'Tabs'; // ie9 back compat

      this._init();

      _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous' // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'

      });
    }
    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var _this2 = this;

      var _this = this;

      this.$element.attr({
        'role': 'tablist'
      });
      this.$tabTitles = this.$element.find(".".concat(this.options.linkClass));
      this.$tabContent = jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-tabs-content=\"".concat(this.$element[0].id, "\"]"));
      this.$tabTitles.each(function () {
        var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            $link = $elem.find('a'),
            isActive = $elem.hasClass("".concat(_this.options.linkActiveClass)),
            hash = $link.attr('data-tabs-target') || $link[0].hash.slice(1),
            linkId = $link[0].id ? $link[0].id : "".concat(hash, "-label"),
            $tabContent = jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(hash));
        $elem.attr({
          'role': 'presentation'
        });
        $link.attr({
          'role': 'tab',
          'aria-controls': hash,
          'aria-selected': isActive,
          'id': linkId,
          'tabindex': isActive ? '0' : '-1'
        });
        $tabContent.attr({
          'role': 'tabpanel',
          'aria-labelledby': linkId
        });

        if (!isActive) {
          $tabContent.attr('aria-hidden', 'true');
        }

        if (isActive && _this.options.autoFocus) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).load(function () {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body').animate({
              scrollTop: $elem.offset().top
            }, _this.options.deepLinkSmudgeDelay, function () {
              $link.focus();
            });
          });
        }
      });

      if (this.options.matchHeight) {
        var $images = this.$tabContent.find('img');

        if ($images.length) {
          Object(_foundation_util_imageLoader__WEBPACK_IMPORTED_MODULE_2__["onImagesLoaded"])($images, this._setHeight.bind(this));
        } else {
          this._setHeight();
        }
      } //current context-bound function to open tabs on page load or history popstate


      this._checkDeepLink = function () {
        var anchor = window.location.hash; //need a hash and a relevant anchor in this tabset

        if (anchor.length) {
          var $link = _this2.$element.find('[href$="' + anchor + '"]');

          if ($link.length) {
            _this2.selectTab(jquery__WEBPACK_IMPORTED_MODULE_0___default()(anchor), true); //roll up a little to show the titles


            if (_this2.options.deepLinkSmudge) {
              var offset = _this2.$element.offset();

              jquery__WEBPACK_IMPORTED_MODULE_0___default()('html, body').animate({
                scrollTop: offset.top
              }, _this2.options.deepLinkSmudgeDelay);
            }
            /**
              * Fires when the zplugin has deeplinked at pageload
              * @event Tabs#deeplink
              */


            _this2.$element.trigger('deeplink.zf.tabs', [$link, jquery__WEBPACK_IMPORTED_MODULE_0___default()(anchor)]);
          }
        }
      }; //use browser to open a tab, if it exists in this tabset


      if (this.options.deepLink) {
        this._checkDeepLink();
      }

      this._events();
    }
    /**
     * Adds event handlers for items within the tabs.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      this._addKeyHandler();

      this._addClickHandler();

      this._setHeightMqHandler = null;

      if (this.options.matchHeight) {
        this._setHeightMqHandler = this._setHeight.bind(this);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
      }

      if (this.options.deepLink) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('popstate', this._checkDeepLink);
      }
    }
    /**
     * Adds click handlers for items within the tabs.
     * @private
     */

  }, {
    key: "_addClickHandler",
    value: function _addClickHandler() {
      var _this = this;

      this.$element.off('click.zf.tabs').on('click.zf.tabs', ".".concat(this.options.linkClass), function (e) {
        e.preventDefault();
        e.stopPropagation();

        _this._handleTabChange(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this));
      });
    }
    /**
     * Adds keyboard event handlers for items within the tabs.
     * @private
     */

  }, {
    key: "_addKeyHandler",
    value: function _addKeyHandler() {
      var _this = this;

      this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
        if (e.which === 9) return;
        var $element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement;
        $elements.each(function (i) {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is($element)) {
            if (_this.options.wrapOnKeys) {
              $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
              $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
            } else {
              $prevElement = $elements.eq(Math.max(0, i - 1));
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            }

            return;
          }
        }); // handle keyboard event with keyboard util

        _foundation_util_keyboard__WEBPACK_IMPORTED_MODULE_1__["Keyboard"].handleKey(e, 'Tabs', {
          open: function open() {
            $element.find('[role="tab"]').focus();

            _this._handleTabChange($element);
          },
          previous: function previous() {
            $prevElement.find('[role="tab"]').focus();

            _this._handleTabChange($prevElement);
          },
          next: function next() {
            $nextElement.find('[role="tab"]').focus();

            _this._handleTabChange($nextElement);
          },
          handled: function handled() {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      });
    }
    /**
     * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.
     * @param {jQuery} $target - Tab to open.
     * @param {boolean} historyHandled - browser has already handled a history update
     * @fires Tabs#change
     * @function
     */

  }, {
    key: "_handleTabChange",
    value: function _handleTabChange($target, historyHandled) {
      /**
       * Check for active class on target. Collapse if exists.
       */
      if ($target.hasClass("".concat(this.options.linkActiveClass))) {
        if (this.options.activeCollapse) {
          this._collapseTab($target);
          /**
           * Fires when the zplugin has successfully collapsed tabs.
           * @event Tabs#collapse
           */


          this.$element.trigger('collapse.zf.tabs', [$target]);
        }

        return;
      }

      var $oldTab = this.$element.find(".".concat(this.options.linkClass, ".").concat(this.options.linkActiveClass)),
          $tabLink = $target.find('[role="tab"]'),
          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),
          $targetContent = this.$tabContent.find("#".concat(hash)); //close old tab

      this._collapseTab($oldTab); //open new tab


      this._openTab($target); //either replace or update browser history


      if (this.options.deepLink && !historyHandled) {
        var anchor = $target.find('a').attr('href');

        if (this.options.updateHistory) {
          history.pushState({}, '', anchor);
        } else {
          history.replaceState({}, '', anchor);
        }
      }
      /**
       * Fires when the plugin has successfully changed tabs.
       * @event Tabs#change
       */


      this.$element.trigger('change.zf.tabs', [$target, $targetContent]); //fire to children a mutation event

      $targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");
    }
    /**
     * Opens the tab `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to Open.
     * @function
     */

  }, {
    key: "_openTab",
    value: function _openTab($target) {
      var $tabLink = $target.find('[role="tab"]'),
          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),
          $targetContent = this.$tabContent.find("#".concat(hash));
      $target.addClass("".concat(this.options.linkActiveClass));
      $tabLink.attr({
        'aria-selected': 'true',
        'tabindex': '0'
      });
      $targetContent.addClass("".concat(this.options.panelActiveClass)).removeAttr('aria-hidden');
    }
    /**
     * Collapses `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to Open.
     * @function
     */

  }, {
    key: "_collapseTab",
    value: function _collapseTab($target) {
      var $target_anchor = $target.removeClass("".concat(this.options.linkActiveClass)).find('[role="tab"]').attr({
        'aria-selected': 'false',
        'tabindex': -1
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat($target_anchor.attr('aria-controls'))).removeClass("".concat(this.options.panelActiveClass)).attr({
        'aria-hidden': 'true'
      });
    }
    /**
     * Public method for selecting a content pane to display.
     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
     * @param {boolean} historyHandled - browser has already handled a history update
     * @function
     */

  }, {
    key: "selectTab",
    value: function selectTab(elem, historyHandled) {
      var idStr;

      if (_typeof(elem) === 'object') {
        idStr = elem[0].id;
      } else {
        idStr = elem;
      }

      if (idStr.indexOf('#') < 0) {
        idStr = "#".concat(idStr);
      }

      var $target = this.$tabTitles.find("[href$=\"".concat(idStr, "\"]")).parent(".".concat(this.options.linkClass));

      this._handleTabChange($target, historyHandled);
    }
  }, {
    key: "_setHeight",

    /**
     * Sets the height of each panel to the height of the tallest panel.
     * If enabled in options, gets called on media query change.
     * If loading content via external source, can be called directly or with _reflow.
     * If enabled with `data-match-height="true"`, tabs sets to equal height
     * @function
     * @private
     */
    value: function _setHeight() {
      var max = 0,
          _this = this; // Lock down the `this` value for the root tabs object


      this.$tabContent.find(".".concat(this.options.panelClass)).css('height', '').each(function () {
        var panel = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
            isActive = panel.hasClass("".concat(_this.options.panelActiveClass)); // get the options from the parent instead of trying to get them from the child

        if (!isActive) {
          panel.css({
            'visibility': 'hidden',
            'display': 'block'
          });
        }

        var temp = this.getBoundingClientRect().height;

        if (!isActive) {
          panel.css({
            'visibility': '',
            'display': ''
          });
        }

        max = temp > max ? temp : max;
      }).css('height', "".concat(max, "px"));
    }
    /**
     * Destroys an instance of an tabs.
     * @fires Tabs#destroyed
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.find(".".concat(this.options.linkClass)).off('.zf.tabs').hide().end().find(".".concat(this.options.panelClass)).hide();

      if (this.options.matchHeight) {
        if (this._setHeightMqHandler != null) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
        }
      }

      if (this.options.deepLink) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('popstate', this._checkDeepLink);
      }
    }
  }]);

  return Tabs;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_3__["Plugin"]);

Tabs.defaults = {
  /**
   * Allows the window to scroll to content of pane specified by hash anchor
   * @option
   * @type {boolean}
   * @default false
   */
  deepLink: false,

  /**
   * Adjust the deep link scroll to make sure the top of the tab panel is visible
   * @option
   * @type {boolean}
   * @default false
   */
  deepLinkSmudge: false,

  /**
   * Animation time (ms) for the deep link adjustment
   * @option
   * @type {number}
   * @default 300
   */
  deepLinkSmudgeDelay: 300,

  /**
   * Update the browser history with the open tab
   * @option
   * @type {boolean}
   * @default false
   */
  updateHistory: false,

  /**
   * Allows the window to scroll to content of active pane on load if set to true.
   * Not recommended if more than one tab panel per page.
   * @option
   * @type {boolean}
   * @default false
   */
  autoFocus: false,

  /**
   * Allows keyboard input to 'wrap' around the tab links.
   * @option
   * @type {boolean}
   * @default true
   */
  wrapOnKeys: true,

  /**
   * Allows the tab content panes to match heights if set to true.
   * @option
   * @type {boolean}
   * @default false
   */
  matchHeight: false,

  /**
   * Allows active tabs to collapse when clicked.
   * @option
   * @type {boolean}
   * @default false
   */
  activeCollapse: false,

  /**
   * Class applied to `li`'s in tab link list.
   * @option
   * @type {string}
   * @default 'tabs-title'
   */
  linkClass: 'tabs-title',

  /**
   * Class applied to the active `li` in tab link list.
   * @option
   * @type {string}
   * @default 'is-active'
   */
  linkActiveClass: 'is-active',

  /**
   * Class applied to the content containers.
   * @option
   * @type {string}
   * @default 'tabs-panel'
   */
  panelClass: 'tabs-panel',

  /**
   * Class applied to the active content container.
   * @option
   * @type {string}
   * @default 'is-active'
   */
  panelActiveClass: 'is-active'
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.toggler.js":
/*!****************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.toggler.js ***!
  \****************************************************************/
/*! exports provided: Toggler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Toggler", function() { return Toggler; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_motion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.motion */ "./node_modules/foundation-sites/js/foundation.util.motion.js");
/* harmony import */ var _foundation_plugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.plugin */ "./node_modules/foundation-sites/js/foundation.plugin.js");
/* harmony import */ var _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Toggler module.
 * @module foundation.toggler
 * @requires foundation.util.motion
 * @requires foundation.util.triggers
 */

var Toggler =
/*#__PURE__*/
function (_Plugin) {
  _inherits(Toggler, _Plugin);

  function Toggler() {
    _classCallCheck(this, Toggler);

    return _possibleConstructorReturn(this, _getPrototypeOf(Toggler).apply(this, arguments));
  }

  _createClass(Toggler, [{
    key: "_setup",

    /**
     * Creates a new instance of Toggler.
     * @class
     * @name Toggler
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';
      this.className = 'Toggler'; // ie9 back compat
      // Triggers init is idempotent, just need to make sure it is initialized

      _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_3__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

      this._init();

      this._events();
    }
    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      var input; // Parse animation classes if they were set

      if (this.options.animate) {
        input = this.options.animate.split(' ');
        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      } // Otherwise, parse toggle class
      else {
          input = this.$element.data('toggler'); // Allow for a . at the beginning of the string

          this.className = input[0] === '.' ? input.slice(1) : input;
        } // Add ARIA attributes to triggers


      var id = this.$element[0].id;
      jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-open=\"".concat(id, "\"], [data-close=\"").concat(id, "\"], [data-toggle=\"").concat(id, "\"]")).attr('aria-controls', id); // If the target is hidden, add aria-hidden

      this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
    }
    /**
     * Initializes events for the toggle trigger.
     * @function
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
    }
    /**
     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
     * @function
     * @fires Toggler#on
     * @fires Toggler#off
     */

  }, {
    key: "toggle",
    value: function toggle() {
      this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
    }
  }, {
    key: "_toggleClass",
    value: function _toggleClass() {
      this.$element.toggleClass(this.className);
      var isOn = this.$element.hasClass(this.className);

      if (isOn) {
        /**
         * Fires if the target element has the class after a toggle.
         * @event Toggler#on
         */
        this.$element.trigger('on.zf.toggler');
      } else {
        /**
         * Fires if the target element does not have the class after a toggle.
         * @event Toggler#off
         */
        this.$element.trigger('off.zf.toggler');
      }

      this._updateARIA(isOn);

      this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');
    }
  }, {
    key: "_toggleAnimate",
    value: function _toggleAnimate() {
      var _this = this;

      if (this.$element.is(':hidden')) {
        _foundation_util_motion__WEBPACK_IMPORTED_MODULE_1__["Motion"].animateIn(this.$element, this.animationIn, function () {
          _this._updateARIA(true);

          this.trigger('on.zf.toggler');
          this.find('[data-mutate]').trigger('mutateme.zf.trigger');
        });
      } else {
        _foundation_util_motion__WEBPACK_IMPORTED_MODULE_1__["Motion"].animateOut(this.$element, this.animationOut, function () {
          _this._updateARIA(false);

          this.trigger('off.zf.toggler');
          this.find('[data-mutate]').trigger('mutateme.zf.trigger');
        });
      }
    }
  }, {
    key: "_updateARIA",
    value: function _updateARIA(isOn) {
      this.$element.attr('aria-expanded', isOn ? true : false);
    }
    /**
     * Destroys the instance of Toggler on the element.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.off('.zf.toggler');
    }
  }]);

  return Toggler;
}(_foundation_plugin__WEBPACK_IMPORTED_MODULE_2__["Plugin"]);

Toggler.defaults = {
  /**
   * Tells the plugin if the element should animated when toggled.
   * @option
   * @type {boolean}
   * @default false
   */
  animate: false
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.tooltip.js":
/*!****************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.tooltip.js ***!
  \****************************************************************/
/*! exports provided: Tooltip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return Tooltip; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/* harmony import */ var _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation.util.mediaQuery */ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js");
/* harmony import */ var _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./foundation.util.triggers */ "./node_modules/foundation-sites/js/foundation.util.triggers.js");
/* harmony import */ var _foundation_positionable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./foundation.positionable */ "./node_modules/foundation-sites/js/foundation.positionable.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






/**
 * Tooltip module.
 * @module foundation.tooltip
 * @requires foundation.util.box
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.triggers
 */

var Tooltip =
/*#__PURE__*/
function (_Positionable) {
  _inherits(Tooltip, _Positionable);

  function Tooltip() {
    _classCallCheck(this, Tooltip);

    return _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).apply(this, arguments));
  }

  _createClass(Tooltip, [{
    key: "_setup",

    /**
     * Creates a new instance of a Tooltip.
     * @class
     * @name Tooltip
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, Tooltip.defaults, this.$element.data(), options);
      this.className = 'Tooltip'; // ie9 back compat

      this.isActive = false;
      this.isClick = false; // Triggers init is idempotent, just need to make sure it is initialized

      _foundation_util_triggers__WEBPACK_IMPORTED_MODULE_3__["Triggers"].init(jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

      this._init();
    }
    /**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */

  }, {
    key: "_init",
    value: function _init() {
      _foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"]._init();

      var elemId = this.$element.attr('aria-describedby') || Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["GetYoDigits"])(6, 'tooltip');
      this.options.tipText = this.options.tipText || this.$element.attr('title');
      this.template = this.options.template ? jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.options.template) : this._buildTemplate(elemId);

      if (this.options.allowHtml) {
        this.template.appendTo(document.body).html(this.options.tipText).hide();
      } else {
        this.template.appendTo(document.body).text(this.options.tipText).hide();
      }

      this.$element.attr({
        'title': '',
        'aria-describedby': elemId,
        'data-yeti-box': elemId,
        'data-toggle': elemId,
        'data-resize': elemId
      }).addClass(this.options.triggerClass);

      _get(_getPrototypeOf(Tooltip.prototype), "_init", this).call(this);

      this._events();
    }
  }, {
    key: "_getDefaultPosition",
    value: function _getDefaultPosition() {
      // handle legacy classnames
      var position = this.$element[0].className.match(/\b(top|left|right|bottom)\b/g);
      return position ? position[0] : 'top';
    }
  }, {
    key: "_getDefaultAlignment",
    value: function _getDefaultAlignment() {
      return 'center';
    }
  }, {
    key: "_getHOffset",
    value: function _getHOffset() {
      if (this.position === 'left' || this.position === 'right') {
        return this.options.hOffset + this.options.tooltipWidth;
      } else {
        return this.options.hOffset;
      }
    }
  }, {
    key: "_getVOffset",
    value: function _getVOffset() {
      if (this.position === 'top' || this.position === 'bottom') {
        return this.options.vOffset + this.options.tooltipHeight;
      } else {
        return this.options.vOffset;
      }
    }
    /**
     * builds the tooltip element, adds attributes, and returns the template.
     * @private
     */

  }, {
    key: "_buildTemplate",
    value: function _buildTemplate(id) {
      var templateClasses = "".concat(this.options.tooltipClass, " ").concat(this.options.positionClass, " ").concat(this.options.templateClasses).trim();
      var $template = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<div></div>').addClass(templateClasses).attr({
        'role': 'tooltip',
        'aria-hidden': true,
        'data-is-active': false,
        'data-is-focus': false,
        'id': id
      });
      return $template;
    }
    /**
     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
     * if the tooltip is larger than the screen width, default to full width - any user selected margin
     * @private
     */

  }, {
    key: "_setPosition",
    value: function _setPosition() {
      _get(_getPrototypeOf(Tooltip.prototype), "_setPosition", this).call(this, this.$element, this.template);
    }
    /**
     * reveals the tooltip, and fires an event to close any other open tooltips on the page
     * @fires Tooltip#closeme
     * @fires Tooltip#show
     * @function
     */

  }, {
    key: "show",
    value: function show() {
      if (this.options.showOn !== 'all' && !_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_2__["MediaQuery"].is(this.options.showOn)) {
        // console.error('The screen is too small to display this tooltip');
        return false;
      }

      var _this = this;

      this.template.css('visibility', 'hidden').show();

      this._setPosition();

      this.template.removeClass('top bottom left right').addClass(this.position);
      this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-' + this.alignment);
      /**
       * Fires to close all other open tooltips on the page
       * @event Closeme#tooltip
       */

      this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));
      this.template.attr({
        'data-is-active': true,
        'aria-hidden': false
      });
      _this.isActive = true; // console.log(this.template);

      this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {//maybe do stuff?
      });
      /**
       * Fires when the tooltip is shown
       * @event Tooltip#show
       */

      this.$element.trigger('show.zf.tooltip');
    }
    /**
     * Hides the current tooltip, and resets the positioning class if it was changed due to collision
     * @fires Tooltip#hide
     * @function
     */

  }, {
    key: "hide",
    value: function hide() {
      // console.log('hiding', this.$element.data('yeti-box'));
      var _this = this;

      this.template.stop().attr({
        'aria-hidden': true,
        'data-is-active': false
      }).fadeOut(this.options.fadeOutDuration, function () {
        _this.isActive = false;
        _this.isClick = false;
      });
      /**
       * fires when the tooltip is hidden
       * @event Tooltip#hide
       */

      this.$element.trigger('hide.zf.tooltip');
    }
    /**
     * adds event listeners for the tooltip and its anchor
     * TODO combine some of the listeners like focus and mouseenter, etc.
     * @private
     */

  }, {
    key: "_events",
    value: function _events() {
      var _this = this;

      var $template = this.template;
      var isFocus = false;

      if (!this.options.disableHover) {
        this.$element.on('mouseenter.zf.tooltip', function (e) {
          if (!_this.isActive) {
            _this.timeout = setTimeout(function () {
              _this.show();
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.tooltip', function (e) {
          clearTimeout(_this.timeout);

          if (!isFocus || _this.isClick && !_this.options.clickOpen) {
            _this.hide();
          }
        });
      }

      if (this.options.clickOpen) {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();

          if (_this.isClick) {//_this.hide();
            // _this.isClick = false;
          } else {
            _this.isClick = true;

            if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
              _this.show();
            }
          }
        });
      } else {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          _this.isClick = true;
        });
      }

      if (!this.options.disableForTouch) {
        this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
          _this.isActive ? _this.hide() : _this.show();
        });
      }

      this.$element.on({
        // 'toggle.zf.trigger': this.toggle.bind(this),
        // 'close.zf.trigger': this.hide.bind(this)
        'close.zf.trigger': this.hide.bind(this)
      });
      this.$element.on('focus.zf.tooltip', function (e) {
        isFocus = true;

        if (_this.isClick) {
          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
          // a real focus, otherwise on hover and come back we get bad behavior
          if (!_this.options.clickOpen) {
            isFocus = false;
          }

          return false;
        } else {
          _this.show();
        }
      }).on('focusout.zf.tooltip', function (e) {
        isFocus = false;
        _this.isClick = false;

        _this.hide();
      }).on('resizeme.zf.trigger', function () {
        if (_this.isActive) {
          _this._setPosition();
        }
      });
    }
    /**
     * adds a toggle method, in addition to the static show() & hide() functions
     * @function
     */

  }, {
    key: "toggle",
    value: function toggle() {
      if (this.isActive) {
        this.hide();
      } else {
        this.show();
      }
    }
    /**
     * Destroys an instance of tooltip, removes template element from the view.
     * @function
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');
      this.template.remove();
    }
  }]);

  return Tooltip;
}(_foundation_positionable__WEBPACK_IMPORTED_MODULE_4__["Positionable"]);

Tooltip.defaults = {
  disableForTouch: false,

  /**
   * Time, in ms, before a tooltip should open on hover.
   * @option
   * @type {number}
   * @default 200
   */
  hoverDelay: 200,

  /**
   * Time, in ms, a tooltip should take to fade into view.
   * @option
   * @type {number}
   * @default 150
   */
  fadeInDuration: 150,

  /**
   * Time, in ms, a tooltip should take to fade out of view.
   * @option
   * @type {number}
   * @default 150
   */
  fadeOutDuration: 150,

  /**
   * Disables hover events from opening the tooltip if set to true
   * @option
   * @type {boolean}
   * @default false
   */
  disableHover: false,

  /**
   * Optional addtional classes to apply to the tooltip template on init.
   * @option
   * @type {string}
   * @default ''
   */
  templateClasses: '',

  /**
   * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
   * @option
   * @type {string}
   * @default 'tooltip'
   */
  tooltipClass: 'tooltip',

  /**
   * Class applied to the tooltip anchor element.
   * @option
   * @type {string}
   * @default 'has-tip'
   */
  triggerClass: 'has-tip',

  /**
   * Minimum breakpoint size at which to open the tooltip.
   * @option
   * @type {string}
   * @default 'small'
   */
  showOn: 'small',

  /**
   * Custom template to be used to generate markup for tooltip.
   * @option
   * @type {string}
   * @default ''
   */
  template: '',

  /**
   * Text displayed in the tooltip template on open.
   * @option
   * @type {string}
   * @default ''
   */
  tipText: '',
  touchCloseText: 'Tap to close.',

  /**
   * Allows the tooltip to remain open if triggered with a click or touch event.
   * @option
   * @type {boolean}
   * @default true
   */
  clickOpen: true,

  /**
   * DEPRECATED Additional positioning classes, set by the JS
   * @option
   * @type {string}
   * @default ''
   */
  positionClass: '',

  /**
   * Position of tooltip. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  position: 'auto',

  /**
   * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',

  /**
   * Allow overlap of container/window. If false, tooltip will first try to
   * position as defined by data-position and data-alignment, but reposition if
   * it would cause an overflow.  @option
   * @type {boolean}
   * @default false
   */
  allowOverlap: false,

  /**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * Less common for tooltips.
   * @option
   * @type {boolean}
   * @default false
   */
  allowBottomOverlap: false,

  /**
   * Distance, in pixels, the template should push away from the anchor on the Y axis.
   * @option
   * @type {number}
   * @default 0
   */
  vOffset: 0,

  /**
   * Distance, in pixels, the template should push away from the anchor on the X axis
   * @option
   * @type {number}
   * @default 0
   */
  hOffset: 0,

  /**
   * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip
   * @option
   * @type {number}
   * @default 14
   */
  tooltipHeight: 14,

  /**
   * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip
   * @option
   * @type {number}
   * @default 12
   */
  tooltipWidth: 12,

  /**
  * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,
  * allowing HTML may open yourself up to XSS attacks.
  * @option
  * @type {boolean}
  * @default false
  */
  allowHtml: false
};
/**
 * TODO utilize resize event trigger
 */



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.box.js":
/*!*****************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.box.js ***!
  \*****************************************************************/
/*! exports provided: Box */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box", function() { return Box; });
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");



var Box = {
  ImNotTouchingYou: ImNotTouchingYou,
  OverlapArea: OverlapArea,
  GetDimensions: GetDimensions,
  GetOffsets: GetOffsets,
  GetExplicitOffsets: GetExplicitOffsets
  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */

};

function ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {
  return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;
}

;

function OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {
  var eleDims = GetDimensions(element),
      topOver,
      bottomOver,
      leftOver,
      rightOver;

  if (parent) {
    var parDims = GetDimensions(parent);
    bottomOver = parDims.height + parDims.offset.top - (eleDims.offset.top + eleDims.height);
    topOver = eleDims.offset.top - parDims.offset.top;
    leftOver = eleDims.offset.left - parDims.offset.left;
    rightOver = parDims.width + parDims.offset.left - (eleDims.offset.left + eleDims.width);
  } else {
    bottomOver = eleDims.windowDims.height + eleDims.windowDims.offset.top - (eleDims.offset.top + eleDims.height);
    topOver = eleDims.offset.top - eleDims.windowDims.offset.top;
    leftOver = eleDims.offset.left - eleDims.windowDims.offset.left;
    rightOver = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);
  }

  bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);
  topOver = Math.min(topOver, 0);
  leftOver = Math.min(leftOver, 0);
  rightOver = Math.min(rightOver, 0);

  if (lrOnly) {
    return leftOver + rightOver;
  }

  if (tbOnly) {
    return topOver + bottomOver;
  } // use sum of squares b/c we care about overlap area.


  return Math.sqrt(topOver * topOver + bottomOver * bottomOver + leftOver * leftOver + rightOver * rightOver);
}
/**
 * Uses native methods to return an object of dimension values.
 * @function
 * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
 * @returns {Object} - nested object of integer pixel values
 * TODO - if element is window, return only those values.
 */


function GetDimensions(elem) {
  elem = elem.length ? elem[0] : elem;

  if (elem === window || elem === document) {
    throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
  }

  var rect = elem.getBoundingClientRect(),
      parRect = elem.parentNode.getBoundingClientRect(),
      winRect = document.body.getBoundingClientRect(),
      winY = window.pageYOffset,
      winX = window.pageXOffset;
  return {
    width: rect.width,
    height: rect.height,
    offset: {
      top: rect.top + winY,
      left: rect.left + winX
    },
    parentDims: {
      width: parRect.width,
      height: parRect.height,
      offset: {
        top: parRect.top + winY,
        left: parRect.left + winX
      }
    },
    windowDims: {
      width: winRect.width,
      height: winRect.height,
      offset: {
        top: winY,
        left: winX
      }
    }
  };
}
/**
 * Returns an object of top and left integer pixel values for dynamically rendered elements,
 * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where
 * you don't know alignment, but generally from
 * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.
 * @function
 * @param {jQuery} element - jQuery object for the element being positioned.
 * @param {jQuery} anchor - jQuery object for the element's anchor point.
 * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
 * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
 * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
 * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
 * TODO alter/rewrite to work with `em` values as well/instead of pixels
 */


function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
  console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5");

  switch (position) {
    case 'top':
      return Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_0__["rtl"])() ? GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);

    case 'bottom':
      return Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_0__["rtl"])() ? GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);

    case 'center top':
      return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);

    case 'center bottom':
      return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);

    case 'center left':
      return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);

    case 'center right':
      return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);

    case 'left bottom':
      return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);

    case 'right bottom':
      return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);
    // Backwards compatibility... this along with the reveal and reveal full
    // classes are the only ones that didn't reference anchor

    case 'center':
      return {
        left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2 + hOffset,
        top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - ($eleDims.height / 2 + vOffset)
      };

    case 'reveal':
      return {
        left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,
        top: $eleDims.windowDims.offset.top + vOffset
      };

    case 'reveal full':
      return {
        left: $eleDims.windowDims.offset.left,
        top: $eleDims.windowDims.offset.top
      };
      break;

    default:
      return {
        left: Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_0__["rtl"])() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset : $anchorDims.offset.left + hOffset,
        top: $anchorDims.offset.top + $anchorDims.height + vOffset
      };
  }
}

function GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {
  var $eleDims = GetDimensions(element),
      $anchorDims = anchor ? GetDimensions(anchor) : null;
  var topVal, leftVal; // set position related attribute

  switch (position) {
    case 'top':
      topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);
      break;

    case 'bottom':
      topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;
      break;

    case 'left':
      leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);
      break;

    case 'right':
      leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;
      break;
  } // set alignment related attribute


  switch (position) {
    case 'top':
    case 'bottom':
      switch (alignment) {
        case 'left':
          leftVal = $anchorDims.offset.left + hOffset;
          break;

        case 'right':
          leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;
          break;

        case 'center':
          leftVal = isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2 + hOffset;
          break;
      }

      break;

    case 'right':
    case 'left':
      switch (alignment) {
        case 'bottom':
          topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;
          break;

        case 'top':
          topVal = $anchorDims.offset.top + vOffset;
          break;

        case 'center':
          topVal = $anchorDims.offset.top + vOffset + $anchorDims.height / 2 - $eleDims.height / 2;
          break;
      }

      break;
  }

  return {
    top: topVal,
    left: leftVal
  };
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.core.js":
/*!******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.core.js ***!
  \******************************************************************/
/*! exports provided: rtl, GetYoDigits, transitionend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rtl", function() { return rtl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetYoDigits", function() { return GetYoDigits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transitionend", function() { return transitionend; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);


 // Core Foundation Utilities, utilized in a number of places.

/**
 * Returns a boolean for RTL support
 */

function rtl() {
  return jquery__WEBPACK_IMPORTED_MODULE_0___default()('html').attr('dir') === 'rtl';
}
/**
 * returns a random base-36 uid with namespacing
 * @function
 * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
 * @param {String} namespace - name of plugin to be incorporated in uid, optional.
 * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
 * @returns {String} - unique id
 */


function GetYoDigits(length, namespace) {
  length = length || 6;
  return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? "-".concat(namespace) : '');
}

function transitionend($elem) {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  };
  var elem = document.createElement('div'),
      end;

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      end = transitions[t];
    }
  }

  if (end) {
    return end;
  } else {
    end = setTimeout(function () {
      $elem.triggerHandler('transitionend', [$elem]);
    }, 1);
    return 'transitionend';
  }
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.imageLoader.js":
/*!*************************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.imageLoader.js ***!
  \*************************************************************************/
/*! exports provided: onImagesLoaded */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onImagesLoaded", function() { return onImagesLoaded; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);



/**
 * Runs a callback function when images are fully loaded.
 * @param {Object} images - Image(s) to check if loaded.
 * @param {Func} callback - Function to execute when image is fully loaded.
 */

function onImagesLoaded(images, callback) {
  var self = this,
      unloaded = images.length;

  if (unloaded === 0) {
    callback();
  }

  images.each(function () {
    // Check if image is loaded
    if (this.complete && this.naturalWidth !== undefined) {
      singleImageLoaded();
    } else {
      // If the above check failed, simulate loading on detached element.
      var image = new Image(); // Still count image as loaded if it finalizes with an error.

      var events = "load.zf.images error.zf.images";
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(image).one(events, function me(event) {
        // Unbind the event listeners. We're using 'one' but only one of the two events will have fired.
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).off(events, me);
        singleImageLoaded();
      });
      image.src = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('src');
    }
  });

  function singleImageLoaded() {
    unloaded--;

    if (unloaded === 0) {
      callback();
    }
  }
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.keyboard.js":
/*!**********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.keyboard.js ***!
  \**********************************************************************/
/*! exports provided: Keyboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Keyboard", function() { return Keyboard; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");
/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/




var keyCodes = {
  9: 'TAB',
  13: 'ENTER',
  27: 'ESCAPE',
  32: 'SPACE',
  35: 'END',
  36: 'HOME',
  37: 'ARROW_LEFT',
  38: 'ARROW_UP',
  39: 'ARROW_RIGHT',
  40: 'ARROW_DOWN'
};
var commands = {}; // Functions pulled out to be referenceable from internals

function findFocusable($element) {
  if (!$element) {
    return false;
  }

  return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
    if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(':visible') || jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('tabindex') < 0) {
      return false;
    } //only have visible elements and those that have a tabindex greater or equal 0


    return true;
  });
}

function parseKey(event) {
  var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase(); // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events

  key = key.replace(/\W+/, '');
  if (event.shiftKey) key = "SHIFT_".concat(key);
  if (event.ctrlKey) key = "CTRL_".concat(key);
  if (event.altKey) key = "ALT_".concat(key); // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)

  key = key.replace(/_$/, '');
  return key;
}

var Keyboard = {
  keys: getKeyCodes(keyCodes),

  /**
   * Parses the (keyboard) event and returns a String that represents its key
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   * @param {Event} event - the event generated by the event handler
   * @return String key - String that represents the key pressed
   */
  parseKey: parseKey,

  /**
   * Handles the given (keyboard) event
   * @param {Event} event - the event generated by the event handler
   * @param {String} component - Foundation component's name, e.g. Slider or Reveal
   * @param {Objects} functions - collection of functions that are to be executed
   */
  handleKey: function handleKey(event, component, functions) {
    var commandList = commands[component],
        keyCode = this.parseKey(event),
        cmds,
        command,
        fn;
    if (!commandList) return console.warn('Component not defined!');

    if (typeof commandList.ltr === 'undefined') {
      // this component does not differentiate between ltr and rtl
      cmds = commandList; // use plain list
    } else {
      // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
      if (Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["rtl"])()) cmds = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, commandList.ltr, commandList.rtl);else cmds = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.extend({}, commandList.rtl, commandList.ltr);
    }

    command = cmds[keyCode];
    fn = functions[command];

    if (fn && typeof fn === 'function') {
      // execute function  if exists
      var returnValue = fn.apply();

      if (functions.handled || typeof functions.handled === 'function') {
        // execute function when event was handled
        functions.handled(returnValue);
      }
    } else {
      if (functions.unhandled || typeof functions.unhandled === 'function') {
        // execute function when event was not handled
        functions.unhandled();
      }
    }
  },

  /**
   * Finds all focusable elements within the given `$element`
   * @param {jQuery} $element - jQuery object to search within
   * @return {jQuery} $focusable - all focusable elements within `$element`
   */
  findFocusable: findFocusable,

  /**
   * Returns the component name name
   * @param {Object} component - Foundation component, e.g. Slider or Reveal
   * @return String componentName
   */
  register: function register(componentName, cmds) {
    commands[componentName] = cmds;
  },
  // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?
  //

  /**
   * Traps the focus in the given element.
   * @param  {jQuery} $element  jQuery object to trap the foucs into.
   */
  trapFocus: function trapFocus($element) {
    var $focusable = findFocusable($element),
        $firstFocusable = $focusable.eq(0),
        $lastFocusable = $focusable.eq(-1);
    $element.on('keydown.zf.trapfocus', function (event) {
      if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {
        event.preventDefault();
        $firstFocusable.focus();
      } else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {
        event.preventDefault();
        $lastFocusable.focus();
      }
    });
  },

  /**
   * Releases the trapped focus from the given element.
   * @param  {jQuery} $element  jQuery object to release the focus for.
   */
  releaseFocus: function releaseFocus($element) {
    $element.off('keydown.zf.trapfocus');
  }
};
/*
 * Constants for easier comparing.
 * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
 */

function getKeyCodes(kcs) {
  var k = {};

  for (var kc in kcs) {
    k[kcs[kc]] = kcs[kc];
  }

  return k;
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.mediaQuery.js":
/*!************************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.mediaQuery.js ***!
  \************************************************************************/
/*! exports provided: MediaQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaQuery", function() { return MediaQuery; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

 // Default set of media queries

var defaultQueries = {
  'default': 'only screen',
  landscape: 'only screen and (orientation: landscape)',
  portrait: 'only screen and (orientation: portrait)',
  retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
}; // matchMedia() polyfill - Test a CSS media type/query in JS.
// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license

var matchMedia = window.matchMedia || function () {
  'use strict'; // For browsers that support matchMedium api such as IE 9 and webkit

  var styleMedia = window.styleMedia || window.media; // For those that don't support matchMedium

  if (!styleMedia) {
    var style = document.createElement('style'),
        script = document.getElementsByTagName('script')[0],
        info = null;
    style.type = 'text/css';
    style.id = 'matchmediajs-test';
    script && script.parentNode && script.parentNode.insertBefore(style, script); // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers

    info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;
    styleMedia = {
      matchMedium: function matchMedium(media) {
        var text = "@media ".concat(media, "{ #matchmediajs-test { width: 1px; } }"); // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers

        if (style.styleSheet) {
          style.styleSheet.cssText = text;
        } else {
          style.textContent = text;
        } // Test if media query is true or false


        return info.width === '1px';
      }
    };
  }

  return function (media) {
    return {
      matches: styleMedia.matchMedium(media || 'all'),
      media: media || 'all'
    };
  };
}();

var MediaQuery = {
  queries: [],
  current: '',

  /**
   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
   * @function
   * @private
   */
  _init: function _init() {
    var self = this;
    var $meta = jquery__WEBPACK_IMPORTED_MODULE_0___default()('meta.foundation-mq');

    if (!$meta.length) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('<meta class="foundation-mq">').appendTo(document.head);
    }

    var extractedStyles = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.foundation-mq').css('font-family');
    var namedQueries;
    namedQueries = parseStyleToObject(extractedStyles);

    for (var key in namedQueries) {
      if (namedQueries.hasOwnProperty(key)) {
        self.queries.push({
          name: key,
          value: "only screen and (min-width: ".concat(namedQueries[key], ")")
        });
      }
    }

    this.current = this._getCurrentSize();

    this._watcher();
  },

  /**
   * Checks if the screen is at least as wide as a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
   */
  atLeast: function atLeast(size) {
    var query = this.get(size);

    if (query) {
      return matchMedia(query).matches;
    }

    return false;
  },

  /**
   * Checks if the screen matches to a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
   */
  is: function is(size) {
    size = size.trim().split(' ');

    if (size.length > 1 && size[1] === 'only') {
      if (size[0] === this._getCurrentSize()) return true;
    } else {
      return this.atLeast(size[0]);
    }

    return false;
  },

  /**
   * Gets the media query of a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to get.
   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
   */
  get: function get(size) {
    for (var i in this.queries) {
      if (this.queries.hasOwnProperty(i)) {
        var query = this.queries[i];
        if (size === query.name) return query.value;
      }
    }

    return null;
  },

  /**
   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
   * @function
   * @private
   * @returns {String} Name of the current breakpoint.
   */
  _getCurrentSize: function _getCurrentSize() {
    var matched;

    for (var i = 0; i < this.queries.length; i++) {
      var query = this.queries[i];

      if (matchMedia(query.value).matches) {
        matched = query;
      }
    }

    if (_typeof(matched) === 'object') {
      return matched.name;
    } else {
      return matched;
    }
  },

  /**
   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
   * @function
   * @private
   */
  _watcher: function _watcher() {
    var _this = this;

    jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {
      var newSize = _this._getCurrentSize(),
          currentSize = _this.current;

      if (newSize !== currentSize) {
        // Change the current media query
        _this.current = newSize; // Broadcast the media query change on the window

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
      }
    });
  }
}; // Thank you: https://github.com/sindresorhus/query-string

function parseStyleToObject(str) {
  var styleObject = {};

  if (typeof str !== 'string') {
    return styleObject;
  }

  str = str.trim().slice(1, -1); // browsers re-quote string style values

  if (!str) {
    return styleObject;
  }

  styleObject = str.split('&').reduce(function (ret, param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = parts[0];
    var val = parts[1];
    key = decodeURIComponent(key); // missing `=` should be `null`:
    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters

    val = val === undefined ? null : decodeURIComponent(val);

    if (!ret.hasOwnProperty(key)) {
      ret[key] = val;
    } else if (Array.isArray(ret[key])) {
      ret[key].push(val);
    } else {
      ret[key] = [ret[key], val];
    }

    return ret;
  }, {});
  return styleObject;
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.motion.js":
/*!********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.motion.js ***!
  \********************************************************************/
/*! exports provided: Move, Motion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Move", function() { return Move; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Motion", function() { return Motion; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.core */ "./node_modules/foundation-sites/js/foundation.util.core.js");




/**
 * Motion module.
 * @module foundation.motion
 */

var initClasses = ['mui-enter', 'mui-leave'];
var activeClasses = ['mui-enter-active', 'mui-leave-active'];
var Motion = {
  animateIn: function animateIn(element, animation, cb) {
    animate(true, element, animation, cb);
  },
  animateOut: function animateOut(element, animation, cb) {
    animate(false, element, animation, cb);
  }
};

function Move(duration, elem, fn) {
  var anim,
      prog,
      start = null; // console.log('called');

  if (duration === 0) {
    fn.apply(elem);
    elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
    return;
  }

  function move(ts) {
    if (!start) start = ts; // console.log(start, ts);

    prog = ts - start;
    fn.apply(elem);

    if (prog < duration) {
      anim = window.requestAnimationFrame(move, elem);
    } else {
      window.cancelAnimationFrame(anim);
      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
    }
  }

  anim = window.requestAnimationFrame(move);
}
/**
 * Animates an element in or out using a CSS transition class.
 * @function
 * @private
 * @param {Boolean} isIn - Defines if the animation is in or out.
 * @param {Object} element - jQuery or HTML object to animate.
 * @param {String} animation - CSS class to use.
 * @param {Function} cb - Callback to run when animation is finished.
 */


function animate(isIn, element, animation, cb) {
  element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).eq(0);
  if (!element.length) return;
  var initClass = isIn ? initClasses[0] : initClasses[1];
  var activeClass = isIn ? activeClasses[0] : activeClasses[1]; // Set up the animation

  reset();
  element.addClass(animation).css('transition', 'none');
  requestAnimationFrame(function () {
    element.addClass(initClass);
    if (isIn) element.show();
  }); // Start the animation

  requestAnimationFrame(function () {
    element[0].offsetWidth;
    element.css('transition', '').addClass(activeClass);
  }); // Clean up the animation when it finishes

  element.one(Object(_foundation_util_core__WEBPACK_IMPORTED_MODULE_1__["transitionend"])(element), finish); // Hides the element (for out animations), resets the element, and runs a callback

  function finish() {
    if (!isIn) element.hide();
    reset();
    if (cb) cb.apply(element);
  } // Resets transitions and removes motion-specific classes


  function reset() {
    element[0].style.transitionDuration = 0;
    element.removeClass("".concat(initClass, " ").concat(activeClass, " ").concat(animation));
  }
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.nest.js":
/*!******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.nest.js ***!
  \******************************************************************/
/*! exports provided: Nest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nest", function() { return Nest; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);



var Nest = {
  Feather: function Feather(menu) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';
    menu.attr('role', 'menubar');
    var items = menu.find('li').attr({
      'role': 'menuitem'
    }),
        subMenuClass = "is-".concat(type, "-submenu"),
        subItemClass = "".concat(subMenuClass, "-item"),
        hasSubClass = "is-".concat(type, "-submenu-parent"),
        applyAria = type !== 'accordion'; // Accordions handle their own ARIA attriutes.

    items.each(function () {
      var $item = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this),
          $sub = $item.children('ul');

      if ($sub.length) {
        $item.addClass(hasSubClass);
        $sub.addClass("submenu ".concat(subMenuClass)).attr({
          'data-submenu': ''
        });

        if (applyAria) {
          $item.attr({
            'aria-haspopup': true,
            'aria-label': $item.children('a:first').text()
          }); // Note:  Drilldowns behave differently in how they hide, and so need
          // additional attributes.  We should look if this possibly over-generalized
          // utility (Nest) is appropriate when we rework menus in 6.4

          if (type === 'drilldown') {
            $item.attr({
              'aria-expanded': false
            });
          }
        }

        $sub.addClass("submenu ".concat(subMenuClass)).attr({
          'data-submenu': '',
          'role': 'menu'
        });

        if (type === 'drilldown') {
          $sub.attr({
            'aria-hidden': true
          });
        }
      }

      if ($item.parent('[data-submenu]').length) {
        $item.addClass("is-submenu-item ".concat(subItemClass));
      }
    });
    return;
  },
  Burn: function Burn(menu, type) {
    var //items = menu.find('li'),
    subMenuClass = "is-".concat(type, "-submenu"),
        subItemClass = "".concat(subMenuClass, "-item"),
        hasSubClass = "is-".concat(type, "-submenu-parent");
    menu.find('>li, .menu, .menu > li').removeClass("".concat(subMenuClass, " ").concat(subItemClass, " ").concat(hasSubClass, " is-submenu-item submenu is-active")).removeAttr('data-submenu').css('display', '');
  }
};


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.timer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.timer.js ***!
  \*******************************************************************/
/*! exports provided: Timer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Timer", function() { return Timer; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);




function Timer(elem, options, cb) {
  var _this = this,
      duration = options.duration,
      //options is an object for easily adding features later.
  nameSpace = Object.keys(elem.data())[0] || 'timer',
      remain = -1,
      start,
      timer;

  this.isPaused = false;

  this.restart = function () {
    remain = -1;
    clearTimeout(timer);
    this.start();
  };

  this.start = function () {
    this.isPaused = false; // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.

    clearTimeout(timer);
    remain = remain <= 0 ? duration : remain;
    elem.data('paused', false);
    start = Date.now();
    timer = setTimeout(function () {
      if (options.infinite) {
        _this.restart(); //rerun the timer.

      }

      if (cb && typeof cb === 'function') {
        cb();
      }
    }, remain);
    elem.trigger("timerstart.zf.".concat(nameSpace));
  };

  this.pause = function () {
    this.isPaused = true; //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.

    clearTimeout(timer);
    elem.data('paused', true);
    var end = Date.now();
    remain = remain - (end - start);
    elem.trigger("timerpaused.zf.".concat(nameSpace));
  };
}



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.touch.js":
/*!*******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.touch.js ***!
  \*******************************************************************/
/*! exports provided: Touch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Touch", function() { return Touch; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************

var Touch = {};
var startPosX,
    startPosY,
    startTime,
    elapsedTime,
    isMoving = false;

function onTouchEnd() {
  //  alert(this);
  this.removeEventListener('touchmove', onTouchMove);
  this.removeEventListener('touchend', onTouchEnd);
  isMoving = false;
}

function onTouchMove(e) {
  if (jquery__WEBPACK_IMPORTED_MODULE_0___default.a.spotSwipe.preventDefault) {
    e.preventDefault();
  }

  if (isMoving) {
    var x = e.touches[0].pageX;
    var y = e.touches[0].pageY;
    var dx = startPosX - x;
    var dy = startPosY - y;
    var dir;
    elapsedTime = new Date().getTime() - startTime;

    if (Math.abs(dx) >= jquery__WEBPACK_IMPORTED_MODULE_0___default.a.spotSwipe.moveThreshold && elapsedTime <= jquery__WEBPACK_IMPORTED_MODULE_0___default.a.spotSwipe.timeThreshold) {
      dir = dx > 0 ? 'left' : 'right';
    } // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
    //   dir = dy > 0 ? 'down' : 'up';
    // }


    if (dir) {
      e.preventDefault();
      onTouchEnd.call(this);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).trigger('swipe', dir).trigger("swipe".concat(dir));
    }
  }
}

function onTouchStart(e) {
  if (e.touches.length == 1) {
    startPosX = e.touches[0].pageX;
    startPosY = e.touches[0].pageY;
    isMoving = true;
    startTime = new Date().getTime();
    this.addEventListener('touchmove', onTouchMove, false);
    this.addEventListener('touchend', onTouchEnd, false);
  }
}

function init() {
  this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
}

function teardown() {
  this.removeEventListener('touchstart', onTouchStart);
}

var SpotSwipe =
/*#__PURE__*/
function () {
  function SpotSwipe($) {
    _classCallCheck(this, SpotSwipe);

    this.version = '1.0.0';
    this.enabled = 'ontouchstart' in document.documentElement;
    this.preventDefault = false;
    this.moveThreshold = 75;
    this.timeThreshold = 200;
    this.$ = $;

    this._init();
  }

  _createClass(SpotSwipe, [{
    key: "_init",
    value: function _init() {
      var $ = this.$;
      $.event.special.swipe = {
        setup: init
      };
      $.each(['left', 'up', 'down', 'right'], function () {
        $.event.special["swipe".concat(this)] = {
          setup: function setup() {
            $(this).on('swipe', $.noop);
          }
        };
      });
    }
  }]);

  return SpotSwipe;
}();
/****************************************************
 * As far as I can tell, both setupSpotSwipe and    *
 * setupTouchHandler should be idempotent,          *
 * because they directly replace functions &        *
 * values, and do not add event handlers directly.  *
 ****************************************************/


Touch.setupSpotSwipe = function ($) {
  $.spotSwipe = new SpotSwipe($);
};
/****************************************************
 * Method for adding pseudo drag events to elements *
 ***************************************************/


Touch.setupTouchHandler = function ($) {
  $.fn.addTouch = function () {
    this.each(function (i, el) {
      $(el).bind('touchstart touchmove touchend touchcancel', function () {
        //we pass the original event object because the jQuery event
        //object is normalized to w3c specs and does not provide the TouchList
        handleTouch(event);
      });
    });

    var handleTouch = function handleTouch(event) {
      var touches = event.changedTouches,
          first = touches[0],
          eventTypes = {
        touchstart: 'mousedown',
        touchmove: 'mousemove',
        touchend: 'mouseup'
      },
          type = eventTypes[event.type],
          simulatedEvent;

      if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
        simulatedEvent = new window.MouseEvent(type, {
          'bubbles': true,
          'cancelable': true,
          'screenX': first.screenX,
          'screenY': first.screenY,
          'clientX': first.clientX,
          'clientY': first.clientY
        });
      } else {
        simulatedEvent = document.createEvent('MouseEvent');
        simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0
        /*left*/
        , null);
      }

      first.target.dispatchEvent(simulatedEvent);
    };
  };
};

Touch.init = function ($) {
  if (typeof $.spotSwipe === 'undefined') {
    Touch.setupSpotSwipe($);
    Touch.setupTouchHandler($);
  }
};



/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation.util.triggers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation.util.triggers.js ***!
  \**********************************************************************/
/*! exports provided: Triggers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Triggers", function() { return Triggers; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _foundation_util_motion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation.util.motion */ "./node_modules/foundation-sites/js/foundation.util.motion.js");


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }




var MutationObserver = function () {
  var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];

  for (var i = 0; i < prefixes.length; i++) {
    if ("".concat(prefixes[i], "MutationObserver") in window) {
      return window["".concat(prefixes[i], "MutationObserver")];
    }
  }

  return false;
}();

var triggers = function triggers(el, type) {
  el.data(type).split(' ').forEach(function (id) {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(id))[type === 'close' ? 'trigger' : 'triggerHandler']("".concat(type, ".zf.trigger"), [el]);
  });
};

var Triggers = {
  Listeners: {
    Basic: {},
    Global: {}
  },
  Initializers: {}
};
Triggers.Listeners.Basic = {
  openListener: function openListener() {
    triggers(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this), 'open');
  },
  closeListener: function closeListener() {
    var id = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('close');

    if (id) {
      triggers(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this), 'close');
    } else {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).trigger('close.zf.trigger');
    }
  },
  toggleListener: function toggleListener() {
    var id = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('toggle');

    if (id) {
      triggers(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this), 'toggle');
    } else {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).trigger('toggle.zf.trigger');
    }
  },
  closeableListener: function closeableListener(e) {
    e.stopPropagation();
    var animation = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('closable');

    if (animation !== '') {
      _foundation_util_motion__WEBPACK_IMPORTED_MODULE_1__["Motion"].animateOut(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this), animation, function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).trigger('closed.zf');
      });
    } else {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).fadeOut().trigger('closed.zf');
    }
  },
  toggleFocusListener: function toggleFocusListener() {
    var id = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('toggle-focus');
    jquery__WEBPACK_IMPORTED_MODULE_0___default()("#".concat(id)).triggerHandler('toggle.zf.trigger', [jquery__WEBPACK_IMPORTED_MODULE_0___default()(this)]);
  }
}; // Elements with [data-open] will reveal a plugin that supports it when clicked.

Triggers.Initializers.addOpenListener = function ($elem) {
  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
  $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
}; // Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.


Triggers.Initializers.addCloseListener = function ($elem) {
  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
  $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
}; // Elements with [data-toggle] will toggle a plugin that supports it when clicked.


Triggers.Initializers.addToggleListener = function ($elem) {
  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
  $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
}; // Elements with [data-closable] will respond to close.zf.trigger events.


Triggers.Initializers.addCloseableListener = function ($elem) {
  $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
  $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
}; // Elements with [data-toggle-focus] will respond to coming in and out of focus


Triggers.Initializers.addToggleFocusListener = function ($elem) {
  $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
  $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
}; // More Global/complex listeners and triggers


Triggers.Listeners.Global = {
  resizeListener: function resizeListener($nodes) {
    if (!MutationObserver) {
      //fallback for IE 9
      $nodes.each(function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).triggerHandler('resizeme.zf.trigger');
      });
    } //trigger all listening elements and signal a resize event


    $nodes.attr('data-events', "resize");
  },
  scrollListener: function scrollListener($nodes) {
    if (!MutationObserver) {
      //fallback for IE 9
      $nodes.each(function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).triggerHandler('scrollme.zf.trigger');
      });
    } //trigger all listening elements and signal a scroll event


    $nodes.attr('data-events', "scroll");
  },
  closeMeListener: function closeMeListener(e, pluginId) {
    var plugin = e.namespace.split('.')[0];
    var plugins = jquery__WEBPACK_IMPORTED_MODULE_0___default()("[data-".concat(plugin, "]")).not("[data-yeti-box=\"".concat(pluginId, "\"]"));
    plugins.each(function () {
      var _this = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);

      _this.triggerHandler('close.zf.trigger', [_this]);
    });
  } // Global, parses whole document.

};

Triggers.Initializers.addClosemeListener = function (pluginName) {
  var yetiBoxes = jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-yeti-box]'),
      plugNames = ['dropdown', 'tooltip', 'reveal'];

  if (pluginName) {
    if (typeof pluginName === 'string') {
      plugNames.push(pluginName);
    } else if (_typeof(pluginName) === 'object' && typeof pluginName[0] === 'string') {
      plugNames.concat(pluginName);
    } else {
      console.error('Plugin names must be strings');
    }
  }

  if (yetiBoxes.length) {
    var listeners = plugNames.map(function (name) {
      return "closeme.zf.".concat(name);
    }).join(' ');
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
  }
};

function debounceGlobalListener(debounce, trigger, listener) {
  var timer,
      args = Array.prototype.slice.call(arguments, 3);
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off(trigger).on(trigger, function (e) {
    if (timer) {
      clearTimeout(timer);
    }

    timer = setTimeout(function () {
      listener.apply(null, args);
    }, debounce || 10); //default time to emit scroll event
  });
}

Triggers.Initializers.addResizeListener = function (debounce) {
  var $nodes = jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-resize]');

  if ($nodes.length) {
    debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
  }
};

Triggers.Initializers.addScrollListener = function (debounce) {
  var $nodes = jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-scroll]');

  if ($nodes.length) {
    debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
  }
};

Triggers.Initializers.addMutationEventsListener = function ($elem) {
  if (!MutationObserver) {
    return false;
  }

  var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]'); //element callback

  var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
    var $target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(mutationRecordsList[0].target); //trigger the event handler for the element depending on type

    switch (mutationRecordsList[0].type) {
      case "attributes":
        if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
        }

        if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
          $target.triggerHandler('resizeme.zf.trigger', [$target]);
        }

        if (mutationRecordsList[0].attributeName === "style") {
          $target.closest("[data-mutate]").attr("data-events", "mutate");
          $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
        }

        break;

      case "childList":
        $target.closest("[data-mutate]").attr("data-events", "mutate");
        $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
        break;

      default:
        return false;
      //nothing
    }
  };

  if ($nodes.length) {
    //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
    for (var i = 0; i <= $nodes.length - 1; i++) {
      var elementObserver = new MutationObserver(listeningElementsMutation);
      elementObserver.observe($nodes[i], {
        attributes: true,
        childList: true,
        characterData: false,
        subtree: true,
        attributeFilter: ["data-events", "style"]
      });
    }
  }
};

Triggers.Initializers.addSimpleListeners = function () {
  var $document = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document);
  Triggers.Initializers.addOpenListener($document);
  Triggers.Initializers.addCloseListener($document);
  Triggers.Initializers.addToggleListener($document);
  Triggers.Initializers.addCloseableListener($document);
  Triggers.Initializers.addToggleFocusListener($document);
};

Triggers.Initializers.addGlobalListeners = function () {
  var $document = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document);
  Triggers.Initializers.addMutationEventsListener($document);
  Triggers.Initializers.addResizeListener();
  Triggers.Initializers.addScrollListener();
  Triggers.Initializers.addClosemeListener();
};

Triggers.init = function ($, Foundation) {
  if (typeof $.triggersInitialized === 'undefined') {
    var $document = $(document);

    if (document.readyState === "complete") {
      Triggers.Initializers.addSimpleListeners();
      Triggers.Initializers.addGlobalListeners();
    } else {
      $(window).on('load', function () {
        Triggers.Initializers.addSimpleListeners();
        Triggers.Initializers.addGlobalListeners();
      });
    }

    $.triggersInitialized = true;
  }

  if (Foundation) {
    Foundation.Triggers = Triggers; // Legacy included to be backwards compatible for now.

    Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
  }
};



/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
(function (global, factory) {
  "use strict";

  if (( false ? undefined : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }

      return factory(w);
    };
  } else {
    factory(global);
  } // Pass this if window is not defined yet

})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var document = window.document;
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    return typeof obj === "function" && typeof obj.nodeType !== "number";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var preservedScriptAttributes = {
    type: true,
    src: true,
    noModule: true
  };

  function DOMEval(code, doc, node) {
    doc = doc || document;
    var i,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        if (node[i]) {
          script[i] = node[i];
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module


  var version = "3.3.1",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  },
      // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name]; // Prevent never-ending loop

          if (target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && Array.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            } // Never move original objects, clone them


            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      /* eslint-disable no-unused-vars */
      // See https://github.com/eslint/eslint/issues/6125
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a global context
    globalEval: function globalEval(code) {
      DOMEval(code);
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // Support: Android <=4.0 only
    trim: function trim(text) {
      return text == null ? "" : (text + "").replace(rtrim, "");
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return concat.apply([], ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.3.3
   * https://sizzlejs.com/
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license
   * http://jquery.org/license
   *
   * Date: 2016-08-08
   */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
        funescape = function funescape(_, escaped, escapedWhitespace) {
      var high = "0x" + escaped - 0x10000; // NaN means non-codepoint
      // Support: Firefox<24
      // Workaround erroneous numeric interpretation of +"0x"

      return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
      String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function fcssescape(ch, asCodePoint) {
      if (asCodePoint) {
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if (ch === "\0") {
          return "\uFFFD";
        } // Control characters and (dependent upon position) numbers get escaped as code points


        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
      } // Other potentially-special ASCII characters get backslash-escaped


      return "\\" + ch;
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    },
        disabledAncestor = addCombinator(function (elem) {
      return elem.disabled === true && ("form" in elem || "label" in elem);
    }, {
      dir: "parentNode",
      next: "legend"
    }); // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          push_native.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }

        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            if (nodeType !== 1) {
              newContext = context;
              newSelector = selector; // qSA looks outside Element context, which is not what we want
              // Thanks to Andrew Dupont for this workaround technique
              // Support: IE <=8
              // Exclude object elements
            } else if (context.nodeName.toLowerCase() !== "object") {
              // Capture the context ID, setting it first if necessary
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rcssescape, fcssescape);
              } else {
                context.setAttribute("id", nid = expando);
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;

              while (i--) {
                groups[i] = "#" + nid + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(","); // Expand context for sibling selectors

              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            }

            if (newSelector) {
              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {} finally {
                if (nid === expando) {
                  context.removeAttribute("id");
                }
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */


    function assert(fn) {
      var el = document.createElement("fieldset");

      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        } // release memory in IE


        el = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */


    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            } // Support: IE 6 - 11
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors


            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

            /* jshint -W018 */
            elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
          }

          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        } // Remaining elements are neither :enabled nor :disabled


        return false;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      // documentElement is verified for cases where it doesn't yet exist
      // (such as loading iframes in IE - #4833)
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName !== "HTML" : false;
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected

      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9-11, Edge
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

      if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 11, Edge
        if (subWindow.addEventListener) {
          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (subWindow.attachEvent) {
          subWindow.attachEvent("onunload", unloadHandler);
        }
      }
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)


      support.attributes = assert(function (el) {
        el.className = "i";
        return !el.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (el) {
        el.appendChild(document.createComment(""));
        return !el.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (el) {
        docElem.appendChild(el).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID filter and find

      if (support.getById) {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };

        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        }; // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut


        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
                i,
                elems,
                elem = context.getElementById(id);

            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              } // Fall back on getElementsByName


              elems = context.getElementsByName(id);
              i = 0;

              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");

                if (node && node.value === id) {
                  return [elem];
                }
              }
            }

            return [];
          }
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See https://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (el) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // https://bugs.jquery.com/ticket/12359
          docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (el.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!el.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!el.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibling-combinator selector` fails


          if (!el.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          }
        });
        assert(function (el) {
          el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment

          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          el.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (el.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (el.querySelectorAll(":enabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: IE9-11+
          // IE's :disabled selector does not pick up the children of disabled fieldsets


          docElem.appendChild(el).disabled = true;

          if (el.querySelectorAll(":disabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Opera 10-11 does not throw on post-comma invalid pseudos


          el.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (el) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(el, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document


        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
            return -1;
          }

          if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      } // Make sure that attribute selectors are quoted


      expr = expr.replace(rattributeQuotes, "='$1']");

      if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {}
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.escape = function (sel) {
      return (sel + "").replace(rcssescape, fcssescape);
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
          };
        },
        "CHILD": function CHILD(type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function root(elem) {
          return elem === docElem;
        },
        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": createDisabledPseudo(false),
        "disabled": createDisabledPseudo(true),
        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }

        return false;
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          outermostContext = context === document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0;

            if (!context && elem.ownerDocument !== document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (el) {
      el.innerHTML = "<a href='#'></a>";
      return el.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (el) {
      el.innerHTML = "<input/>";
      el.firstChild.setAttribute("value", "");
      return el.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (el) {
      return el.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var _siblings = function siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  ;
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (nodeName(elem, "iframe")) {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = _locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function _catch(fn) {
          return _promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function pipe()
        /* fnDone, fnFail, fnProgress */
        {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function then(onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = _slice.call(arguments),
          // the master Deferred
      master = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function updateFunc(i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

          if (! --remaining) {
            master.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return master.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), master.reject);
      }

      return master.promise();
    }
  }); // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  }; // The deferred used on DOM ready


  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    .catch(function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  } // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function


  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  }; // Matches dashed string for camelizing


  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];

  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
  };

  var swap = function swap(elem, options, callback, args) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.apply(elem, args || []); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)

  var wrapMap = {
    // Support: IE <=9 only
    option: [1, "<select multiple='multiple'>", "</select>"],
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  }; // Support: IE <=9 only

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        contains,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      contains = jQuery.contains(elem.ownerDocument, elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (contains) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  })();

  var documentElement = document.documentElement;
  var rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 only
  // See #13393 for more info


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)

      if (!elemData) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      // Make a writable jQuery.Event from the native event object
      var event = jQuery.event.fix(nativeEvent);
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // Triggered event must either 1) have no namespace, or 2) have namespace(s)
          // a subset or equal to those in the bound event (both can have no namespace).
          if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      focus: {
        // Fire native event if possible so blur/focus sequence is correct
        trigger: function trigger() {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function trigger() {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: "focusout"
      },
      click: {
        // For checkbox, fire native event so checked state will be right
        trigger: function trigger() {
          if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
            this.click();
            return false;
          }
        },
        // For cross-browser consistency, don't fire native .click() on links
        _default: function _default(event) {
          return nodeName(event.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: function which(event) {
      var button = event.button; // Add which for key events

      if (event.which == null && rkeyEvent.test(event.type)) {
        return event.charCode != null ? event.charCode : event.keyCode;
      } // Add which for click: 1 === left; 2 === middle; 3 === right


      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
        if (button & 1) {
          return 1;
        }

        if (button & 2) {
          return 3;
        }

        if (button & 4) {
          return 2;
        }

        return 0;
      }

      return event.which;
    }
  }, jQuery.event.addProp); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var
  /* eslint-disable max-len */
  // See https://github.com/eslint/eslint/issues/3229
  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

  /* eslint-enable */
  // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.access(src);
      pdataCur = dataPriv.set(dest, pdataOld);
      events = pdataOld.events;

      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = concat.apply([], args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl) {
                  jQuery._evalUrl(node.src);
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), doc, node);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && jQuery.contains(node.ownerDocument, node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html.replace(rxhtmlTag, "<$1></$2>");
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = jQuery.contains(elem.ownerDocument, elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)

      div.style.position = "absolute";
      scrollboxSizeVal = div.offsetWidth === 36 || "absolute";
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rcustomProp = /^--/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  },
      cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document.createElement("div").style; // Return a css property mapped to a potentially vendor prefixed property

  function vendorPropName(name) {
    // Shortcut for names that are not vendor prefixed
    if (name in emptyStyle) {
      return name;
    } // Check for vendor prefixed names


    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a property mapped along what jQuery.cssProps suggests or to
  // a vendor prefixed property.


  function finalPropName(name) {
    var ret = jQuery.cssProps[name];

    if (!ret) {
      ret = jQuery.cssProps[name] = vendorPropName(name) || name;
    }

    return ret;
  }

  function setPositiveNumber(elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5));
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        val = curCSS(elem, dimension, styles),
        isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox; // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Check for style in case a browser which returns unreliable values
    // for getComputedStyle silently falls back to the reliable elem.style


    valueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]); // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

    if (val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") {
      val = elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)]; // offsetWidth/offsetHeight provide border-box values

      valueIsBorderBox = true;
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)


        if (type === "number") {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles); // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && support.scrollboxSize() === styles.position) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }

  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }

      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }

      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result; // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.

        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        } // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.


        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  }; // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

  jQuery.fx.step = {};
  var fxNow,
      inProgress,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  } // Animations created synchronously will run synchronously


  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  } // Generate parameters to create a standard animation


  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = {
      height: type
    }; // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right

    includeWidth = includeWidth ? 1 : 0;

    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;

    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
        value,
        toggle,
        hooks,
        oldfire,
        propTween,
        restoreDisplay,
        display,
        isBox = "width" in props || "height" in props,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHiddenWithinTree(elem),
        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");

      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;

        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }

      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;

          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    } // Detect show/hide animations


    for (prop in props) {
      value = props[prop];

      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";

        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true; // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }

        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    } // Bail out if this is a no-op like .hide().hide()


    propTween = !jQuery.isEmptyObject(props);

    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    } // Restrict "overflow" and "display" styles during box animations


    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

      restoreDisplay = dataShow && dataShow.display;

      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }

      display = jQuery.css(elem, "display");

      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      } // Animate inline elements as inline-block


      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });

            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }

          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    } // Implement show/hide animations


    propTween = false;

    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


        if (toggle) {
          dataShow.hidden = !hidden;
        } // Show elements before animating them


        if (hidden) {
          showHide([elem], true);
        }
        /* eslint-disable no-loop-func */


        anim.done(function () {
          /* eslint-enable no-loop-func */
          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }

          dataPriv.remove(elem, "fxshow");

          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      } // Per-property setup


      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;

        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];

      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];

      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"

        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {
      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function tick() {
      if (stopped) {
        return false;
      }

      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

      if (percent < 1 && length) {
        return remaining;
      } // If this was an empty animation, synthesize a final progress notification


      if (!length) {
        deferred.notifyWith(elem, [animation, 1, 0]);
      } // Resolve the animation and report its conclusion


      deferred.resolveWith(elem, [animation]);
      return false;
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function createTween(prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function stop(gotoEnd) {
        var index = 0,
            // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;

        if (stopped) {
          return this;
        }

        stopped = true;

        for (; index < length; index++) {
          animation.tweens[index].run(1);
        } // Resolve when we played the last frame; otherwise, reject


        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }

        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }

        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    } // Attach callbacks from options


    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    }; // Go to the end state if fx are off

    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    } // Normalize opt.queue - true/undefined/null -> "fx"


    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    } // Queueing


    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function doAnimation() {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };

      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }

      if (clearQueue && type !== false) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        } // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.


        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }

      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0; // Enable finishing flag on private data

        data.finish = true; // Empty the queue first

        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        } // Look for any active animations, and finish them


        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        } // Look for any animations in the old queue and finish them


        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        } // Turn off finishing flag


        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (i, name) {
    var cssFn = jQuery.fn[name];

    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  }); // Generate shortcuts for custom animations

  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];

  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;
    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }

    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  }; // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  }); // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var type = _typeof(value),
          isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function stopPropagationCallback(e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  }); // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var location = window.location;
  var nonce = Date.now();
  var rquery = /\?/; // Cross-browser xml parsing

  jQuery.parseXML = function (data) {
    var xml;

    if (!data || typeof data !== "string") {
      return null;
    } // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.


    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {
      xml = undefined;
    }

    if (!xml || xml.getElementsByTagName("parsererror").length) {
      jQuery.error("Invalid XML: " + data);
    }

    return xml;
  };

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    }; // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
      rhash = /#.*$/,
      rantiCache = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
      // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},
      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),
      // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  } // Base inspection function for prefilters and transports


  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  } // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887


  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }

    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */


  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

    while (dataTypes[0] === "*") {
      dataTypes.shift();

      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    } // Check if we're dealing with a known content-type


    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    } // Check to see if we have a response for the expected dataType


    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }

        if (!firstDataType) {
          firstDataType = type;
        }
      } // Or just use first one


      finalDataType = finalDataType || firstDataType;
    } // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response


    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }

      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */


  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift(); // Convert to each sequential dataType

    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      } // Apply the dataFilter if provided


      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev; // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");

              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }

                  break;
                }
              }
            }
          } // Apply converter (if not an equivalence)


          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return {
      state: "success",
      data: response
    };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      } // Force options to be an object


      options = options || {};

      var transport,
          // URL without anti-cache param
      cacheURL,
          // Response headers
      responseHeadersString,
          responseHeaders,
          // timeout handle
      timeoutTimer,
          // Url cleanup var
      urlAnchor,
          // Request state (becomes false upon send and true upon completion)
      completed,
          // To know if global events are to be dispatched
      fireGlobals,
          // Loop variable
      i,
          // uncached part of the url
      uncached,
          // Create the final options object
      s = jQuery.ajaxSetup({}, options),
          // Callbacks context
      callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
          // Status-dependent callbacks
      _statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},
          // Default abort message
      strAbort = "canceled",
          // Fake xhr
      jqXHR = {
        readyState: 0,
        // Builds headers hashtable if needed
        getResponseHeader: function getResponseHeader(key) {
          var match;

          if (completed) {
            if (!responseHeaders) {
              responseHeaders = {};

              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase()] = match[2];
              }
            }

            match = responseHeaders[key.toLowerCase()];
          }

          return match == null ? null : match;
        },
        // Raw string
        getAllResponseHeaders: function getAllResponseHeaders() {
          return completed ? responseHeadersString : null;
        },
        // Caches the header
        setRequestHeader: function setRequestHeader(name, value) {
          if (completed == null) {
            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
            requestHeaders[name] = value;
          }

          return this;
        },
        // Overrides response content-type header
        overrideMimeType: function overrideMimeType(type) {
          if (completed == null) {
            s.mimeType = type;
          }

          return this;
        },
        // Status-dependent callbacks
        statusCode: function statusCode(map) {
          var code;

          if (map) {
            if (completed) {
              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            } else {
              // Lazy-add the new callbacks in a way that preserves old ones
              for (code in map) {
                _statusCode[code] = [_statusCode[code], map[code]];
              }
            }
          }

          return this;
        },
        // Cancel the request
        abort: function abort(statusText) {
          var finalText = statusText || strAbort;

          if (transport) {
            transport.abort(finalText);
          }

          done(0, finalText);
          return this;
        }
      }; // Attach deferreds


      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available

      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/

        try {
          urlAnchor.href = s.url; // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative

          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      } // Convert data if not already a string


      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      } // Apply prefilters


      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

      if (completed) {
        return jqXHR;
      } // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      } // Uppercase the type


      s.type = s.type.toUpperCase(); // Determine if request has content

      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation

      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

          delete s.data;
        } // Add or update anti-cache param if needed


        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
        } // Put hash and anti-cache on the URL that will be requested (gh-1732)


        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }

        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      } // Set the correct header, if data is being sent


      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      } // Set the Accepts header for the server, depending on the dataType


      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      } // Allow custom headers/mimetypes and early abort


      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      } // Aborting is no longer a cancellation


      strAbort = "abort"; // Install callbacks on deferreds

      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error); // Get transport

      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1; // Send global event

        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        } // If request was aborted inside ajaxSend, stop there


        if (completed) {
          return jqXHR;
        } // Timeout


        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          } // Propagate others as results


          done(-1, e);
        }
      } // Callback for when everything is done


      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText; // Ignore repeat invocations

        if (completed) {
          return;
        }

        completed = true; // Clear timeout if it exists

        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        } // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)


        transport = undefined; // Cache response headers

        responseHeadersString = headers || ""; // Set readyState

        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        } // Convert no matter what (that way responseXXX fields are always set)


        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");

            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }

            modified = jqXHR.getResponseHeader("etag");

            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          } // if no content


          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent"; // if not modified
          } else if (status === 304) {
            statusText = "notmodified"; // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;

          if (status || !statusText) {
            statusText = "error";

            if (status < 0) {
              status = 0;
            }
          }
        } // Set data for the fake xhr object


        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        } // Status-dependent callbacks


        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        } // Complete


        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      } // The url can be an options object (which then must have .url)


      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });

  jQuery._evalUrl = function (url) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      "throws": true
    });
  };

  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
    // File protocol always yields status code 0, assume 200
    0: 200,
    // Support: IE <=9 only
    // #1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          } // Callback


          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete( // File: protocol always yields status 0; see #8605, #14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          }; // Listen to events


          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts

          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          } // Create the abort callback


          _callback = _callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  }); // Install script dataType

  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  }); // Handle cache's special case and crossDomain

  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }

    if (s.crossDomain) {
      s.type = "GET";
    }
  }); // Bind script tag hack transport

  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain requests
    if (s.crossDomain) {
      var script, _callback2;

      return {
        send: function send(_, complete) {
          script = jQuery("<script>").prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;

            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          }); // Use native DOM manipulation to avoid our domManip AJAX trickery

          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
      this[callback] = true;
      return callback;
    }
  }); // Detect, normalize options and install callbacks for jsonp requests

  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      } // Use data converter to retrieve json after script execution


      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }

        return responseContainer[0];
      }; // Force json dataType


      s.dataTypes[0] = "json"; // Install callback

      overwritten = window[callbackName];

      window[callbackName] = function () {
        responseContainer = arguments;
      }; // Clean-up function (fires after converters)


      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        } // Save back as free


        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

          oldCallbacks.push(callbackName);
        } // Call if it was a function and we have a response


        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      }); // Delegate to script

      return "script";
    }
  }); // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337

  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }(); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string


  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };
  /**
   * Load a url into a page
   */


  jQuery.fn.load = function (url, params, callback) {
    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    } // If it's a function


    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined; // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    } // If we have elements to modify, make the request


    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  }; // Attach a bunch of functions for handling common AJAX events


  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    }
  }); // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = _slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  }; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon


  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return jQuery;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)


  if (!noGlobal) {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/slick-carousel/slick/slick.js":
/*!****************************************************!*\
  !*** ./node_modules/slick-carousel/slick/slick.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.8.1
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */

/* global window, document, define, jQuery, setInterval, clearInterval */
;

(function (factory) {
  'use strict';

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(function ($) {
  'use strict';

  var Slick = window.Slick || {};

  Slick = function () {
    var instanceUid = 0;

    function Slick(element, settings) {
      var _ = this,
          dataSettings;

      _.defaults = {
        accessibility: true,
        adaptiveHeight: false,
        appendArrows: $(element),
        appendDots: $(element),
        arrows: true,
        asNavFor: null,
        prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
        nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
        autoplay: false,
        autoplaySpeed: 3000,
        centerMode: false,
        centerPadding: '50px',
        cssEase: 'ease',
        customPaging: function customPaging(slider, i) {
          return $('<button type="button" />').text(i + 1);
        },
        dots: false,
        dotsClass: 'slick-dots',
        draggable: true,
        easing: 'linear',
        edgeFriction: 0.35,
        fade: false,
        focusOnSelect: false,
        focusOnChange: false,
        infinite: true,
        initialSlide: 0,
        lazyLoad: 'ondemand',
        mobileFirst: false,
        pauseOnHover: true,
        pauseOnFocus: true,
        pauseOnDotsHover: false,
        respondTo: 'window',
        responsive: null,
        rows: 1,
        rtl: false,
        slide: '',
        slidesPerRow: 1,
        slidesToShow: 1,
        slidesToScroll: 1,
        speed: 500,
        swipe: true,
        swipeToSlide: false,
        touchMove: true,
        touchThreshold: 5,
        useCSS: true,
        useTransform: true,
        variableWidth: false,
        vertical: false,
        verticalSwiping: false,
        waitForAnimate: true,
        zIndex: 1000
      };
      _.initials = {
        animating: false,
        dragging: false,
        autoPlayTimer: null,
        currentDirection: 0,
        currentLeft: null,
        currentSlide: 0,
        direction: 1,
        $dots: null,
        listWidth: null,
        listHeight: null,
        loadIndex: 0,
        $nextArrow: null,
        $prevArrow: null,
        scrolling: false,
        slideCount: null,
        slideWidth: null,
        $slideTrack: null,
        $slides: null,
        sliding: false,
        slideOffset: 0,
        swipeLeft: null,
        swiping: false,
        $list: null,
        touchObject: {},
        transformsEnabled: false,
        unslicked: false
      };
      $.extend(_, _.initials);
      _.activeBreakpoint = null;
      _.animType = null;
      _.animProp = null;
      _.breakpoints = [];
      _.breakpointSettings = [];
      _.cssTransitions = false;
      _.focussed = false;
      _.interrupted = false;
      _.hidden = 'hidden';
      _.paused = true;
      _.positionProp = null;
      _.respondTo = null;
      _.rowCount = 1;
      _.shouldClick = true;
      _.$slider = $(element);
      _.$slidesCache = null;
      _.transformType = null;
      _.transitionType = null;
      _.visibilityChange = 'visibilitychange';
      _.windowWidth = 0;
      _.windowTimer = null;
      dataSettings = $(element).data('slick') || {};
      _.options = $.extend({}, _.defaults, settings, dataSettings);
      _.currentSlide = _.options.initialSlide;
      _.originalSettings = _.options;

      if (typeof document.mozHidden !== 'undefined') {
        _.hidden = 'mozHidden';
        _.visibilityChange = 'mozvisibilitychange';
      } else if (typeof document.webkitHidden !== 'undefined') {
        _.hidden = 'webkitHidden';
        _.visibilityChange = 'webkitvisibilitychange';
      }

      _.autoPlay = $.proxy(_.autoPlay, _);
      _.autoPlayClear = $.proxy(_.autoPlayClear, _);
      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
      _.changeSlide = $.proxy(_.changeSlide, _);
      _.clickHandler = $.proxy(_.clickHandler, _);
      _.selectHandler = $.proxy(_.selectHandler, _);
      _.setPosition = $.proxy(_.setPosition, _);
      _.swipeHandler = $.proxy(_.swipeHandler, _);
      _.dragHandler = $.proxy(_.dragHandler, _);
      _.keyHandler = $.proxy(_.keyHandler, _);
      _.instanceUid = instanceUid++; // A simple way to check for HTML strings
      // Strict HTML recognition (must start with <)
      // Extracted from jQuery v1.11 source

      _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

      _.registerBreakpoints();

      _.init(true);
    }

    return Slick;
  }();

  Slick.prototype.activateADA = function () {
    var _ = this;

    _.$slideTrack.find('.slick-active').attr({
      'aria-hidden': 'false'
    }).find('a, input, button, select').attr({
      'tabindex': '0'
    });
  };

  Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {
    var _ = this;

    if (typeof index === 'boolean') {
      addBefore = index;
      index = null;
    } else if (index < 0 || index >= _.slideCount) {
      return false;
    }

    _.unload();

    if (typeof index === 'number') {
      if (index === 0 && _.$slides.length === 0) {
        $(markup).appendTo(_.$slideTrack);
      } else if (addBefore) {
        $(markup).insertBefore(_.$slides.eq(index));
      } else {
        $(markup).insertAfter(_.$slides.eq(index));
      }
    } else {
      if (addBefore === true) {
        $(markup).prependTo(_.$slideTrack);
      } else {
        $(markup).appendTo(_.$slideTrack);
      }
    }

    _.$slides = _.$slideTrack.children(this.options.slide);

    _.$slideTrack.children(this.options.slide).detach();

    _.$slideTrack.append(_.$slides);

    _.$slides.each(function (index, element) {
      $(element).attr('data-slick-index', index);
    });

    _.$slidesCache = _.$slides;

    _.reinit();
  };

  Slick.prototype.animateHeight = function () {
    var _ = this;

    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);

      _.$list.animate({
        height: targetHeight
      }, _.options.speed);
    }
  };

  Slick.prototype.animateSlide = function (targetLeft, callback) {
    var animProps = {},
        _ = this;

    _.animateHeight();

    if (_.options.rtl === true && _.options.vertical === false) {
      targetLeft = -targetLeft;
    }

    if (_.transformsEnabled === false) {
      if (_.options.vertical === false) {
        _.$slideTrack.animate({
          left: targetLeft
        }, _.options.speed, _.options.easing, callback);
      } else {
        _.$slideTrack.animate({
          top: targetLeft
        }, _.options.speed, _.options.easing, callback);
      }
    } else {
      if (_.cssTransitions === false) {
        if (_.options.rtl === true) {
          _.currentLeft = -_.currentLeft;
        }

        $({
          animStart: _.currentLeft
        }).animate({
          animStart: targetLeft
        }, {
          duration: _.options.speed,
          easing: _.options.easing,
          step: function step(now) {
            now = Math.ceil(now);

            if (_.options.vertical === false) {
              animProps[_.animType] = 'translate(' + now + 'px, 0px)';

              _.$slideTrack.css(animProps);
            } else {
              animProps[_.animType] = 'translate(0px,' + now + 'px)';

              _.$slideTrack.css(animProps);
            }
          },
          complete: function complete() {
            if (callback) {
              callback.call();
            }
          }
        });
      } else {
        _.applyTransition();

        targetLeft = Math.ceil(targetLeft);

        if (_.options.vertical === false) {
          animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
        } else {
          animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
        }

        _.$slideTrack.css(animProps);

        if (callback) {
          setTimeout(function () {
            _.disableTransition();

            callback.call();
          }, _.options.speed);
        }
      }
    }
  };

  Slick.prototype.getNavTarget = function () {
    var _ = this,
        asNavFor = _.options.asNavFor;

    if (asNavFor && asNavFor !== null) {
      asNavFor = $(asNavFor).not(_.$slider);
    }

    return asNavFor;
  };

  Slick.prototype.asNavFor = function (index) {
    var _ = this,
        asNavFor = _.getNavTarget();

    if (asNavFor !== null && _typeof(asNavFor) === 'object') {
      asNavFor.each(function () {
        var target = $(this).slick('getSlick');

        if (!target.unslicked) {
          target.slideHandler(index, true);
        }
      });
    }
  };

  Slick.prototype.applyTransition = function (slide) {
    var _ = this,
        transition = {};

    if (_.options.fade === false) {
      transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
    } else {
      transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
    }

    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };

  Slick.prototype.autoPlay = function () {
    var _ = this;

    _.autoPlayClear();

    if (_.slideCount > _.options.slidesToShow) {
      _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
    }
  };

  Slick.prototype.autoPlayClear = function () {
    var _ = this;

    if (_.autoPlayTimer) {
      clearInterval(_.autoPlayTimer);
    }
  };

  Slick.prototype.autoPlayIterator = function () {
    var _ = this,
        slideTo = _.currentSlide + _.options.slidesToScroll;

    if (!_.paused && !_.interrupted && !_.focussed) {
      if (_.options.infinite === false) {
        if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
          _.direction = 0;
        } else if (_.direction === 0) {
          slideTo = _.currentSlide - _.options.slidesToScroll;

          if (_.currentSlide - 1 === 0) {
            _.direction = 1;
          }
        }
      }

      _.slideHandler(slideTo);
    }
  };

  Slick.prototype.buildArrows = function () {
    var _ = this;

    if (_.options.arrows === true) {
      _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
      _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

      if (_.slideCount > _.options.slidesToShow) {
        _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

        _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

        if (_.htmlExpr.test(_.options.prevArrow)) {
          _.$prevArrow.prependTo(_.options.appendArrows);
        }

        if (_.htmlExpr.test(_.options.nextArrow)) {
          _.$nextArrow.appendTo(_.options.appendArrows);
        }

        if (_.options.infinite !== true) {
          _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
        }
      } else {
        _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
          'aria-disabled': 'true',
          'tabindex': '-1'
        });
      }
    }
  };

  Slick.prototype.buildDots = function () {
    var _ = this,
        i,
        dot;

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$slider.addClass('slick-dotted');

      dot = $('<ul />').addClass(_.options.dotsClass);

      for (i = 0; i <= _.getDotCount(); i += 1) {
        dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
      }

      _.$dots = dot.appendTo(_.options.appendDots);

      _.$dots.find('li').first().addClass('slick-active');
    }
  };

  Slick.prototype.buildOut = function () {
    var _ = this;

    _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');
    _.slideCount = _.$slides.length;

    _.$slides.each(function (index, element) {
      $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
    });

    _.$slider.addClass('slick-slider');

    _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();
    _.$list = _.$slideTrack.wrap('<div class="slick-list"/>').parent();

    _.$slideTrack.css('opacity', 0);

    if (_.options.centerMode === true || _.options.swipeToSlide === true) {
      _.options.slidesToScroll = 1;
    }

    $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

    _.setupInfinite();

    _.buildArrows();

    _.buildDots();

    _.updateDots();

    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

    if (_.options.draggable === true) {
      _.$list.addClass('draggable');
    }
  };

  Slick.prototype.buildRows = function () {
    var _ = this,
        a,
        b,
        c,
        newSlides,
        numOfSlides,
        originalSlides,
        slidesPerSection;

    newSlides = document.createDocumentFragment();
    originalSlides = _.$slider.children();

    if (_.options.rows > 0) {
      slidesPerSection = _.options.slidesPerRow * _.options.rows;
      numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

      for (a = 0; a < numOfSlides; a++) {
        var slide = document.createElement('div');

        for (b = 0; b < _.options.rows; b++) {
          var row = document.createElement('div');

          for (c = 0; c < _.options.slidesPerRow; c++) {
            var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);

            if (originalSlides.get(target)) {
              row.appendChild(originalSlides.get(target));
            }
          }

          slide.appendChild(row);
        }

        newSlides.appendChild(slide);
      }

      _.$slider.empty().append(newSlides);

      _.$slider.children().children().children().css({
        'width': 100 / _.options.slidesPerRow + '%',
        'display': 'inline-block'
      });
    }
  };

  Slick.prototype.checkResponsive = function (initial, forceUpdate) {
    var _ = this,
        breakpoint,
        targetBreakpoint,
        respondToWidth,
        triggerBreakpoint = false;

    var sliderWidth = _.$slider.width();

    var windowWidth = window.innerWidth || $(window).width();

    if (_.respondTo === 'window') {
      respondToWidth = windowWidth;
    } else if (_.respondTo === 'slider') {
      respondToWidth = sliderWidth;
    } else if (_.respondTo === 'min') {
      respondToWidth = Math.min(windowWidth, sliderWidth);
    }

    if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {
      targetBreakpoint = null;

      for (breakpoint in _.breakpoints) {
        if (_.breakpoints.hasOwnProperty(breakpoint)) {
          if (_.originalSettings.mobileFirst === false) {
            if (respondToWidth < _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          } else {
            if (respondToWidth > _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          }
        }
      }

      if (targetBreakpoint !== null) {
        if (_.activeBreakpoint !== null) {
          if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
            _.activeBreakpoint = targetBreakpoint;

            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
              _.unslick(targetBreakpoint);
            } else {
              _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);

              if (initial === true) {
                _.currentSlide = _.options.initialSlide;
              }

              _.refresh(initial);
            }

            triggerBreakpoint = targetBreakpoint;
          }
        } else {
          _.activeBreakpoint = targetBreakpoint;

          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
            _.unslick(targetBreakpoint);
          } else {
            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);

            if (initial === true) {
              _.currentSlide = _.options.initialSlide;
            }

            _.refresh(initial);
          }

          triggerBreakpoint = targetBreakpoint;
        }
      } else {
        if (_.activeBreakpoint !== null) {
          _.activeBreakpoint = null;
          _.options = _.originalSettings;

          if (initial === true) {
            _.currentSlide = _.options.initialSlide;
          }

          _.refresh(initial);

          triggerBreakpoint = targetBreakpoint;
        }
      } // only trigger breakpoints during an actual break. not on initialize.


      if (!initial && triggerBreakpoint !== false) {
        _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
      }
    }
  };

  Slick.prototype.changeSlide = function (event, dontAnimate) {
    var _ = this,
        $target = $(event.currentTarget),
        indexOffset,
        slideOffset,
        unevenOffset; // If target is a link, prevent default action.


    if ($target.is('a')) {
      event.preventDefault();
    } // If target is not the <li> element (ie: a child), find the <li>.


    if (!$target.is('li')) {
      $target = $target.closest('li');
    }

    unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
    indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

    switch (event.data.message) {
      case 'previous':
        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;

        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
        }

        break;

      case 'next':
        slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;

        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
        }

        break;

      case 'index':
        var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

        _.slideHandler(_.checkNavigable(index), false, dontAnimate);

        $target.children().trigger('focus');
        break;

      default:
        return;
    }
  };

  Slick.prototype.checkNavigable = function (index) {
    var _ = this,
        navigables,
        prevNavigable;

    navigables = _.getNavigableIndexes();
    prevNavigable = 0;

    if (index > navigables[navigables.length - 1]) {
      index = navigables[navigables.length - 1];
    } else {
      for (var n in navigables) {
        if (index < navigables[n]) {
          index = prevNavigable;
          break;
        }

        prevNavigable = navigables[n];
      }
    }

    return index;
  };

  Slick.prototype.cleanUpEvents = function () {
    var _ = this;

    if (_.options.dots && _.$dots !== null) {
      $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));

      if (_.options.accessibility === true) {
        _.$dots.off('keydown.slick', _.keyHandler);
      }
    }

    _.$slider.off('focus.slick blur.slick');

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
      _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

      if (_.options.accessibility === true) {
        _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
        _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
      }
    }

    _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);

    _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);

    _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);

    _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

    _.$list.off('click.slick', _.clickHandler);

    $(document).off(_.visibilityChange, _.visibility);

    _.cleanUpSlideEvents();

    if (_.options.accessibility === true) {
      _.$list.off('keydown.slick', _.keyHandler);
    }

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().off('click.slick', _.selectHandler);
    }

    $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);
    $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);
    $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
    $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
  };

  Slick.prototype.cleanUpSlideEvents = function () {
    var _ = this;

    _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));

    _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
  };

  Slick.prototype.cleanUpRows = function () {
    var _ = this,
        originalSlides;

    if (_.options.rows > 0) {
      originalSlides = _.$slides.children().children();
      originalSlides.removeAttr('style');

      _.$slider.empty().append(originalSlides);
    }
  };

  Slick.prototype.clickHandler = function (event) {
    var _ = this;

    if (_.shouldClick === false) {
      event.stopImmediatePropagation();
      event.stopPropagation();
      event.preventDefault();
    }
  };

  Slick.prototype.destroy = function (refresh) {
    var _ = this;

    _.autoPlayClear();

    _.touchObject = {};

    _.cleanUpEvents();

    $('.slick-cloned', _.$slider).detach();

    if (_.$dots) {
      _.$dots.remove();
    }

    if (_.$prevArrow && _.$prevArrow.length) {
      _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

      if (_.htmlExpr.test(_.options.prevArrow)) {
        _.$prevArrow.remove();
      }
    }

    if (_.$nextArrow && _.$nextArrow.length) {
      _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

      if (_.htmlExpr.test(_.options.nextArrow)) {
        _.$nextArrow.remove();
      }
    }

    if (_.$slides) {
      _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
        $(this).attr('style', $(this).data('originalStyling'));
      });

      _.$slideTrack.children(this.options.slide).detach();

      _.$slideTrack.detach();

      _.$list.detach();

      _.$slider.append(_.$slides);
    }

    _.cleanUpRows();

    _.$slider.removeClass('slick-slider');

    _.$slider.removeClass('slick-initialized');

    _.$slider.removeClass('slick-dotted');

    _.unslicked = true;

    if (!refresh) {
      _.$slider.trigger('destroy', [_]);
    }
  };

  Slick.prototype.disableTransition = function (slide) {
    var _ = this,
        transition = {};

    transition[_.transitionType] = '';

    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };

  Slick.prototype.fadeSlide = function (slideIndex, callback) {
    var _ = this;

    if (_.cssTransitions === false) {
      _.$slides.eq(slideIndex).css({
        zIndex: _.options.zIndex
      });

      _.$slides.eq(slideIndex).animate({
        opacity: 1
      }, _.options.speed, _.options.easing, callback);
    } else {
      _.applyTransition(slideIndex);

      _.$slides.eq(slideIndex).css({
        opacity: 1,
        zIndex: _.options.zIndex
      });

      if (callback) {
        setTimeout(function () {
          _.disableTransition(slideIndex);

          callback.call();
        }, _.options.speed);
      }
    }
  };

  Slick.prototype.fadeSlideOut = function (slideIndex) {
    var _ = this;

    if (_.cssTransitions === false) {
      _.$slides.eq(slideIndex).animate({
        opacity: 0,
        zIndex: _.options.zIndex - 2
      }, _.options.speed, _.options.easing);
    } else {
      _.applyTransition(slideIndex);

      _.$slides.eq(slideIndex).css({
        opacity: 0,
        zIndex: _.options.zIndex - 2
      });
    }
  };

  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {
    var _ = this;

    if (filter !== null) {
      _.$slidesCache = _.$slides;

      _.unload();

      _.$slideTrack.children(this.options.slide).detach();

      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

      _.reinit();
    }
  };

  Slick.prototype.focusHandler = function () {
    var _ = this;

    _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*', function (event) {
      event.stopImmediatePropagation();
      var $sf = $(this);
      setTimeout(function () {
        if (_.options.pauseOnFocus) {
          _.focussed = $sf.is(':focus');

          _.autoPlay();
        }
      }, 0);
    });
  };

  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {
    var _ = this;

    return _.currentSlide;
  };

  Slick.prototype.getDotCount = function () {
    var _ = this;

    var breakPoint = 0;
    var counter = 0;
    var pagerQty = 0;

    if (_.options.infinite === true) {
      if (_.slideCount <= _.options.slidesToShow) {
        ++pagerQty;
      } else {
        while (breakPoint < _.slideCount) {
          ++pagerQty;
          breakPoint = counter + _.options.slidesToScroll;
          counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }
      }
    } else if (_.options.centerMode === true) {
      pagerQty = _.slideCount;
    } else if (!_.options.asNavFor) {
      pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
    } else {
      while (breakPoint < _.slideCount) {
        ++pagerQty;
        breakPoint = counter + _.options.slidesToScroll;
        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
      }
    }

    return pagerQty - 1;
  };

  Slick.prototype.getLeft = function (slideIndex) {
    var _ = this,
        targetLeft,
        verticalHeight,
        verticalOffset = 0,
        targetSlide,
        coef;

    _.slideOffset = 0;
    verticalHeight = _.$slides.first().outerHeight(true);

    if (_.options.infinite === true) {
      if (_.slideCount > _.options.slidesToShow) {
        _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
        coef = -1;

        if (_.options.vertical === true && _.options.centerMode === true) {
          if (_.options.slidesToShow === 2) {
            coef = -1.5;
          } else if (_.options.slidesToShow === 1) {
            coef = -2;
          }
        }

        verticalOffset = verticalHeight * _.options.slidesToShow * coef;
      }

      if (_.slideCount % _.options.slidesToScroll !== 0) {
        if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
          if (slideIndex > _.slideCount) {
            _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
            verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
          } else {
            _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
            verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
          }
        }
      }
    } else {
      if (slideIndex + _.options.slidesToShow > _.slideCount) {
        _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
      }
    }

    if (_.slideCount <= _.options.slidesToShow) {
      _.slideOffset = 0;
      verticalOffset = 0;
    }

    if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
      _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2;
    } else if (_.options.centerMode === true && _.options.infinite === true) {
      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
    } else if (_.options.centerMode === true) {
      _.slideOffset = 0;
      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
    }

    if (_.options.vertical === false) {
      targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
    } else {
      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
    }

    if (_.options.variableWidth === true) {
      if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
      } else {
        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
      }

      if (_.options.rtl === true) {
        if (targetSlide[0]) {
          targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
        } else {
          targetLeft = 0;
        }
      } else {
        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
      }

      if (_.options.centerMode === true) {
        if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
        } else {
          targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
        }

        if (_.options.rtl === true) {
          if (targetSlide[0]) {
            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
          } else {
            targetLeft = 0;
          }
        } else {
          targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
        }

        targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
      }
    }

    return targetLeft;
  };

  Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {
    var _ = this;

    return _.options[option];
  };

  Slick.prototype.getNavigableIndexes = function () {
    var _ = this,
        breakPoint = 0,
        counter = 0,
        indexes = [],
        max;

    if (_.options.infinite === false) {
      max = _.slideCount;
    } else {
      breakPoint = _.options.slidesToScroll * -1;
      counter = _.options.slidesToScroll * -1;
      max = _.slideCount * 2;
    }

    while (breakPoint < max) {
      indexes.push(breakPoint);
      breakPoint = counter + _.options.slidesToScroll;
      counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
    }

    return indexes;
  };

  Slick.prototype.getSlick = function () {
    return this;
  };

  Slick.prototype.getSlideCount = function () {
    var _ = this,
        slidesTraversed,
        swipedSlide,
        centerOffset;

    centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

    if (_.options.swipeToSlide === true) {
      _.$slideTrack.find('.slick-slide').each(function (index, slide) {
        if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      });

      slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;
      return slidesTraversed;
    } else {
      return _.options.slidesToScroll;
    }
  };

  Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {
    var _ = this;

    _.changeSlide({
      data: {
        message: 'index',
        index: parseInt(slide)
      }
    }, dontAnimate);
  };

  Slick.prototype.init = function (creation) {
    var _ = this;

    if (!$(_.$slider).hasClass('slick-initialized')) {
      $(_.$slider).addClass('slick-initialized');

      _.buildRows();

      _.buildOut();

      _.setProps();

      _.startLoad();

      _.loadSlider();

      _.initializeEvents();

      _.updateArrows();

      _.updateDots();

      _.checkResponsive(true);

      _.focusHandler();
    }

    if (creation) {
      _.$slider.trigger('init', [_]);
    }

    if (_.options.accessibility === true) {
      _.initADA();
    }

    if (_.options.autoplay) {
      _.paused = false;

      _.autoPlay();
    }
  };

  Slick.prototype.initADA = function () {
    var _ = this,
        numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
        tabControlIndexes = _.getNavigableIndexes().filter(function (val) {
      return val >= 0 && val < _.slideCount;
    });

    _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
      'aria-hidden': 'true',
      'tabindex': '-1'
    }).find('a, input, button, select').attr({
      'tabindex': '-1'
    });

    if (_.$dots !== null) {
      _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
        var slideControlIndex = tabControlIndexes.indexOf(i);
        $(this).attr({
          'role': 'tabpanel',
          'id': 'slick-slide' + _.instanceUid + i,
          'tabindex': -1
        });

        if (slideControlIndex !== -1) {
          var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex;

          if ($('#' + ariaButtonControl).length) {
            $(this).attr({
              'aria-describedby': ariaButtonControl
            });
          }
        }
      });

      _.$dots.attr('role', 'tablist').find('li').each(function (i) {
        var mappedSlideIndex = tabControlIndexes[i];
        $(this).attr({
          'role': 'presentation'
        });
        $(this).find('button').first().attr({
          'role': 'tab',
          'id': 'slick-slide-control' + _.instanceUid + i,
          'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
          'aria-label': i + 1 + ' of ' + numDotGroups,
          'aria-selected': null,
          'tabindex': '-1'
        });
      }).eq(_.currentSlide).find('button').attr({
        'aria-selected': 'true',
        'tabindex': '0'
      }).end();
    }

    for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {
      if (_.options.focusOnChange) {
        _.$slides.eq(i).attr({
          'tabindex': '0'
        });
      } else {
        _.$slides.eq(i).removeAttr('tabindex');
      }
    }

    _.activateADA();
  };

  Slick.prototype.initArrowEvents = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.off('click.slick').on('click.slick', {
        message: 'previous'
      }, _.changeSlide);

      _.$nextArrow.off('click.slick').on('click.slick', {
        message: 'next'
      }, _.changeSlide);

      if (_.options.accessibility === true) {
        _.$prevArrow.on('keydown.slick', _.keyHandler);

        _.$nextArrow.on('keydown.slick', _.keyHandler);
      }
    }
  };

  Slick.prototype.initDotEvents = function () {
    var _ = this;

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      $('li', _.$dots).on('click.slick', {
        message: 'index'
      }, _.changeSlide);

      if (_.options.accessibility === true) {
        _.$dots.on('keydown.slick', _.keyHandler);
      }
    }

    if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {
      $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
    }
  };

  Slick.prototype.initSlideEvents = function () {
    var _ = this;

    if (_.options.pauseOnHover) {
      _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));

      _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
    }
  };

  Slick.prototype.initializeEvents = function () {
    var _ = this;

    _.initArrowEvents();

    _.initDotEvents();

    _.initSlideEvents();

    _.$list.on('touchstart.slick mousedown.slick', {
      action: 'start'
    }, _.swipeHandler);

    _.$list.on('touchmove.slick mousemove.slick', {
      action: 'move'
    }, _.swipeHandler);

    _.$list.on('touchend.slick mouseup.slick', {
      action: 'end'
    }, _.swipeHandler);

    _.$list.on('touchcancel.slick mouseleave.slick', {
      action: 'end'
    }, _.swipeHandler);

    _.$list.on('click.slick', _.clickHandler);

    $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

    if (_.options.accessibility === true) {
      _.$list.on('keydown.slick', _.keyHandler);
    }

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on('click.slick', _.selectHandler);
    }

    $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));
    $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));
    $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
    $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
    $(_.setPosition);
  };

  Slick.prototype.initUI = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.show();

      _.$nextArrow.show();
    }

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.show();
    }
  };

  Slick.prototype.keyHandler = function (event) {
    var _ = this; //Dont slide if the cursor is inside the form fields and arrow keys are pressed


    if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
      if (event.keyCode === 37 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? 'next' : 'previous'
          }
        });
      } else if (event.keyCode === 39 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? 'previous' : 'next'
          }
        });
      }
    }
  };

  Slick.prototype.lazyLoad = function () {
    var _ = this,
        loadRange,
        cloneRange,
        rangeStart,
        rangeEnd;

    function loadImages(imagesScope) {
      $('img[data-lazy]', imagesScope).each(function () {
        var image = $(this),
            imageSource = $(this).attr('data-lazy'),
            imageSrcSet = $(this).attr('data-srcset'),
            imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
            imageToLoad = document.createElement('img');

        imageToLoad.onload = function () {
          image.animate({
            opacity: 0
          }, 100, function () {
            if (imageSrcSet) {
              image.attr('srcset', imageSrcSet);

              if (imageSizes) {
                image.attr('sizes', imageSizes);
              }
            }

            image.attr('src', imageSource).animate({
              opacity: 1
            }, 200, function () {
              image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');
            });

            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
          });
        };

        imageToLoad.onerror = function () {
          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
        };

        imageToLoad.src = imageSource;
      });
    }

    if (_.options.centerMode === true) {
      if (_.options.infinite === true) {
        rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
        rangeEnd = rangeStart + _.options.slidesToShow + 2;
      } else {
        rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
      }
    } else {
      rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
      rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);

      if (_.options.fade === true) {
        if (rangeStart > 0) rangeStart--;
        if (rangeEnd <= _.slideCount) rangeEnd++;
      }
    }

    loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

    if (_.options.lazyLoad === 'anticipated') {
      var prevSlide = rangeStart - 1,
          nextSlide = rangeEnd,
          $slides = _.$slider.find('.slick-slide');

      for (var i = 0; i < _.options.slidesToScroll; i++) {
        if (prevSlide < 0) prevSlide = _.slideCount - 1;
        loadRange = loadRange.add($slides.eq(prevSlide));
        loadRange = loadRange.add($slides.eq(nextSlide));
        prevSlide--;
        nextSlide++;
      }
    }

    loadImages(loadRange);

    if (_.slideCount <= _.options.slidesToShow) {
      cloneRange = _.$slider.find('.slick-slide');
      loadImages(cloneRange);
    } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
      cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
      loadImages(cloneRange);
    } else if (_.currentSlide === 0) {
      cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
      loadImages(cloneRange);
    }
  };

  Slick.prototype.loadSlider = function () {
    var _ = this;

    _.setPosition();

    _.$slideTrack.css({
      opacity: 1
    });

    _.$slider.removeClass('slick-loading');

    _.initUI();

    if (_.options.lazyLoad === 'progressive') {
      _.progressiveLazyLoad();
    }
  };

  Slick.prototype.next = Slick.prototype.slickNext = function () {
    var _ = this;

    _.changeSlide({
      data: {
        message: 'next'
      }
    });
  };

  Slick.prototype.orientationChange = function () {
    var _ = this;

    _.checkResponsive();

    _.setPosition();
  };

  Slick.prototype.pause = Slick.prototype.slickPause = function () {
    var _ = this;

    _.autoPlayClear();

    _.paused = true;
  };

  Slick.prototype.play = Slick.prototype.slickPlay = function () {
    var _ = this;

    _.autoPlay();

    _.options.autoplay = true;
    _.paused = false;
    _.focussed = false;
    _.interrupted = false;
  };

  Slick.prototype.postSlide = function (index) {
    var _ = this;

    if (!_.unslicked) {
      _.$slider.trigger('afterChange', [_, index]);

      _.animating = false;

      if (_.slideCount > _.options.slidesToShow) {
        _.setPosition();
      }

      _.swipeLeft = null;

      if (_.options.autoplay) {
        _.autoPlay();
      }

      if (_.options.accessibility === true) {
        _.initADA();

        if (_.options.focusOnChange) {
          var $currentSlide = $(_.$slides.get(_.currentSlide));
          $currentSlide.attr('tabindex', 0).focus();
        }
      }
    }
  };

  Slick.prototype.prev = Slick.prototype.slickPrev = function () {
    var _ = this;

    _.changeSlide({
      data: {
        message: 'previous'
      }
    });
  };

  Slick.prototype.preventDefault = function (event) {
    event.preventDefault();
  };

  Slick.prototype.progressiveLazyLoad = function (tryCount) {
    tryCount = tryCount || 1;

    var _ = this,
        $imgsToLoad = $('img[data-lazy]', _.$slider),
        image,
        imageSource,
        imageSrcSet,
        imageSizes,
        imageToLoad;

    if ($imgsToLoad.length) {
      image = $imgsToLoad.first();
      imageSource = image.attr('data-lazy');
      imageSrcSet = image.attr('data-srcset');
      imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');
      imageToLoad = document.createElement('img');

      imageToLoad.onload = function () {
        if (imageSrcSet) {
          image.attr('srcset', imageSrcSet);

          if (imageSizes) {
            image.attr('sizes', imageSizes);
          }
        }

        image.attr('src', imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');

        if (_.options.adaptiveHeight === true) {
          _.setPosition();
        }

        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);

        _.progressiveLazyLoad();
      };

      imageToLoad.onerror = function () {
        if (tryCount < 3) {
          /**
           * try to load the image 3 times,
           * leave a slight delay so we don't get
           * servers blocking the request.
           */
          setTimeout(function () {
            _.progressiveLazyLoad(tryCount + 1);
          }, 500);
        } else {
          image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

          _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

          _.progressiveLazyLoad();
        }
      };

      imageToLoad.src = imageSource;
    } else {
      _.$slider.trigger('allImagesLoaded', [_]);
    }
  };

  Slick.prototype.refresh = function (initializing) {
    var _ = this,
        currentSlide,
        lastVisibleIndex;

    lastVisibleIndex = _.slideCount - _.options.slidesToShow; // in non-infinite sliders, we don't want to go past the
    // last visible index.

    if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
      _.currentSlide = lastVisibleIndex;
    } // if less slides than to show, go to start.


    if (_.slideCount <= _.options.slidesToShow) {
      _.currentSlide = 0;
    }

    currentSlide = _.currentSlide;

    _.destroy(true);

    $.extend(_, _.initials, {
      currentSlide: currentSlide
    });

    _.init();

    if (!initializing) {
      _.changeSlide({
        data: {
          message: 'index',
          index: currentSlide
        }
      }, false);
    }
  };

  Slick.prototype.registerBreakpoints = function () {
    var _ = this,
        breakpoint,
        currentBreakpoint,
        l,
        responsiveSettings = _.options.responsive || null;

    if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {
      _.respondTo = _.options.respondTo || 'window';

      for (breakpoint in responsiveSettings) {
        l = _.breakpoints.length - 1;

        if (responsiveSettings.hasOwnProperty(breakpoint)) {
          currentBreakpoint = responsiveSettings[breakpoint].breakpoint; // loop through the breakpoints and cut out any existing
          // ones with the same breakpoint number, we don't want dupes.

          while (l >= 0) {
            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
              _.breakpoints.splice(l, 1);
            }

            l--;
          }

          _.breakpoints.push(currentBreakpoint);

          _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
        }
      }

      _.breakpoints.sort(function (a, b) {
        return _.options.mobileFirst ? a - b : b - a;
      });
    }
  };

  Slick.prototype.reinit = function () {
    var _ = this;

    _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');
    _.slideCount = _.$slides.length;

    if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
      _.currentSlide = _.currentSlide - _.options.slidesToScroll;
    }

    if (_.slideCount <= _.options.slidesToShow) {
      _.currentSlide = 0;
    }

    _.registerBreakpoints();

    _.setProps();

    _.setupInfinite();

    _.buildArrows();

    _.updateArrows();

    _.initArrowEvents();

    _.buildDots();

    _.updateDots();

    _.initDotEvents();

    _.cleanUpSlideEvents();

    _.initSlideEvents();

    _.checkResponsive(false, true);

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on('click.slick', _.selectHandler);
    }

    _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

    _.setPosition();

    _.focusHandler();

    _.paused = !_.options.autoplay;

    _.autoPlay();

    _.$slider.trigger('reInit', [_]);
  };

  Slick.prototype.resize = function () {
    var _ = this;

    if ($(window).width() !== _.windowWidth) {
      clearTimeout(_.windowDelay);
      _.windowDelay = window.setTimeout(function () {
        _.windowWidth = $(window).width();

        _.checkResponsive();

        if (!_.unslicked) {
          _.setPosition();
        }
      }, 50);
    }
  };

  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {
    var _ = this;

    if (typeof index === 'boolean') {
      removeBefore = index;
      index = removeBefore === true ? 0 : _.slideCount - 1;
    } else {
      index = removeBefore === true ? --index : index;
    }

    if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
      return false;
    }

    _.unload();

    if (removeAll === true) {
      _.$slideTrack.children().remove();
    } else {
      _.$slideTrack.children(this.options.slide).eq(index).remove();
    }

    _.$slides = _.$slideTrack.children(this.options.slide);

    _.$slideTrack.children(this.options.slide).detach();

    _.$slideTrack.append(_.$slides);

    _.$slidesCache = _.$slides;

    _.reinit();
  };

  Slick.prototype.setCSS = function (position) {
    var _ = this,
        positionProps = {},
        x,
        y;

    if (_.options.rtl === true) {
      position = -position;
    }

    x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
    y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';
    positionProps[_.positionProp] = position;

    if (_.transformsEnabled === false) {
      _.$slideTrack.css(positionProps);
    } else {
      positionProps = {};

      if (_.cssTransitions === false) {
        positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';

        _.$slideTrack.css(positionProps);
      } else {
        positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';

        _.$slideTrack.css(positionProps);
      }
    }
  };

  Slick.prototype.setDimensions = function () {
    var _ = this;

    if (_.options.vertical === false) {
      if (_.options.centerMode === true) {
        _.$list.css({
          padding: '0px ' + _.options.centerPadding
        });
      }
    } else {
      _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);

      if (_.options.centerMode === true) {
        _.$list.css({
          padding: _.options.centerPadding + ' 0px'
        });
      }
    }

    _.listWidth = _.$list.width();
    _.listHeight = _.$list.height();

    if (_.options.vertical === false && _.options.variableWidth === false) {
      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);

      _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
    } else if (_.options.variableWidth === true) {
      _.$slideTrack.width(5000 * _.slideCount);
    } else {
      _.slideWidth = Math.ceil(_.listWidth);

      _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
    }

    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();

    if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
  };

  Slick.prototype.setFade = function () {
    var _ = this,
        targetLeft;

    _.$slides.each(function (index, element) {
      targetLeft = _.slideWidth * index * -1;

      if (_.options.rtl === true) {
        $(element).css({
          position: 'relative',
          right: targetLeft,
          top: 0,
          zIndex: _.options.zIndex - 2,
          opacity: 0
        });
      } else {
        $(element).css({
          position: 'relative',
          left: targetLeft,
          top: 0,
          zIndex: _.options.zIndex - 2,
          opacity: 0
        });
      }
    });

    _.$slides.eq(_.currentSlide).css({
      zIndex: _.options.zIndex - 1,
      opacity: 1
    });
  };

  Slick.prototype.setHeight = function () {
    var _ = this;

    if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);

      _.$list.css('height', targetHeight);
    }
  };

  Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {
    /**
     * accepts arguments in format of:
     *
     *  - for changing a single option's value:
     *     .slick("setOption", option, value, refresh )
     *
     *  - for changing a set of responsive options:
     *     .slick("setOption", 'responsive', [{}, ...], refresh )
     *
     *  - for updating multiple values at once (not responsive)
     *     .slick("setOption", { 'option': value, ... }, refresh )
     */
    var _ = this,
        l,
        item,
        option,
        value,
        refresh = false,
        type;

    if ($.type(arguments[0]) === 'object') {
      option = arguments[0];
      refresh = arguments[1];
      type = 'multiple';
    } else if ($.type(arguments[0]) === 'string') {
      option = arguments[0];
      value = arguments[1];
      refresh = arguments[2];

      if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {
        type = 'responsive';
      } else if (typeof arguments[1] !== 'undefined') {
        type = 'single';
      }
    }

    if (type === 'single') {
      _.options[option] = value;
    } else if (type === 'multiple') {
      $.each(option, function (opt, val) {
        _.options[opt] = val;
      });
    } else if (type === 'responsive') {
      for (item in value) {
        if ($.type(_.options.responsive) !== 'array') {
          _.options.responsive = [value[item]];
        } else {
          l = _.options.responsive.length - 1; // loop through the responsive object and splice out duplicates.

          while (l >= 0) {
            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {
              _.options.responsive.splice(l, 1);
            }

            l--;
          }

          _.options.responsive.push(value[item]);
        }
      }
    }

    if (refresh) {
      _.unload();

      _.reinit();
    }
  };

  Slick.prototype.setPosition = function () {
    var _ = this;

    _.setDimensions();

    _.setHeight();

    if (_.options.fade === false) {
      _.setCSS(_.getLeft(_.currentSlide));
    } else {
      _.setFade();
    }

    _.$slider.trigger('setPosition', [_]);
  };

  Slick.prototype.setProps = function () {
    var _ = this,
        bodyStyle = document.body.style;

    _.positionProp = _.options.vertical === true ? 'top' : 'left';

    if (_.positionProp === 'top') {
      _.$slider.addClass('slick-vertical');
    } else {
      _.$slider.removeClass('slick-vertical');
    }

    if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
      if (_.options.useCSS === true) {
        _.cssTransitions = true;
      }
    }

    if (_.options.fade) {
      if (typeof _.options.zIndex === 'number') {
        if (_.options.zIndex < 3) {
          _.options.zIndex = 3;
        }
      } else {
        _.options.zIndex = _.defaults.zIndex;
      }
    }

    if (bodyStyle.OTransform !== undefined) {
      _.animType = 'OTransform';
      _.transformType = '-o-transform';
      _.transitionType = 'OTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
    }

    if (bodyStyle.MozTransform !== undefined) {
      _.animType = 'MozTransform';
      _.transformType = '-moz-transform';
      _.transitionType = 'MozTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
    }

    if (bodyStyle.webkitTransform !== undefined) {
      _.animType = 'webkitTransform';
      _.transformType = '-webkit-transform';
      _.transitionType = 'webkitTransition';
      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
    }

    if (bodyStyle.msTransform !== undefined) {
      _.animType = 'msTransform';
      _.transformType = '-ms-transform';
      _.transitionType = 'msTransition';
      if (bodyStyle.msTransform === undefined) _.animType = false;
    }

    if (bodyStyle.transform !== undefined && _.animType !== false) {
      _.animType = 'transform';
      _.transformType = 'transform';
      _.transitionType = 'transition';
    }

    _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
  };

  Slick.prototype.setSlideClasses = function (index) {
    var _ = this,
        centerOffset,
        allSlides,
        indexOffset,
        remainder;

    allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

    _.$slides.eq(index).addClass('slick-current');

    if (_.options.centerMode === true) {
      var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;
      centerOffset = Math.floor(_.options.slidesToShow / 2);

      if (_.options.infinite === true) {
        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
          _.$slides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
        } else {
          indexOffset = _.options.slidesToShow + index;
          allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
        }

        if (index === 0) {
          allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
        } else if (index === _.slideCount - 1) {
          allSlides.eq(_.options.slidesToShow).addClass('slick-center');
        }
      }

      _.$slides.eq(index).addClass('slick-center');
    } else {
      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {
        _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
      } else if (allSlides.length <= _.options.slidesToShow) {
        allSlides.addClass('slick-active').attr('aria-hidden', 'false');
      } else {
        remainder = _.slideCount % _.options.slidesToShow;
        indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

        if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {
          allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
        } else {
          allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
        }
      }
    }

    if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
      _.lazyLoad();
    }
  };

  Slick.prototype.setupInfinite = function () {
    var _ = this,
        i,
        slideIndex,
        infiniteCount;

    if (_.options.fade === true) {
      _.options.centerMode = false;
    }

    if (_.options.infinite === true && _.options.fade === false) {
      slideIndex = null;

      if (_.slideCount > _.options.slidesToShow) {
        if (_.options.centerMode === true) {
          infiniteCount = _.options.slidesToShow + 1;
        } else {
          infiniteCount = _.options.slidesToShow;
        }

        for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
          slideIndex = i - 1;
          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
        }

        for (i = 0; i < infiniteCount + _.slideCount; i += 1) {
          slideIndex = i;
          $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
        }

        _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
          $(this).attr('id', '');
        });
      }
    }
  };

  Slick.prototype.interrupt = function (toggle) {
    var _ = this;

    if (!toggle) {
      _.autoPlay();
    }

    _.interrupted = toggle;
  };

  Slick.prototype.selectHandler = function (event) {
    var _ = this;

    var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');
    var index = parseInt(targetElement.attr('data-slick-index'));
    if (!index) index = 0;

    if (_.slideCount <= _.options.slidesToShow) {
      _.slideHandler(index, false, true);

      return;
    }

    _.slideHandler(index);
  };

  Slick.prototype.slideHandler = function (index, sync, dontAnimate) {
    var targetSlide,
        animSlide,
        oldSlide,
        slideLeft,
        targetLeft = null,
        _ = this,
        navTarget;

    sync = sync || false;

    if (_.animating === true && _.options.waitForAnimate === true) {
      return;
    }

    if (_.options.fade === true && _.currentSlide === index) {
      return;
    }

    if (sync === false) {
      _.asNavFor(index);
    }

    targetSlide = index;
    targetLeft = _.getLeft(targetSlide);
    slideLeft = _.getLeft(_.currentSlide);
    _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

    if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }

      return;
    } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }

      return;
    }

    if (_.options.autoplay) {
      clearInterval(_.autoPlayTimer);
    }

    if (targetSlide < 0) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
      } else {
        animSlide = _.slideCount + targetSlide;
      }
    } else if (targetSlide >= _.slideCount) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = 0;
      } else {
        animSlide = targetSlide - _.slideCount;
      }
    } else {
      animSlide = targetSlide;
    }

    _.animating = true;

    _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

    oldSlide = _.currentSlide;
    _.currentSlide = animSlide;

    _.setSlideClasses(_.currentSlide);

    if (_.options.asNavFor) {
      navTarget = _.getNavTarget();
      navTarget = navTarget.slick('getSlick');

      if (navTarget.slideCount <= navTarget.options.slidesToShow) {
        navTarget.setSlideClasses(_.currentSlide);
      }
    }

    _.updateDots();

    _.updateArrows();

    if (_.options.fade === true) {
      if (dontAnimate !== true) {
        _.fadeSlideOut(oldSlide);

        _.fadeSlide(animSlide, function () {
          _.postSlide(animSlide);
        });
      } else {
        _.postSlide(animSlide);
      }

      _.animateHeight();

      return;
    }

    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
      _.animateSlide(targetLeft, function () {
        _.postSlide(animSlide);
      });
    } else {
      _.postSlide(animSlide);
    }
  };

  Slick.prototype.startLoad = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.hide();

      _.$nextArrow.hide();
    }

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.hide();
    }

    _.$slider.addClass('slick-loading');
  };

  Slick.prototype.swipeDirection = function () {
    var xDist,
        yDist,
        r,
        swipeAngle,
        _ = this;

    xDist = _.touchObject.startX - _.touchObject.curX;
    yDist = _.touchObject.startY - _.touchObject.curY;
    r = Math.atan2(yDist, xDist);
    swipeAngle = Math.round(r * 180 / Math.PI);

    if (swipeAngle < 0) {
      swipeAngle = 360 - Math.abs(swipeAngle);
    }

    if (swipeAngle <= 45 && swipeAngle >= 0) {
      return _.options.rtl === false ? 'left' : 'right';
    }

    if (swipeAngle <= 360 && swipeAngle >= 315) {
      return _.options.rtl === false ? 'left' : 'right';
    }

    if (swipeAngle >= 135 && swipeAngle <= 225) {
      return _.options.rtl === false ? 'right' : 'left';
    }

    if (_.options.verticalSwiping === true) {
      if (swipeAngle >= 35 && swipeAngle <= 135) {
        return 'down';
      } else {
        return 'up';
      }
    }

    return 'vertical';
  };

  Slick.prototype.swipeEnd = function (event) {
    var _ = this,
        slideCount,
        direction;

    _.dragging = false;
    _.swiping = false;

    if (_.scrolling) {
      _.scrolling = false;
      return false;
    }

    _.interrupted = false;
    _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

    if (_.touchObject.curX === undefined) {
      return false;
    }

    if (_.touchObject.edgeHit === true) {
      _.$slider.trigger('edge', [_, _.swipeDirection()]);
    }

    if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {
      direction = _.swipeDirection();

      switch (direction) {
        case 'left':
        case 'down':
          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();
          _.currentDirection = 0;
          break;

        case 'right':
        case 'up':
          slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();
          _.currentDirection = 1;
          break;

        default:
      }

      if (direction != 'vertical') {
        _.slideHandler(slideCount);

        _.touchObject = {};

        _.$slider.trigger('swipe', [_, direction]);
      }
    } else {
      if (_.touchObject.startX !== _.touchObject.curX) {
        _.slideHandler(_.currentSlide);

        _.touchObject = {};
      }
    }
  };

  Slick.prototype.swipeHandler = function (event) {
    var _ = this;

    if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
      return;
    } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
      return;
    }

    _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;
    _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

    if (_.options.verticalSwiping === true) {
      _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
    }

    switch (event.data.action) {
      case 'start':
        _.swipeStart(event);

        break;

      case 'move':
        _.swipeMove(event);

        break;

      case 'end':
        _.swipeEnd(event);

        break;
    }
  };

  Slick.prototype.swipeMove = function (event) {
    var _ = this,
        edgeWasHit = false,
        curLeft,
        swipeDirection,
        swipeLength,
        positionOffset,
        touches,
        verticalSwipeLength;

    touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

    if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
      return false;
    }

    curLeft = _.getLeft(_.currentSlide);
    _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
    _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
    _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
    verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

    if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
      _.scrolling = true;
      return false;
    }

    if (_.options.verticalSwiping === true) {
      _.touchObject.swipeLength = verticalSwipeLength;
    }

    swipeDirection = _.swipeDirection();

    if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
      _.swiping = true;
      event.preventDefault();
    }

    positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);

    if (_.options.verticalSwiping === true) {
      positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
    }

    swipeLength = _.touchObject.swipeLength;
    _.touchObject.edgeHit = false;

    if (_.options.infinite === false) {
      if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
        swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
        _.touchObject.edgeHit = true;
      }
    }

    if (_.options.vertical === false) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    } else {
      _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
    }

    if (_.options.verticalSwiping === true) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    }

    if (_.options.fade === true || _.options.touchMove === false) {
      return false;
    }

    if (_.animating === true) {
      _.swipeLeft = null;
      return false;
    }

    _.setCSS(_.swipeLeft);
  };

  Slick.prototype.swipeStart = function (event) {
    var _ = this,
        touches;

    _.interrupted = true;

    if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
      _.touchObject = {};
      return false;
    }

    if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
      touches = event.originalEvent.touches[0];
    }

    _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
    _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
    _.dragging = true;
  };

  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {
    var _ = this;

    if (_.$slidesCache !== null) {
      _.unload();

      _.$slideTrack.children(this.options.slide).detach();

      _.$slidesCache.appendTo(_.$slideTrack);

      _.reinit();
    }
  };

  Slick.prototype.unload = function () {
    var _ = this;

    $('.slick-cloned', _.$slider).remove();

    if (_.$dots) {
      _.$dots.remove();
    }

    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
      _.$prevArrow.remove();
    }

    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
      _.$nextArrow.remove();
    }

    _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
  };

  Slick.prototype.unslick = function (fromBreakpoint) {
    var _ = this;

    _.$slider.trigger('unslick', [_, fromBreakpoint]);

    _.destroy();
  };

  Slick.prototype.updateArrows = function () {
    var _ = this,
        centerOffset;

    centerOffset = Math.floor(_.options.slidesToShow / 2);

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {
      _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

      _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

      if (_.currentSlide === 0) {
        _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');

        _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
      } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');

        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
      } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
        _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');

        _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
      }
    }
  };

  Slick.prototype.updateDots = function () {
    var _ = this;

    if (_.$dots !== null) {
      _.$dots.find('li').removeClass('slick-active').end();

      _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active');
    }
  };

  Slick.prototype.visibility = function () {
    var _ = this;

    if (_.options.autoplay) {
      if (document[_.hidden]) {
        _.interrupted = true;
      } else {
        _.interrupted = false;
      }
    }
  };

  $.fn.slick = function () {
    var _ = this,
        opt = arguments[0],
        args = Array.prototype.slice.call(arguments, 1),
        l = _.length,
        i,
        ret;

    for (i = 0; i < l; i++) {
      if (_typeof(opt) == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
      if (typeof ret != 'undefined') return ret;
    }

    return _;
  };
});

/***/ }),

/***/ "./node_modules/svg-injector-2/dist/svg-injector.min.js":
/*!**************************************************************!*\
  !*** ./node_modules/svg-injector-2/dist/svg-injector.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * SVGInjector v2.1.3 - Fast, caching, dynamic inline SVG DOM injection library
 * https://github.com/flobacher/SVGInjector2
 * forked from:
 * https://github.com/iconic/SVGInjector
 *
 * Copyright (c) 2015 flobacher <flo@digital-fuse.net>
 * @license MIT
 *
 * original Copyright (c) 2014 Waybury <hello@waybury.com>
 * @license MIT
 */
!function (e, t) {
  "use strict";

  var r = function () {
    function r(e) {
      r.instanceCounter++, this.init(e);
    }

    var n,
        i,
        s,
        l,
        a,
        o,
        c,
        u,
        f,
        p,
        d,
        v,
        g,
        m,
        h,
        b,
        y,
        S,
        A,
        C,
        x,
        k,
        N,
        w,
        j,
        E,
        I,
        F,
        T,
        G,
        V = "http://www.w3.org/2000/svg",
        O = "http://www.w3.org/1999/xlink",
        q = ["sprite"];
    return s = [], r.instanceCounter = 0, r.prototype.init = function (r) {
      r = r || {}, n = {}, o = {}, o.isLocal = "file:" === e.location.protocol, o.hasSvgSupport = t.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"), i = {
        count: 0,
        elements: []
      }, l = {}, a = {}, a.evalScripts = r.evalScripts || "always", a.pngFallback = r.pngFallback || !1, a.svgFallbackDir = r.svgFallbackDir || !1, a.onlyInjectVisiblePart = r.onlyInjectVisiblePart || !0, a.keepStylesClass = void 0 === r.keepStylesClass ? "" : r.keepStylesClass, a.spriteClassName = void 0 === r.spriteClassName ? "sprite" : r.spriteClassName, a.spriteClassIdName = void 0 === r.spriteClassIdName ? "sprite--" : r.spriteClassIdName, a.removeStylesClass = void 0 === r.removeStylesClass ? "icon" : r.removeStylesClass, a.removeAllStyles = void 0 !== r.removeAllStyles && r.removeAllStyles, a.fallbackClassName = void 0 === r.fallbackClassName ? q : r.fallbackClassName, a.prefixStyleTags = void 0 === r.prefixStyleTags || r.prefixStyleTags, a.spritesheetURL = void 0 !== r.spritesheetURL && "" !== r.spritesheetURL && r.spritesheetURL, a.prefixFragIdClass = a.spriteClassIdName, a.forceFallbacks = void 0 !== r.forceFallbacks && r.forceFallbacks, a.forceFallbacks && (o.hasSvgSupport = !1), x(t.querySelector("html"), "no-svg", o.hasSvgSupport), o.hasSvgSupport && void 0 === r.removeStylesClass && C(a.removeStylesClass);
    }, r.prototype.inject = function (e, t, r) {
      if (void 0 !== e.length) {
        var n = 0,
            i = this;
        I.call(e, function (s) {
          i.injectElement(s, function (i) {
            r && "function" == typeof r && r(i), t && e.length === ++n && t(n);
          });
        });
      } else e ? this.injectElement(e, function (n) {
        r && "function" == typeof r && r(n), t && t(1), e = null;
      }) : t && t(0);
    }, G = r.prototype.injectElement = function (e, t) {
      var r,
          n = e.getAttribute("data-src") || e.getAttribute("src");

      if (!n) {
        if (!a.spritesheetURL) return;
        if ("" === (r = h(e))) return;
        n = a.spritesheetURL + "#" + r;
      }

      e.setAttribute("data-src", n);
      var s = n.split("#");
      1 === s.length && s.push("");
      var l;
      if (!/\.svg/i.test(n)) return void t("Attempted to inject a file with a non-svg extension: " + n);

      if (!o.hasSvgSupport) {
        var f = e.getAttribute("data-fallback") || e.getAttribute("data-png");
        return void (f ? (e.setAttribute("src", f), t(null)) : a.pngFallback ? (s.length > 1 && s[1] ? (l = s[1] + ".png", j(a.fallbackClassName) ? c(e, s[1], a.fallbackClassName) : w(a.fallbackClassName) ? a.fallbackClassName(e, s[1]) : "string" == typeof a.fallbackClassName ? E(e, a.fallbackClassName) : e.setAttribute("src", a.pngFallback + "/" + l)) : (l = n.split("/").pop().replace(".svg", ".png"), e.setAttribute("src", a.pngFallback + "/" + l)), t(null)) : t("This browser does not support SVG and no PNG fallback was defined."));
      }

      j(a.fallbackClassName) && u(e, s[1], a.fallbackClassName), -1 === i.elements.indexOf(e) && (i.elements.push(e), A(t, n, e));
    }, r.prototype.getEnv = function () {
      return o;
    }, r.prototype.getConfig = function () {
      return a;
    }, c = function c(e, t, r) {
      var n = void 0 === r ? q : r.slice(0);
      I.call(n, function (e, r) {
        n[r] = e.replace("%s", t);
      }), E(e, n);
    }, u = function u(e, t, r) {
      r = void 0 === r ? q.slice(0) : r.slice(0);
      var n,
          i,
          s = e.getAttribute("class");
      void 0 !== s && null !== s && (i = s.split(" ")) && (I.call(r, function (e) {
        e = e.replace("%s", t), (n = i.indexOf(e)) >= 0 && (i[n] = "");
      }), e.setAttribute("class", N(i.join(" "))));
    }, p = function p(e, t, r, n) {
      var i = 0;
      return e.textContent = e.textContent.replace(/url\(('|")*#.+('|")*(?=\))/g, function (e) {
        return i++, e + "-" + t;
      }), i;
    }, f = function f(e, t) {
      var r,
          n,
          i,
          s,
          l,
          a,
          o,
          c,
          u,
          f,
          p,
          d,
          v,
          g,
          m,
          h,
          b = [{
        def: "linearGradient",
        attrs: ["fill", "stroke"]
      }, {
        def: "radialGradient",
        attrs: ["fill", "stroke"]
      }, {
        def: "clipPath",
        attrs: ["clip-path"]
      }, {
        def: "mask",
        attrs: ["mask"]
      }, {
        def: "filter",
        attrs: ["filter"]
      }, {
        def: "color-profile",
        attrs: ["color-profile"]
      }, {
        def: "cursor",
        attrs: ["cursor"]
      }, {
        def: "marker",
        attrs: ["marker", "marker-start", "marker-mid", "marker-end"]
      }];
      I.call(b, function (b) {
        for (n = e.querySelectorAll(b.def + "[id]"), s = 0, i = n.length; s < i; s++) {
          for (r = n[s].id + "-" + t, c = b.attrs, f = 0, u = c.length; f < u; f++) {
            for (l = e.querySelectorAll("[" + c[f] + '="url(#' + n[s].id + ')"]'), o = 0, a = l.length; o < a; o++) {
              l[o].setAttribute(c[f], "url(#" + r + ")");
            }
          }

          for (p = e.querySelectorAll("[*|href]"), g = [], v = 0, d = p.length; v < d; v++) {
            p[v].getAttributeNS(O, "href").toString() === "#" + n[s].id && g.push(p[v]);
          }

          for (h = 0, m = g.length; h < m; h++) {
            g[h].setAttributeNS(O, "href", "#" + r);
          }

          n[s].id = r;
        }
      });
    }, d = function d(e, t, r) {
      var n;
      void 0 === r && (r = ["id", "viewBox"]);

      for (var i = 0; i < e.attributes.length; i++) {
        n = e.attributes.item(i), r.indexOf(n.name) < 0 && t.setAttribute(n.name, n.value);
      }
    }, v = function v(e) {
      var r = t.createElementNS(V, "svg");
      return I.call(e.childNodes, function (e) {
        r.appendChild(e.cloneNode(!0));
      }), d(e, r), r;
    }, g = function g(e, t, r) {
      var n,
          i,
          s,
          l,
          a,
          o,
          c = r.getAttribute("data-src").split("#"),
          u = e.textContent,
          f = "",
          p = function p(e, t, r) {
        r[t] = "." + s + " " + e;
      };

      if (c.length > 1) i = c[1], s = i + "-" + t, n = new RegExp("\\." + i + " ", "g"), e.textContent = u.replace(n, "." + s + " ");else {
        for (l = c[0].split("/"), s = l[l.length - 1].replace(".svg", "") + "-" + t, n = new RegExp("([\\s\\S]*?){([\\s\\S]*?)}", "g"); null !== (a = n.exec(u));) {
          o = a[1].trim().split(", "), o.forEach(p);
          f += o.join(", ") + "{" + a[2] + "}\n";
        }

        e.textContent = f;
      }
      r.setAttribute("class", r.getAttribute("class") + " " + s);
    }, m = function m(e) {
      var t = e.getAttribute("class");
      return t ? t.trim().split(" ") : [];
    }, h = function h(e) {
      var t = m(e),
          r = "";
      return I.call(t, function (e) {
        e.indexOf(a.spriteClassIdName) >= 0 && (r = e.replace(a.spriteClassIdName, ""));
      }), r;
    }, b = function b(e, t, r) {
      var n,
          i,
          s,
          l,
          a,
          o,
          c = null,
          u = !1,
          f = !1,
          p = null;
      if (void 0 === r) n = c = t.cloneNode(!0), c.getAttribute("width") || t.getAttribute("width") || (f = !0);else if (!(n = t.getElementById(r))) return;

      if (s = n.getAttribute("viewBox"), i = s.split(" "), !c) {
        if (n instanceof SVGSymbolElement) c = v(n), f = u = !0;else if (n instanceof SVGViewElement) {
          if (p = null, e.onlyInjectVisiblePart) {
            var d = '*[width="' + i[2] + '"][height="' + i[3] + '"]';
            l = {}, 0 === Math.abs(parseInt(i[0])) ? d += ":not([x])" : (l.x = i[0], d += '[x="' + i[0] + '"]'), 0 === Math.abs(parseInt(i[1])) ? d += ":not([y])" : (l.y = i[1], d += '[y="' + i[1] + '"]'), o = t.querySelectorAll(d), o.length, p = o[0];
          }

          if (p && p instanceof SVGSVGElement) {
            c = p.cloneNode(!0);

            for (var g in l) {
              "width" !== g && "height" !== g && c.removeAttribute(g);
            }
          } else if (p && p instanceof SVGUseElement) {
            var h = t.getElementById(p.getAttributeNS(O, "href").substr(1));
            c = v(h), s = h.getAttribute("viewBox"), i = s.split(" "), f = u = !0;
          } else f = u = !0, c = t.cloneNode(!0);
        }
        a = m(c);
        var b = e.prefixFragIdClass + r;
        a.indexOf(b) < 0 && (a.push(b), c.setAttribute("class", a.join(" ")));
      }

      return u && c.setAttribute("viewBox", i.join(" ")), f && (c.setAttribute("width", i[2] + "px"), c.setAttribute("height", i[3] + "px")), c.setAttribute("xmlns", V), c.setAttribute("xmlns:xlink", O), c;
    }, y = function y(e, t, r, n) {
      s[e] = s[e] || [], s[e].push({
        callback: r,
        fragmentId: t,
        element: n,
        name: name
      });
    }, S = function S(e) {
      for (var t, r = 0, n = s[e].length; r < n; r++) {
        !function (r) {
          setTimeout(function () {
            t = s[e][r], k(e, t.fragmentId, t.callback, t.element, t.name);
          }, 0);
        }(r);
      }
    }, A = function A(t, r, i) {
      var s, l, a, c, u;
      if (s = r.split("#"), l = s[0], a = 2 === s.length ? s[1] : void 0, void 0 !== a && (u = l.split("/"), c = u[u.length - 1].replace(".svg", "")), void 0 !== n[l]) n[l] instanceof SVGSVGElement ? k(l, a, t, i, c) : y(l, a, t, i, c);else {
        if (!e.XMLHttpRequest) return t("Browser does not support XMLHttpRequest"), !1;
        n[l] = {}, y(l, a, t, i, c);
        var f = new XMLHttpRequest();
        f.onreadystatechange = function () {
          if (4 === f.readyState) {
            if (404 === f.status || null === f.responseXML) return t("Unable to load SVG file: " + l), !1;
            if (!(200 === f.status || o.isLocal && 0 === f.status)) return t("There was a problem injecting the SVG: " + f.status + " " + f.statusText), !1;
            if (f.responseXML instanceof Document) n[l] = f.responseXML.documentElement;else if (DOMParser && DOMParser instanceof Function) {
              var e;

              try {
                var i = new DOMParser();
                e = i.parseFromString(f.responseText, "text/xml");
              } catch (t) {
                e = void 0;
              }

              if (!e || e.getElementsByTagName("parsererror").length) return t("Unable to parse SVG file: " + r), !1;
              n[l] = e.documentElement;
            }
            S(l);
          }
        }, f.open("GET", l), f.overrideMimeType && f.overrideMimeType("text/xml"), f.send();
      }
    }, C = function C(e) {
      var r = "svg." + e + " {fill: currentColor;}",
          n = t.head || t.getElementsByTagName("head")[0],
          i = t.createElement("style");
      i.type = "text/css", i.styleSheet ? i.styleSheet.cssText = r : i.appendChild(t.createTextNode(r)), n.appendChild(i);
    }, x = function x(e, t, r) {
      r ? e.className.replace(t, "") : e.className += " " + t;
    }, k = function k(t, r, s, o, c) {
      var u, v, h, y, S, A, C, x;
      if (void 0 === (u = b(a, n[t], r)) || "string" == typeof u) return S = o.getAttribute("data-fallback-svg"), S = !(!S && !a.svgFallbackDir) && a.svgFallbackDir + "/" + r + ".svg", S ? (o.setAttribute("data-src", S), i.elements.splice(i.elements.indexOf(o), 1), G(o, s)) : s(u), !1;
      u.setAttribute("role", "img"), I.call(u.children || [], function (e) {
        e instanceof SVGDefsElement || e instanceof SVGTitleElement || e instanceof SVGDescElement || e.setAttribute("role", "presentation");
      }), y = o.getAttribute("aria-hidden") || u.getAttribute("aria-hidden"), y ? (u.setAttribute("aria-hidden", "true"), C = u.querySelector("title"), x = u.querySelector("desc"), C && u.removeChild(C), x && u.removeChild(x)) : (h = F("desc", u, o, r, !1), v = F("title", u, o, r, !1), (h.length > 0 || v.length > 0) && (A = v + " " + h, u.setAttribute("aria-labelledby", A.trim()))), d(o, u, ["class"]);
      var k = [].concat(u.getAttribute("class") || [], "injected-svg", o.getAttribute("class") || []).join(" ");
      u.setAttribute("class", N(k)), f(u, i.count, c), u.removeAttribute("xmlns:a");

      for (var w, j, E = u.querySelectorAll("script"), T = [], V = 0, O = E.length; V < O; V++) {
        (j = E[V].getAttribute("type")) && "application/ecmascript" !== j && "application/javascript" !== j || (w = E[V].innerText || E[V].textContent, T.push(w), u.removeChild(E[V]));
      }

      if (T.length > 0 && ("always" === a.evalScripts || "once" === a.evalScripts && !l[t])) {
        for (var q = 0, L = T.length; q < L; q++) {
          new Function(T[q])(e);
        }

        l[t] = !0;
      }

      var M = u.querySelectorAll("style");
      I.call(M, function (e) {
        var t = m(u),
            r = !0;
        (t.indexOf(a.removeStylesClass) >= 0 || a.removeAllStyles) && t.indexOf(a.keepStylesClass) < 0 ? e.parentNode.removeChild(e) : (p(e, i.count, u, c) > 0 && (r = !1), a.prefixStyleTags && (g(e, i.count, u, c), r = !1), r && (e.textContent += ""));
      }), o.parentNode.replaceChild(u, o), delete i.elements[i.elements.indexOf(o)], i.count++, s(u);
    }, N = function N(e) {
      e = e.split(" ");

      for (var t = {}, r = e.length, n = []; r--;) {
        t.hasOwnProperty(e[r]) || (t[e[r]] = 1, n.unshift(e[r]));
      }

      return n.join(" ");
    }, w = function w(e) {
      return !!(e && e.constructor && e.call && e.apply);
    }, j = function j(e) {
      return "[object Array]" === Object.prototype.toString.call(e);
    }, E = function E(e, t) {
      var r = e.getAttribute("class");
      r = r || "", j(t) && (t = t.join(" ")), t = r + " " + t, e.setAttribute("class", N(t));
    }, I = Array.prototype.forEach || function (e, t) {
      if (void 0 === this || null === this || "function" != typeof e) throw new TypeError();
      var r,
          n = this.length >>> 0;

      for (r = 0; r < n; ++r) {
        r in this && e.call(t, this[r], r, this);
      }
    }, F = function F(e, t, r, n, s) {
      var l,
          a = n ? n + "-" : "";
      return a += e + "-" + i.count, l = r.querySelector(e), l ? T(e, t, l.textContent, a, t.firstChild) : (l = t.querySelector(e), l ? l.setAttribute("id", a) : s ? T(e, t, n, a, t.firstChild) : a = ""), a;
    }, T = function T(e, r, n, i, s) {
      var l,
          a = r.querySelector(e);
      return l = t.createElementNS(V, e), l.appendChild(t.createTextNode(n)), l.setAttribute("id", i), r.insertBefore(l, s), a && a.parentNode.removeChild(a), l;
    }, r;
  }();

  "object" == (typeof angular === "undefined" ? "undefined" : _typeof(angular)) ? angular.module("svginjector", []).provider("svgInjectorOptions", function () {
    var e = {};
    return {
      set: function set(t) {
        e = t;
      },
      $get: function $get() {
        return e;
      }
    };
  }).factory("svgInjectorFactory", ["svgInjectorOptions", function (e) {
    return new r(e);
  }]).directive("svg", ["svgInjectorFactory", function (e) {
    var t = e.getConfig();
    return {
      restrict: "E",
      link: function link(r, n, i) {
        i.class && i.class.indexOf(t.spriteClassIdName) >= 0 ? i.$observe("class", function () {
          e.inject(n[0]);
        }) : (i.dataSrc || i.src) && e.inject(n[0]);
      }
    };
  }]) : "object" == ( false ? undefined : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = r :  true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return r;
  }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(window, document);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/tablesaw/dist/tablesaw.jquery.js":
/*!*******************************************************!*\
  !*** ./node_modules/tablesaw/dist/tablesaw.jquery.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! Tablesaw - v3.0.9 - 2018-02-14
* https://github.com/filamentgroup/tablesaw
* Copyright (c) 2018 Filament Group; Licensed MIT */
(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
      return root.Tablesaw = factory(jQuery, root);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(typeof window !== "undefined" ? window : this, function ($, window) {
  "use strict";

  var document = window.document;
  var domContentLoadedTriggered = false;
  document.addEventListener("DOMContentLoaded", function () {
    domContentLoadedTriggered = true;
  });
  var Tablesaw = {
    i18n: {
      modeStack: "Stack",
      modeSwipe: "Swipe",
      modeToggle: "Toggle",
      modeSwitchColumnsAbbreviated: "Cols",
      modeSwitchColumns: "Columns",
      columnToggleButton: "Columns",
      columnToggleError: "No eligible columns.",
      sort: "Sort",
      swipePreviousColumn: "Previous column",
      swipeNextColumn: "Next column"
    },
    // cut the mustard
    mustard: "head" in document && ( // IE9+, Firefox 4+, Safari 5.1+, Mobile Safari 4.1+, Opera 11.5+, Android 2.3+
    !window.blackberry || window.WebKitPoint) && // only WebKit Blackberry (OS 6+)
    !window.operamini,
    $: $,
    _init: function _init(element) {
      Tablesaw.$(element || document).trigger("enhance.tablesaw");
    },
    init: function init(element) {
      if (!domContentLoadedTriggered) {
        if ("addEventListener" in document) {
          // Use raw DOMContentLoaded instead of shoestring (may have issues in Android 2.3, exhibited by stack table)
          document.addEventListener("DOMContentLoaded", function () {
            Tablesaw._init(element);
          });
        }
      } else {
        Tablesaw._init(element);
      }
    }
  };
  $(document).on("enhance.tablesaw", function () {
    // Extend i18n config, if one exists.
    if (typeof TablesawConfig !== "undefined" && TablesawConfig.i18n) {
      Tablesaw.i18n = $.extend(Tablesaw.i18n, TablesawConfig.i18n || {});
    }

    Tablesaw.i18n.modes = [Tablesaw.i18n.modeStack, Tablesaw.i18n.modeSwipe, Tablesaw.i18n.modeToggle];
  });

  if (Tablesaw.mustard) {
    $(document.documentElement).addClass("tablesaw-enhanced");
  }

  (function () {
    var pluginName = "tablesaw";
    var classes = {
      toolbar: "tablesaw-bar"
    };
    var events = {
      create: "tablesawcreate",
      destroy: "tablesawdestroy",
      refresh: "tablesawrefresh",
      resize: "tablesawresize"
    };
    var defaultMode = "stack";
    var initSelector = "table";
    var initFilterSelector = "[data-tablesaw],[data-tablesaw-mode],[data-tablesaw-sortable]";
    var defaultConfig = {};
    Tablesaw.events = events;

    var Table = function Table(element) {
      if (!element) {
        throw new Error("Tablesaw requires an element.");
      }

      this.table = element;
      this.$table = $(element); // only one <thead> and <tfoot> are allowed, per the specification

      this.$thead = this.$table.children().filter("thead").eq(0); // multiple <tbody> are allowed, per the specification

      this.$tbody = this.$table.children().filter("tbody");
      this.mode = this.$table.attr("data-tablesaw-mode") || defaultMode;
      this.$toolbar = null;
      this.attributes = {
        subrow: "data-tablesaw-subrow",
        ignorerow: "data-tablesaw-ignorerow"
      };
      this.init();
    };

    Table.prototype.init = function () {
      if (!this.$thead.length) {
        throw new Error("tablesaw: a <thead> is required, but none was found.");
      }

      if (!this.$thead.find("th").length) {
        throw new Error("tablesaw: no header cells found. Are you using <th> inside of <thead>?");
      } // assign an id if there is none


      if (!this.$table.attr("id")) {
        this.$table.attr("id", pluginName + "-" + Math.round(Math.random() * 10000));
      }

      this.createToolbar();

      this._initCells();

      this.$table.data(pluginName, this);
      this.$table.trigger(events.create, [this]);
    };

    Table.prototype.getConfig = function (pluginSpecificConfig) {
      // shoestring extend doesn’t support arbitrary args
      var configs = $.extend(defaultConfig, pluginSpecificConfig || {});
      return $.extend(configs, typeof TablesawConfig !== "undefined" ? TablesawConfig : {});
    };

    Table.prototype._getPrimaryHeaderRow = function () {
      return this._getHeaderRows().eq(0);
    };

    Table.prototype._getHeaderRows = function () {
      return this.$thead.children().filter("tr").filter(function () {
        return !$(this).is("[data-tablesaw-ignorerow]");
      });
    };

    Table.prototype._getRowIndex = function ($row) {
      return $row.prevAll().length;
    };

    Table.prototype._getHeaderRowIndeces = function () {
      var self = this;
      var indeces = [];

      this._getHeaderRows().each(function () {
        indeces.push(self._getRowIndex($(this)));
      });

      return indeces;
    };

    Table.prototype._getPrimaryHeaderCells = function ($row) {
      return ($row || this._getPrimaryHeaderRow()).find("th");
    };

    Table.prototype._$getCells = function (th) {
      var self = this;
      return $(th).add(th.cells).filter(function () {
        var $t = $(this);
        var $row = $t.parent();
        var hasColspan = $t.is("[colspan]"); // no subrows or ignored rows (keep cells in ignored rows that do not have a colspan)

        return !$row.is("[" + self.attributes.subrow + "]") && (!$row.is("[" + self.attributes.ignorerow + "]") || !hasColspan);
      });
    };

    Table.prototype._getVisibleColspan = function () {
      var colspan = 0;

      this._getPrimaryHeaderCells().each(function () {
        var $t = $(this);

        if ($t.css("display") !== "none") {
          colspan += parseInt($t.attr("colspan"), 10) || 1;
        }
      });

      return colspan;
    };

    Table.prototype.getColspanForCell = function ($cell) {
      var visibleColspan = this._getVisibleColspan();

      var visibleSiblingColumns = 0;

      if ($cell.closest("tr").data("tablesaw-rowspanned")) {
        visibleSiblingColumns++;
      }

      $cell.siblings().each(function () {
        var $t = $(this);
        var colColspan = parseInt($t.attr("colspan"), 10) || 1;

        if ($t.css("display") !== "none") {
          visibleSiblingColumns += colColspan;
        }
      }); // console.log( $cell[ 0 ], visibleColspan, visibleSiblingColumns );

      return visibleColspan - visibleSiblingColumns;
    };

    Table.prototype.isCellInColumn = function (header, cell) {
      return $(header).add(header.cells).filter(function () {
        return this === cell;
      }).length;
    };

    Table.prototype.updateColspanCells = function (cls, header, userAction) {
      var self = this;

      var primaryHeaderRow = self._getPrimaryHeaderRow(); // find persistent column rowspans


      this.$table.find("[rowspan][data-tablesaw-priority]").each(function () {
        var $t = $(this);

        if ($t.attr("data-tablesaw-priority") !== "persist") {
          return;
        }

        var $row = $t.closest("tr");
        var rowspan = parseInt($t.attr("rowspan"), 10);

        if (rowspan > 1) {
          $row = $row.next();
          $row.data("tablesaw-rowspanned", true);
          rowspan--;
        }
      });
      this.$table.find("[colspan],[data-tablesaw-maxcolspan]").filter(function () {
        // is not in primary header row
        return $(this).closest("tr")[0] !== primaryHeaderRow[0];
      }).each(function () {
        var $cell = $(this);

        if (userAction === undefined || self.isCellInColumn(header, this)) {} else {
          // if is not a user action AND the cell is not in the updating column, kill it
          return;
        }

        var colspan = self.getColspanForCell($cell);

        if (cls && userAction !== undefined) {
          // console.log( colspan === 0 ? "addClass" : "removeClass", $cell );
          $cell[colspan === 0 ? "addClass" : "removeClass"](cls);
        } // cache original colspan


        var maxColspan = parseInt($cell.attr("data-tablesaw-maxcolspan"), 10);

        if (!maxColspan) {
          $cell.attr("data-tablesaw-maxcolspan", $cell.attr("colspan"));
        } else if (colspan > maxColspan) {
          colspan = maxColspan;
        } // console.log( this, "setting colspan to ", colspan );


        $cell.attr("colspan", colspan);
      });
    };

    Table.prototype._findPrimaryHeadersForCell = function (cell) {
      var $headerRow = this._getPrimaryHeaderRow();

      var $headers = this._getPrimaryHeaderCells($headerRow);

      var headerRowIndex = this._getRowIndex($headerRow);

      var results = [];

      for (var rowNumber = 0; rowNumber < this.headerMapping.length; rowNumber++) {
        if (rowNumber === headerRowIndex) {
          continue;
        }

        for (var colNumber = 0; colNumber < this.headerMapping[rowNumber].length; colNumber++) {
          if (this.headerMapping[rowNumber][colNumber] === cell) {
            results.push($headers[colNumber]);
          }
        }
      }

      return results;
    }; // used by init cells


    Table.prototype.getRows = function () {
      var self = this;
      return this.$table.find("tr").filter(function () {
        return $(this).closest("table").is(self.$table);
      });
    }; // used by sortable


    Table.prototype.getBodyRows = function (tbody) {
      return (tbody ? $(tbody) : this.$tbody).children().filter("tr");
    };

    Table.prototype.getHeaderCellIndex = function (cell) {
      var lookup = this.headerMapping[0];

      for (var colIndex = 0; colIndex < lookup.length; colIndex++) {
        if (lookup[colIndex] === cell) {
          return colIndex;
        }
      }

      return -1;
    };

    Table.prototype._initCells = function () {
      // re-establish original colspans
      this.$table.find("[data-tablesaw-maxcolspan]").each(function () {
        var $t = $(this);
        $t.attr("colspan", $t.attr("data-tablesaw-maxcolspan"));
      });
      var $rows = this.getRows();
      var columnLookup = [];
      $rows.each(function (rowNumber) {
        columnLookup[rowNumber] = [];
      });
      $rows.each(function (rowNumber) {
        var coltally = 0;
        var $t = $(this);
        var children = $t.children();
        children.each(function () {
          var colspan = parseInt(this.getAttribute("data-tablesaw-maxcolspan") || this.getAttribute("colspan"), 10);
          var rowspan = parseInt(this.getAttribute("rowspan"), 10); // set in a previous rowspan

          while (columnLookup[rowNumber][coltally]) {
            coltally++;
          }

          columnLookup[rowNumber][coltally] = this; // TODO? both colspan and rowspan

          if (colspan) {
            for (var k = 0; k < colspan - 1; k++) {
              coltally++;
              columnLookup[rowNumber][coltally] = this;
            }
          }

          if (rowspan) {
            for (var j = 1; j < rowspan; j++) {
              columnLookup[rowNumber + j][coltally] = this;
            }
          }

          coltally++;
        });
      });

      var headerRowIndeces = this._getHeaderRowIndeces();

      for (var colNumber = 0; colNumber < columnLookup[0].length; colNumber++) {
        for (var headerIndex = 0, k = headerRowIndeces.length; headerIndex < k; headerIndex++) {
          var headerCol = columnLookup[headerRowIndeces[headerIndex]][colNumber];
          var rowNumber = headerRowIndeces[headerIndex];
          var rowCell;

          if (!headerCol.cells) {
            headerCol.cells = [];
          }

          while (rowNumber < columnLookup.length) {
            rowCell = columnLookup[rowNumber][colNumber];

            if (headerCol !== rowCell) {
              headerCol.cells.push(rowCell);
            }

            rowNumber++;
          }
        }
      }

      this.headerMapping = columnLookup;
    };

    Table.prototype.refresh = function () {
      this._initCells();

      this.$table.trigger(events.refresh, [this]);
    };

    Table.prototype._getToolbarAnchor = function () {
      var $parent = this.$table.parent();

      if ($parent.is(".tablesaw-overflow")) {
        return $parent;
      }

      return this.$table;
    };

    Table.prototype._getToolbar = function ($anchor) {
      if (!$anchor) {
        $anchor = this._getToolbarAnchor();
      }

      return $anchor.prev().filter("." + classes.toolbar);
    };

    Table.prototype.createToolbar = function () {
      // Insert the toolbar
      // TODO move this into a separate component
      var $anchor = this._getToolbarAnchor();

      var $toolbar = this._getToolbar($anchor);

      if (!$toolbar.length) {
        $toolbar = $("<div>").addClass(classes.toolbar).insertBefore($anchor);
      }

      this.$toolbar = $toolbar;

      if (this.mode) {
        this.$toolbar.addClass("tablesaw-mode-" + this.mode);
      }
    };

    Table.prototype.destroy = function () {
      // Don’t remove the toolbar, just erase the classes on it.
      // Some of the table features are not yet destroy-friendly.
      this._getToolbar().each(function () {
        this.className = this.className.replace(/\btablesaw-mode\-\w*\b/gi, "");
      });

      var tableId = this.$table.attr("id");
      $(document).off("." + tableId);
      $(window).off("." + tableId); // other plugins

      this.$table.trigger(events.destroy, [this]);
      this.$table.removeData(pluginName);
    }; // Collection method.


    $.fn[pluginName] = function () {
      return this.each(function () {
        var $t = $(this);

        if ($t.data(pluginName)) {
          return;
        }

        new Table(this);
      });
    };

    var $doc = $(document);
    $doc.on("enhance.tablesaw", function (e) {
      // Cut the mustard
      if (Tablesaw.mustard) {
        $(e.target).find(initSelector).filter(initFilterSelector)[pluginName]();
      }
    }); // Avoid a resize during scroll:
    // Some Mobile devices trigger a resize during scroll (sometimes when
    // doing elastic stretch at the end of the document or from the
    // location bar hide)

    var isScrolling = false;
    var scrollTimeout;
    $doc.on("scroll.tablesaw", function () {
      isScrolling = true;
      window.clearTimeout(scrollTimeout);
      scrollTimeout = window.setTimeout(function () {
        isScrolling = false;
      }, 300); // must be greater than the resize timeout below
    });
    var resizeTimeout;
    $(window).on("resize", function () {
      if (!isScrolling) {
        window.clearTimeout(resizeTimeout);
        resizeTimeout = window.setTimeout(function () {
          $doc.trigger(events.resize);
        }, 150); // must be less than the scrolling timeout above.
      }
    });
    Tablesaw.Table = Table;
  })();

  (function () {
    var classes = {
      stackTable: "tablesaw-stack",
      cellLabels: "tablesaw-cell-label",
      cellContentLabels: "tablesaw-cell-content"
    };
    var data = {
      key: "tablesaw-stack"
    };
    var attrs = {
      labelless: "data-tablesaw-no-labels",
      hideempty: "data-tablesaw-hide-empty"
    };

    var Stack = function Stack(element, tablesaw) {
      this.tablesaw = tablesaw;
      this.$table = $(element);
      this.labelless = this.$table.is("[" + attrs.labelless + "]");
      this.hideempty = this.$table.is("[" + attrs.hideempty + "]");
      this.$table.data(data.key, this);
    };

    Stack.prototype.init = function () {
      this.$table.addClass(classes.stackTable);

      if (this.labelless) {
        return;
      }

      var self = this;
      this.$table.find("th, td").filter(function () {
        return !$(this).closest("thead").length;
      }).filter(function () {
        return !$(this).closest("tr").is("[" + attrs.labelless + "]") && (!self.hideempty || !!$(this).html());
      }).each(function () {
        var $newHeader = $(document.createElement("b")).addClass(classes.cellLabels);
        var $cell = $(this);
        $(self.tablesaw._findPrimaryHeadersForCell(this)).each(function (index) {
          var $header = $(this.cloneNode(true)); // TODO decouple from sortable better
          // Changed from .text() in https://github.com/filamentgroup/tablesaw/commit/b9c12a8f893ec192830ec3ba2d75f062642f935b
          // to preserve structural html in headers, like <a>

          var $sortableButton = $header.find(".tablesaw-sortable-btn");
          $header.find(".tablesaw-sortable-arrow").remove(); // TODO decouple from checkall better

          var $checkall = $header.find("[data-tablesaw-checkall]");
          $checkall.closest("label").remove();

          if ($checkall.length) {
            $newHeader = $([]);
            return;
          }

          if (index > 0) {
            $newHeader.append(document.createTextNode(", "));
          }

          var parentNode = $sortableButton.length ? $sortableButton[0] : $header[0];
          var el;

          while (el = parentNode.firstChild) {
            $newHeader[0].appendChild(el);
          }
        });

        if ($newHeader.length && !$cell.find("." + classes.cellContentLabels).length) {
          $cell.wrapInner("<span class='" + classes.cellContentLabels + "'></span>");
        } // Update if already exists.


        var $label = $cell.find("." + classes.cellLabels);

        if (!$label.length) {
          $cell.prepend($newHeader);
        } else {
          // only if changed
          $label.replaceWith($newHeader);
        }
      });
    };

    Stack.prototype.destroy = function () {
      this.$table.removeClass(classes.stackTable);
      this.$table.find("." + classes.cellLabels).remove();
      this.$table.find("." + classes.cellContentLabels).each(function () {
        $(this).replaceWith(this.childNodes);
      });
    }; // on tablecreate, init


    $(document).on(Tablesaw.events.create, function (e, tablesaw) {
      if (tablesaw.mode === "stack") {
        var table = new Stack(tablesaw.table, tablesaw);
        table.init();
      }
    }).on(Tablesaw.events.refresh, function (e, tablesaw) {
      if (tablesaw.mode === "stack") {
        $(tablesaw.table).data(data.key).init();
      }
    }).on(Tablesaw.events.destroy, function (e, tablesaw) {
      if (tablesaw.mode === "stack") {
        $(tablesaw.table).data(data.key).destroy();
      }
    });
    Tablesaw.Stack = Stack;
  })();

  (function () {
    var pluginName = "tablesawbtn",
        methods = {
      _create: function _create() {
        return $(this).each(function () {
          $(this).trigger("beforecreate." + pluginName)[pluginName]("_init").trigger("create." + pluginName);
        });
      },
      _init: function _init() {
        var oEl = $(this),
            sel = this.getElementsByTagName("select")[0];

        if (sel) {
          // TODO next major version: remove .btn-select
          $(this).addClass("btn-select tablesaw-btn-select")[pluginName]("_select", sel);
        }

        return oEl;
      },
      _select: function _select(sel) {
        var update = function update(oEl, sel) {
          var opts = $(sel).find("option");
          var label = document.createElement("span");
          var el;
          var children;
          var found = false;
          label.setAttribute("aria-hidden", "true");
          label.innerHTML = "&#160;";
          opts.each(function () {
            var opt = this;

            if (opt.selected) {
              label.innerHTML = opt.text;
            }
          });
          children = oEl.childNodes;

          if (opts.length > 0) {
            for (var i = 0, l = children.length; i < l; i++) {
              el = children[i];

              if (el && el.nodeName.toUpperCase() === "SPAN") {
                oEl.replaceChild(label, el);
                found = true;
              }
            }

            if (!found) {
              oEl.insertBefore(label, oEl.firstChild);
            }
          }
        };

        update(this, sel); // todo should this be tablesawrefresh?

        $(this).on("change refresh", function () {
          update(this, sel);
        });
      }
    }; // Collection method.

    $.fn[pluginName] = function (arrg, a, b, c) {
      return this.each(function () {
        // if it's a method
        if (arrg && typeof arrg === "string") {
          return $.fn[pluginName].prototype[arrg].call(this, a, b, c);
        } // don't re-init


        if ($(this).data(pluginName + "active")) {
          return $(this);
        }

        $(this).data(pluginName + "active", true);

        $.fn[pluginName].prototype._create.call(this);
      });
    }; // add methods


    $.extend($.fn[pluginName].prototype, methods); // TODO OOP this and add to Tablesaw object
  })();

  (function () {
    var data = {
      key: "tablesaw-coltoggle"
    };

    var ColumnToggle = function ColumnToggle(element) {
      this.$table = $(element);

      if (!this.$table.length) {
        return;
      }

      this.tablesaw = this.$table.data("tablesaw");
      this.attributes = {
        btnTarget: "data-tablesaw-columntoggle-btn-target",
        set: "data-tablesaw-columntoggle-set"
      };
      this.classes = {
        columnToggleTable: "tablesaw-columntoggle",
        columnBtnContain: "tablesaw-columntoggle-btnwrap tablesaw-advance",
        columnBtn: "tablesaw-columntoggle-btn tablesaw-nav-btn down",
        popup: "tablesaw-columntoggle-popup",
        priorityPrefix: "tablesaw-priority-"
      };
      this.set = [];
      this.$headers = this.tablesaw._getPrimaryHeaderCells();
      this.$table.data(data.key, this);
    }; // Column Toggle Sets (one column chooser can control multiple tables)


    ColumnToggle.prototype.initSet = function () {
      var set = this.$table.attr(this.attributes.set);

      if (set) {
        // Should not include the current table
        var table = this.$table[0];
        this.set = $("table[" + this.attributes.set + "='" + set + "']").filter(function () {
          return this !== table;
        }).get();
      }
    };

    ColumnToggle.prototype.init = function () {
      if (!this.$table.length) {
        return;
      }

      var tableId,
          id,
          $menuButton,
          $popup,
          $menu,
          $btnContain,
          self = this;
      var cfg = this.tablesaw.getConfig({
        getColumnToggleLabelTemplate: function getColumnToggleLabelTemplate(text) {
          return "<label><input type='checkbox' checked>" + text + "</label>";
        }
      });
      this.$table.addClass(this.classes.columnToggleTable);
      tableId = this.$table.attr("id");
      id = tableId + "-popup";
      $btnContain = $("<div class='" + this.classes.columnBtnContain + "'></div>"); // TODO next major version: remove .btn

      $menuButton = $("<a href='#" + id + "' class='btn tablesaw-btn btn-micro " + this.classes.columnBtn + "' data-popup-link>" + "<span>" + Tablesaw.i18n.columnToggleButton + "</span></a>");
      $popup = $("<div class='" + this.classes.popup + "' id='" + id + "'></div>");
      $menu = $("<div class='btn-group'></div>");
      this.$popup = $popup;
      var hasNonPersistentHeaders = false;
      this.$headers.each(function () {
        var $this = $(this),
            priority = $this.attr("data-tablesaw-priority"),
            $cells = self.tablesaw._$getCells(this);

        if (priority && priority !== "persist") {
          $cells.addClass(self.classes.priorityPrefix + priority);
          $(cfg.getColumnToggleLabelTemplate($this.text())).appendTo($menu).find('input[type="checkbox"]').data("tablesaw-header", this);
          hasNonPersistentHeaders = true;
        }
      });

      if (!hasNonPersistentHeaders) {
        $menu.append("<label>" + Tablesaw.i18n.columnToggleError + "</label>");
      }

      $menu.appendTo($popup);

      function onToggleCheckboxChange(checkbox) {
        var checked = checkbox.checked;
        var header = self.getHeaderFromCheckbox(checkbox);

        var $cells = self.tablesaw._$getCells(header);

        $cells[!checked ? "addClass" : "removeClass"]("tablesaw-toggle-cellhidden");
        $cells[checked ? "addClass" : "removeClass"]("tablesaw-toggle-cellvisible");
        self.updateColspanCells(header, checked);
        self.$table.trigger("tablesawcolumns");
      } // bind change event listeners to inputs - TODO: move to a private method?


      $menu.find('input[type="checkbox"]').on("change", function (e) {
        onToggleCheckboxChange(e.target);

        if (self.set.length) {
          var index;
          $(self.$popup).find("input[type='checkbox']").each(function (j) {
            if (this === e.target) {
              index = j;
              return false;
            }
          });
          $(self.set).each(function () {
            var checkbox = $(this).data(data.key).$popup.find("input[type='checkbox']").get(index);

            if (checkbox) {
              checkbox.checked = e.target.checked;
              onToggleCheckboxChange(checkbox);
            }
          });
        }
      });
      $menuButton.appendTo($btnContain); // Use a different target than the toolbar

      var $btnTarget = $(this.$table.attr(this.attributes.btnTarget));
      $btnContain.appendTo($btnTarget.length ? $btnTarget : this.tablesaw.$toolbar);

      function closePopup(event) {
        // Click came from inside the popup, ignore.
        if (event && $(event.target).closest("." + self.classes.popup).length) {
          return;
        }

        $(document).off("click." + tableId);
        $menuButton.removeClass("up").addClass("down");
        $btnContain.removeClass("visible");
      }

      var closeTimeout;

      function openPopup() {
        $btnContain.addClass("visible");
        $menuButton.removeClass("down").addClass("up");
        $(document).off("click." + tableId, closePopup);
        window.clearTimeout(closeTimeout);
        closeTimeout = window.setTimeout(function () {
          $(document).on("click." + tableId, closePopup);
        }, 15);
      }

      $menuButton.on("click.tablesaw", function (event) {
        event.preventDefault();

        if (!$btnContain.is(".visible")) {
          openPopup();
        } else {
          closePopup();
        }
      });
      $popup.appendTo($btnContain);
      this.$menu = $menu; // Fix for iOS not rendering shadows correctly when using `-webkit-overflow-scrolling`

      var $overflow = this.$table.closest(".tablesaw-overflow");

      if ($overflow.css("-webkit-overflow-scrolling")) {
        var timeout;
        $overflow.on("scroll", function () {
          var $div = $(this);
          window.clearTimeout(timeout);
          timeout = window.setTimeout(function () {
            $div.css("-webkit-overflow-scrolling", "auto");
            window.setTimeout(function () {
              $div.css("-webkit-overflow-scrolling", "touch");
            }, 0);
          }, 100);
        });
      }

      $(window).on(Tablesaw.events.resize + "." + tableId, function () {
        self.refreshToggle();
      });
      this.initSet();
      this.refreshToggle();
    };

    ColumnToggle.prototype.getHeaderFromCheckbox = function (checkbox) {
      return $(checkbox).data("tablesaw-header");
    };

    ColumnToggle.prototype.refreshToggle = function () {
      var self = this;
      var invisibleColumns = 0;
      this.$menu.find("input").each(function () {
        var header = self.getHeaderFromCheckbox(this);
        this.checked = self.tablesaw._$getCells(header).eq(0).css("display") === "table-cell";
      });
      this.updateColspanCells();
    };

    ColumnToggle.prototype.updateColspanCells = function (header, userAction) {
      this.tablesaw.updateColspanCells("tablesaw-toggle-cellhidden", header, userAction);
    };

    ColumnToggle.prototype.destroy = function () {
      this.$table.removeClass(this.classes.columnToggleTable);
      this.$table.find("th, td").each(function () {
        var $cell = $(this);
        $cell.removeClass("tablesaw-toggle-cellhidden").removeClass("tablesaw-toggle-cellvisible");
        this.className = this.className.replace(/\bui\-table\-priority\-\d\b/g, "");
      });
    }; // on tablecreate, init


    $(document).on(Tablesaw.events.create, function (e, tablesaw) {
      if (tablesaw.mode === "columntoggle") {
        var table = new ColumnToggle(tablesaw.table);
        table.init();
      }
    });
    $(document).on(Tablesaw.events.destroy, function (e, tablesaw) {
      if (tablesaw.mode === "columntoggle") {
        $(tablesaw.table).data(data.key).destroy();
      }
    });
    $(document).on(Tablesaw.events.refresh, function (e, tablesaw) {
      if (tablesaw.mode === "columntoggle") {
        $(tablesaw.table).data(data.key).refreshPriority();
      }
    });
    Tablesaw.ColumnToggle = ColumnToggle;
  })();

  (function () {
    function getSortValue(cell) {
      var text = [];
      $(cell.childNodes).each(function () {
        var $el = $(this);

        if ($el.is("input, select")) {
          text.push($el.val());
        } else if ($el.is(".tablesaw-cell-label")) {} else {
          text.push(($el.text() || "").replace(/^\s+|\s+$/g, ""));
        }
      });
      return text.join("");
    }

    var pluginName = "tablesaw-sortable",
        initSelector = "table[data-" + pluginName + "]",
        sortableSwitchSelector = "[data-" + pluginName + "-switch]",
        attrs = {
      sortCol: "data-tablesaw-sortable-col",
      defaultCol: "data-tablesaw-sortable-default-col",
      numericCol: "data-tablesaw-sortable-numeric",
      subRow: "data-tablesaw-subrow",
      ignoreRow: "data-tablesaw-ignorerow"
    },
        classes = {
      head: pluginName + "-head",
      ascend: pluginName + "-ascending",
      descend: pluginName + "-descending",
      switcher: pluginName + "-switch",
      tableToolbar: "tablesaw-bar-section",
      sortButton: pluginName + "-btn"
    },
        methods = {
      _create: function _create(o) {
        return $(this).each(function () {
          var init = $(this).data(pluginName + "-init");

          if (init) {
            return false;
          }

          $(this).data(pluginName + "-init", true).trigger("beforecreate." + pluginName)[pluginName]("_init", o).trigger("create." + pluginName);
        });
      },
      _init: function _init() {
        var el = $(this);
        var tblsaw = el.data("tablesaw");
        var heads;
        var $switcher;

        function addClassToHeads(h) {
          $.each(h, function (i, v) {
            $(v).addClass(classes.head);
          });
        }

        function makeHeadsActionable(h, fn) {
          $.each(h, function (i, col) {
            var b = $("<button class='" + classes.sortButton + "'/>");
            b.on("click", {
              col: col
            }, fn);
            $(col).wrapInner(b).find("button").append("<span class='tablesaw-sortable-arrow'>");
          });
        }

        function clearOthers(headcells) {
          $.each(headcells, function (i, v) {
            var col = $(v);
            col.removeAttr(attrs.defaultCol);
            col.removeClass(classes.ascend);
            col.removeClass(classes.descend);
          });
        }

        function headsOnAction(e) {
          if ($(e.target).is("a[href]")) {
            return;
          }

          e.stopPropagation();
          var headCell = $(e.target).closest("[" + attrs.sortCol + "]"),
              v = e.data.col,
              newSortValue = heads.index(headCell[0]);
          clearOthers(headCell.closest("thead").find("th").filter(function () {
            return this !== headCell[0];
          }));

          if (headCell.is("." + classes.descend) || !headCell.is("." + classes.ascend)) {
            el[pluginName]("sortBy", v, true);
            newSortValue += "_asc";
          } else {
            el[pluginName]("sortBy", v);
            newSortValue += "_desc";
          }

          if ($switcher) {
            $switcher.find("select").val(newSortValue).trigger("refresh");
          }

          e.preventDefault();
        }

        function handleDefault(heads) {
          $.each(heads, function (idx, el) {
            var $el = $(el);

            if ($el.is("[" + attrs.defaultCol + "]")) {
              if (!$el.is("." + classes.descend)) {
                $el.addClass(classes.ascend);
              }
            }
          });
        }

        function addSwitcher(heads) {
          $switcher = $("<div>").addClass(classes.switcher).addClass(classes.tableToolbar);
          var html = ["<label>" + Tablesaw.i18n.sort + ":"]; // TODO next major version: remove .btn

          html.push('<span class="btn tablesaw-btn"><select>');
          heads.each(function (j) {
            var $t = $(this);
            var isDefaultCol = $t.is("[" + attrs.defaultCol + "]");
            var isDescending = $t.is("." + classes.descend);
            var hasNumericAttribute = $t.is("[" + attrs.numericCol + "]");
            var numericCount = 0; // Check only the first four rows to see if the column is numbers.

            var numericCountMax = 5;
            $(this.cells.slice(0, numericCountMax)).each(function () {
              if (!isNaN(parseInt(getSortValue(this), 10))) {
                numericCount++;
              }
            });
            var isNumeric = numericCount === numericCountMax;

            if (!hasNumericAttribute) {
              $t.attr(attrs.numericCol, isNumeric ? "" : "false");
            }

            html.push("<option" + (isDefaultCol && !isDescending ? " selected" : "") + ' value="' + j + '_asc">' + $t.text() + " " + (isNumeric ? "&#x2191;" : "(A-Z)") + "</option>");
            html.push("<option" + (isDefaultCol && isDescending ? " selected" : "") + ' value="' + j + '_desc">' + $t.text() + " " + (isNumeric ? "&#x2193;" : "(Z-A)") + "</option>");
          });
          html.push("</select></span></label>");
          $switcher.html(html.join(""));
          var $firstChild = tblsaw.$toolbar.children().eq(0);

          if ($firstChild.length) {
            $switcher.insertBefore($firstChild);
          } else {
            $switcher.appendTo(tblsaw.$toolbar);
          }

          $switcher.find(".tablesaw-btn").tablesawbtn();
          $switcher.find("select").on("change", function () {
            var val = $(this).val().split("_"),
                head = heads.eq(val[0]);
            clearOthers(head.siblings());
            el[pluginName]("sortBy", head.get(0), val[1] === "asc");
          });
        }

        el.addClass(pluginName);
        heads = el.children().filter("thead").find("th[" + attrs.sortCol + "]");
        addClassToHeads(heads);
        makeHeadsActionable(heads, headsOnAction);
        handleDefault(heads);

        if (el.is(sortableSwitchSelector)) {
          addSwitcher(heads);
        }
      },
      sortRows: function sortRows(rows, colNum, ascending, col, tbody) {
        function convertCells(cellArr, belongingToTbody) {
          var cells = [];
          $.each(cellArr, function (i, cell) {
            var row = cell.parentNode;
            var $row = $(row); // next row is a subrow

            var subrows = [];
            var $next = $row.next();

            while ($next.is("[" + attrs.subRow + "]")) {
              subrows.push($next[0]);
              $next = $next.next();
            }

            var tbody = row.parentNode; // current row is a subrow

            if ($row.is("[" + attrs.subRow + "]")) {} else if (tbody === belongingToTbody) {
              cells.push({
                element: cell,
                cell: getSortValue(cell),
                row: row,
                subrows: subrows.length ? subrows : null,
                ignored: $row.is("[" + attrs.ignoreRow + "]")
              });
            }
          });
          return cells;
        }

        function getSortFxn(ascending, forceNumeric) {
          var fn,
              regex = /[^\-\+\d\.]/g;

          if (ascending) {
            fn = function fn(a, b) {
              if (a.ignored || b.ignored) {
                return 0;
              }

              if (forceNumeric) {
                return parseFloat(a.cell.replace(regex, "")) - parseFloat(b.cell.replace(regex, ""));
              } else {
                return a.cell.toLowerCase() > b.cell.toLowerCase() ? 1 : -1;
              }
            };
          } else {
            fn = function fn(a, b) {
              if (a.ignored || b.ignored) {
                return 0;
              }

              if (forceNumeric) {
                return parseFloat(b.cell.replace(regex, "")) - parseFloat(a.cell.replace(regex, ""));
              } else {
                return a.cell.toLowerCase() < b.cell.toLowerCase() ? 1 : -1;
              }
            };
          }

          return fn;
        }

        function convertToRows(sorted) {
          var newRows = [],
              i,
              l;

          for (i = 0, l = sorted.length; i < l; i++) {
            newRows.push(sorted[i].row);

            if (sorted[i].subrows) {
              newRows.push(sorted[i].subrows);
            }
          }

          return newRows;
        }

        var fn;
        var sorted;
        var cells = convertCells(col.cells, tbody);
        var customFn = $(col).data("tablesaw-sort");
        fn = (customFn && typeof customFn === "function" ? customFn(ascending) : false) || getSortFxn(ascending, $(col).is("[" + attrs.numericCol + "]") && !$(col).is("[" + attrs.numericCol + '="false"]'));
        sorted = cells.sort(fn);
        rows = convertToRows(sorted);
        return rows;
      },
      makeColDefault: function makeColDefault(col, a) {
        var c = $(col);
        c.attr(attrs.defaultCol, "true");

        if (a) {
          c.removeClass(classes.descend);
          c.addClass(classes.ascend);
        } else {
          c.removeClass(classes.ascend);
          c.addClass(classes.descend);
        }
      },
      sortBy: function sortBy(col, ascending) {
        var el = $(this);
        var colNum;
        var tbl = el.data("tablesaw");
        tbl.$tbody.each(function () {
          var tbody = this;
          var $tbody = $(this);
          var rows = tbl.getBodyRows(tbody);
          var sortedRows;
          var map = tbl.headerMapping[0];
          var j, k; // find the column number that we’re sorting

          for (j = 0, k = map.length; j < k; j++) {
            if (map[j] === col) {
              colNum = j;
              break;
            }
          }

          sortedRows = el[pluginName]("sortRows", rows, colNum, ascending, col, tbody); // replace Table rows

          for (j = 0, k = sortedRows.length; j < k; j++) {
            $tbody.append(sortedRows[j]);
          }
        });
        el[pluginName]("makeColDefault", col, ascending);
        el.trigger("tablesaw-sorted");
      }
    }; // Collection method.

    $.fn[pluginName] = function (arrg) {
      var args = Array.prototype.slice.call(arguments, 1),
          returnVal; // if it's a method

      if (arrg && typeof arrg === "string") {
        returnVal = $.fn[pluginName].prototype[arrg].apply(this[0], args);
        return typeof returnVal !== "undefined" ? returnVal : $(this);
      } // check init


      if (!$(this).data(pluginName + "-active")) {
        $(this).data(pluginName + "-active", true);

        $.fn[pluginName].prototype._create.call(this, arrg);
      }

      return $(this);
    }; // add methods


    $.extend($.fn[pluginName].prototype, methods);
    $(document).on(Tablesaw.events.create, function (e, Tablesaw) {
      if (Tablesaw.$table.is(initSelector)) {
        Tablesaw.$table[pluginName]();
      }
    }); // TODO OOP this and add to Tablesaw object
  })();

  (function () {
    var classes = {
      hideBtn: "disabled",
      persistWidths: "tablesaw-fix-persist",
      hiddenCol: "tablesaw-swipe-cellhidden",
      persistCol: "tablesaw-swipe-cellpersist",
      allColumnsVisible: "tablesaw-all-cols-visible"
    };
    var attrs = {
      disableTouchEvents: "data-tablesaw-no-touch",
      ignorerow: "data-tablesaw-ignorerow",
      subrow: "data-tablesaw-subrow"
    };

    function createSwipeTable(tbl, $table) {
      var tblsaw = $table.data("tablesaw");
      var $btns = $("<div class='tablesaw-advance'></div>"); // TODO next major version: remove .btn

      var $prevBtn = $("<a href='#' class='btn tablesaw-nav-btn tablesaw-btn btn-micro left'>" + Tablesaw.i18n.swipePreviousColumn + "</a>").appendTo($btns); // TODO next major version: remove .btn

      var $nextBtn = $("<a href='#' class='btn tablesaw-nav-btn tablesaw-btn btn-micro right'>" + Tablesaw.i18n.swipeNextColumn + "</a>").appendTo($btns);

      var $headerCells = tbl._getPrimaryHeaderCells();

      var $headerCellsNoPersist = $headerCells.not('[data-tablesaw-priority="persist"]');
      var headerWidths = [];
      var $head = $(document.head || "head");
      var tableId = $table.attr("id");

      if (!$headerCells.length) {
        throw new Error("tablesaw swipe: no header cells found.");
      }

      $table.addClass("tablesaw-swipe");

      function initMinHeaderWidths() {
        $table.css({
          width: "1px"
        }); // remove any hidden columns

        $table.find("." + classes.hiddenCol).removeClass(classes.hiddenCol);
        headerWidths = []; // Calculate initial widths

        $headerCells.each(function () {
          headerWidths.push(this.offsetWidth);
        }); // reset props

        $table.css({
          width: ""
        });
      }

      initMinHeaderWidths();
      $btns.appendTo(tblsaw.$toolbar);

      if (!tableId) {
        tableId = "tableswipe-" + Math.round(Math.random() * 10000);
        $table.attr("id", tableId);
      }

      function showColumn(headerCell) {
        tblsaw._$getCells(headerCell).removeClass(classes.hiddenCol);
      }

      function hideColumn(headerCell) {
        tblsaw._$getCells(headerCell).addClass(classes.hiddenCol);
      }

      function persistColumn(headerCell) {
        tblsaw._$getCells(headerCell).addClass(classes.persistCol);
      }

      function isPersistent(headerCell) {
        return $(headerCell).is('[data-tablesaw-priority="persist"]');
      }

      function unmaintainWidths() {
        $table.removeClass(classes.persistWidths);
        $("#" + tableId + "-persist").remove();
      }

      function maintainWidths() {
        var prefix = "#" + tableId + ".tablesaw-swipe ",
            styles = [],
            tableWidth = $table.width(),
            hash = [],
            newHash; // save persistent column widths (as long as they take up less than 75% of table width)

        $headerCells.each(function (index) {
          var width;

          if (isPersistent(this)) {
            width = this.offsetWidth;

            if (width < tableWidth * 0.75) {
              hash.push(index + "-" + width);
              styles.push(prefix + " ." + classes.persistCol + ":nth-child(" + (index + 1) + ") { width: " + width + "px; }");
            }
          }
        });
        newHash = hash.join("_");

        if (styles.length) {
          $table.addClass(classes.persistWidths);
          var $style = $("#" + tableId + "-persist"); // If style element not yet added OR if the widths have changed

          if (!$style.length || $style.data("tablesaw-hash") !== newHash) {
            // Remove existing
            $style.remove();
            $("<style>" + styles.join("\n") + "</style>").attr("id", tableId + "-persist").data("tablesaw-hash", newHash).appendTo($head);
          }
        }
      }

      function getNext() {
        var next = [],
            checkFound;
        $headerCellsNoPersist.each(function (i) {
          var $t = $(this),
              isHidden = $t.css("display") === "none" || $t.is("." + classes.hiddenCol);

          if (!isHidden && !checkFound) {
            checkFound = true;
            next[0] = i;
          } else if (isHidden && checkFound) {
            next[1] = i;
            return false;
          }
        });
        return next;
      }

      function getPrev() {
        var next = getNext();
        return [next[1] - 1, next[0] - 1];
      }

      function nextpair(fwd) {
        return fwd ? getNext() : getPrev();
      }

      function canAdvance(pair) {
        return pair[1] > -1 && pair[1] < $headerCellsNoPersist.length;
      }

      function matchesMedia() {
        var matchMedia = $table.attr("data-tablesaw-swipe-media");
        return !matchMedia || "matchMedia" in window && window.matchMedia(matchMedia).matches;
      }

      function fakeBreakpoints() {
        if (!matchesMedia()) {
          return;
        }

        var containerWidth = $table.parent().width(),
            persist = [],
            sum = 0,
            sums = [],
            visibleNonPersistantCount = $headerCells.length;
        $headerCells.each(function (index) {
          var $t = $(this),
              isPersist = $t.is('[data-tablesaw-priority="persist"]');
          persist.push(isPersist);
          sum += headerWidths[index];
          sums.push(sum); // is persistent or is hidden

          if (isPersist || sum > containerWidth) {
            visibleNonPersistantCount--;
          }
        }); // We need at least one column to swipe.

        var needsNonPersistentColumn = visibleNonPersistantCount === 0;
        $headerCells.each(function (index) {
          if (sums[index] > containerWidth) {
            hideColumn(this);
          }
        });
        $headerCells.each(function (index) {
          if (persist[index]) {
            // for visual box-shadow
            persistColumn(this);
            return;
          }

          if (sums[index] <= containerWidth || needsNonPersistentColumn) {
            needsNonPersistentColumn = false;
            showColumn(this);
            tblsaw.updateColspanCells(classes.hiddenCol, this, true);
          }
        });
        unmaintainWidths();
        $table.trigger("tablesawcolumns");
      }

      function advance(fwd) {
        var pair = nextpair(fwd);

        if (canAdvance(pair)) {
          if (isNaN(pair[0])) {
            if (fwd) {
              pair[0] = 0;
            } else {
              pair[0] = $headerCellsNoPersist.length - 1;
            }
          } // TODO just blindly hiding the previous column and showing the next column can result in
          // column content overflow


          maintainWidths();
          hideColumn($headerCellsNoPersist.get(pair[0]));
          tblsaw.updateColspanCells(classes.hiddenCol, $headerCellsNoPersist.get(pair[0]), false);
          showColumn($headerCellsNoPersist.get(pair[1]));
          tblsaw.updateColspanCells(classes.hiddenCol, $headerCellsNoPersist.get(pair[1]), true);
          $table.trigger("tablesawcolumns");
        }
      }

      $prevBtn.add($nextBtn).on("click", function (e) {
        advance(!!$(e.target).closest($nextBtn).length);
        e.preventDefault();
      });

      function getCoord(event, key) {
        return (event.touches || event.originalEvent.touches)[0][key];
      }

      if (!$table.is("[" + attrs.disableTouchEvents + "]")) {
        $table.on("touchstart.swipetoggle", function (e) {
          var originX = getCoord(e, "pageX");
          var originY = getCoord(e, "pageY");
          var x;
          var y;
          var scrollTop = window.pageYOffset;
          $(window).off(Tablesaw.events.resize, fakeBreakpoints);
          $(this).on("touchmove.swipetoggle", function (e) {
            x = getCoord(e, "pageX");
            y = getCoord(e, "pageY");
          }).on("touchend.swipetoggle", function () {
            var cfg = tbl.getConfig({
              swipeHorizontalThreshold: 30,
              swipeVerticalThreshold: 30
            }); // This config code is a little awkward because shoestring doesn’t support deep $.extend
            // Trying to work around when devs only override one of (not both) horizontalThreshold or
            // verticalThreshold in their TablesawConfig.
            // @TODO major version bump: remove cfg.swipe, move to just use the swipePrefix keys

            var verticalThreshold = cfg.swipe ? cfg.swipe.verticalThreshold : cfg.swipeVerticalThreshold;
            var horizontalThreshold = cfg.swipe ? cfg.swipe.horizontalThreshold : cfg.swipeHorizontalThreshold;
            var isPageScrolled = Math.abs(window.pageYOffset - scrollTop) >= verticalThreshold;
            var isVerticalSwipe = Math.abs(y - originY) >= verticalThreshold;

            if (!isVerticalSwipe && !isPageScrolled) {
              if (x - originX < -1 * horizontalThreshold) {
                advance(true);
              }

              if (x - originX > horizontalThreshold) {
                advance(false);
              }
            }

            window.setTimeout(function () {
              $(window).on(Tablesaw.events.resize, fakeBreakpoints);
            }, 300);
            $(this).off("touchmove.swipetoggle touchend.swipetoggle");
          });
        });
      }

      $table.on("tablesawcolumns.swipetoggle", function () {
        var canGoPrev = canAdvance(getPrev());
        var canGoNext = canAdvance(getNext());
        $prevBtn[canGoPrev ? "removeClass" : "addClass"](classes.hideBtn);
        $nextBtn[canGoNext ? "removeClass" : "addClass"](classes.hideBtn);
        tblsaw.$toolbar[!canGoPrev && !canGoNext ? "addClass" : "removeClass"](classes.allColumnsVisible);
      }).on("tablesawnext.swipetoggle", function () {
        advance(true);
      }).on("tablesawprev.swipetoggle", function () {
        advance(false);
      }).on(Tablesaw.events.destroy + ".swipetoggle", function () {
        var $t = $(this);
        $t.removeClass("tablesaw-swipe");
        tblsaw.$toolbar.find(".tablesaw-advance").remove();
        $(window).off(Tablesaw.events.resize, fakeBreakpoints);
        $t.off(".swipetoggle");
      }).on(Tablesaw.events.refresh, function () {
        unmaintainWidths();
        initMinHeaderWidths();
        fakeBreakpoints();
      });
      fakeBreakpoints();
      $(window).on(Tablesaw.events.resize, fakeBreakpoints);
    } // on tablecreate, init


    $(document).on(Tablesaw.events.create, function (e, tablesaw) {
      if (tablesaw.mode === "swipe") {
        createSwipeTable(tablesaw, tablesaw.$table);
      }
    }); // TODO OOP this and add to Tablesaw object
  })();

  (function () {
    var MiniMap = {
      attr: {
        init: "data-tablesaw-minimap"
      },
      show: function show(table) {
        var mq = table.getAttribute(MiniMap.attr.init);

        if (mq === "") {
          // value-less but exists
          return true;
        } else if (mq && "matchMedia" in window) {
          // has a mq value
          return window.matchMedia(mq).matches;
        }

        return false;
      }
    };

    function createMiniMap($table) {
      var tblsaw = $table.data("tablesaw");
      var $btns = $('<div class="tablesaw-advance minimap">');
      var $dotNav = $('<ul class="tablesaw-advance-dots">').appendTo($btns);
      var hideDot = "tablesaw-advance-dots-hide";

      var $headerCells = $table.data("tablesaw")._getPrimaryHeaderCells(); // populate dots


      $headerCells.each(function () {
        $dotNav.append("<li><i></i></li>");
      });
      $btns.appendTo(tblsaw.$toolbar);

      function showHideNav() {
        if (!MiniMap.show($table[0])) {
          $btns.css("display", "none");
          return;
        }

        $btns.css("display", "block"); // show/hide dots

        var dots = $dotNav.find("li").removeClass(hideDot);
        $table.find("thead th").each(function (i) {
          if ($(this).css("display") === "none") {
            dots.eq(i).addClass(hideDot);
          }
        });
      } // run on init and resize


      showHideNav();
      $(window).on(Tablesaw.events.resize, showHideNav);
      $table.on("tablesawcolumns.minimap", function () {
        showHideNav();
      }).on(Tablesaw.events.destroy + ".minimap", function () {
        var $t = $(this);
        tblsaw.$toolbar.find(".tablesaw-advance").remove();
        $(window).off(Tablesaw.events.resize, showHideNav);
        $t.off(".minimap");
      });
    } // on tablecreate, init


    $(document).on(Tablesaw.events.create, function (e, tablesaw) {
      if ((tablesaw.mode === "swipe" || tablesaw.mode === "columntoggle") && tablesaw.$table.is("[ " + MiniMap.attr.init + "]")) {
        createMiniMap(tablesaw.$table);
      }
    }); // TODO OOP this better

    Tablesaw.MiniMap = MiniMap;
  })();

  (function () {
    var S = {
      selectors: {
        init: "table[data-tablesaw-mode-switch]"
      },
      attributes: {
        excludeMode: "data-tablesaw-mode-exclude"
      },
      classes: {
        main: "tablesaw-modeswitch",
        toolbar: "tablesaw-bar-section"
      },
      modes: ["stack", "swipe", "columntoggle"],
      init: function init(table) {
        var $table = $(table);
        var tblsaw = $table.data("tablesaw");
        var ignoreMode = $table.attr(S.attributes.excludeMode);
        var $toolbar = tblsaw.$toolbar;
        var $switcher = $("<div>").addClass(S.classes.main + " " + S.classes.toolbar);
        var html = ['<label><span class="abbreviated">' + Tablesaw.i18n.modeSwitchColumnsAbbreviated + '</span><span class="longform">' + Tablesaw.i18n.modeSwitchColumns + "</span>:"],
            dataMode = $table.attr("data-tablesaw-mode"),
            isSelected; // TODO next major version: remove .btn

        html.push('<span class="btn tablesaw-btn"><select>');

        for (var j = 0, k = S.modes.length; j < k; j++) {
          if (ignoreMode && ignoreMode.toLowerCase() === S.modes[j]) {
            continue;
          }

          isSelected = dataMode === S.modes[j];
          html.push("<option" + (isSelected ? " selected" : "") + ' value="' + S.modes[j] + '">' + Tablesaw.i18n.modes[j] + "</option>");
        }

        html.push("</select></span></label>");
        $switcher.html(html.join(""));
        var $otherToolbarItems = $toolbar.find(".tablesaw-advance").eq(0);

        if ($otherToolbarItems.length) {
          $switcher.insertBefore($otherToolbarItems);
        } else {
          $switcher.appendTo($toolbar);
        }

        $switcher.find(".tablesaw-btn").tablesawbtn();
        $switcher.find("select").on("change", function (event) {
          return S.onModeChange.call(table, event, $(this).val());
        });
      },
      onModeChange: function onModeChange(event, val) {
        var $table = $(this);
        var tblsaw = $table.data("tablesaw");
        var $switcher = tblsaw.$toolbar.find("." + S.classes.main);
        $switcher.remove();
        tblsaw.destroy();
        $table.attr("data-tablesaw-mode", val);
        $table.tablesaw();
      }
    };
    $(document).on(Tablesaw.events.create, function (e, Tablesaw) {
      if (Tablesaw.$table.is(S.selectors.init)) {
        S.init(Tablesaw.table);
      }
    }); // TODO OOP this and add to Tablesaw object
  })();

  (function () {
    var pluginName = "tablesawCheckAll";

    function CheckAll(tablesaw) {
      this.tablesaw = tablesaw;
      this.$table = tablesaw.$table;
      this.attr = "data-tablesaw-checkall";
      this.checkAllSelector = "[" + this.attr + "]";
      this.forceCheckedSelector = "[" + this.attr + "-checked]";
      this.forceUncheckedSelector = "[" + this.attr + "-unchecked]";
      this.checkboxSelector = 'input[type="checkbox"]';
      this.$triggers = null;
      this.$checkboxes = null;

      if (this.$table.data(pluginName)) {
        return;
      }

      this.$table.data(pluginName, this);
      this.init();
    }

    CheckAll.prototype._filterCells = function ($checkboxes) {
      return $checkboxes.filter(function () {
        return !$(this).closest("tr").is("[data-tablesaw-subrow],[data-tablesaw-ignorerow]");
      }).find(this.checkboxSelector).not(this.checkAllSelector);
    }; // With buttons you can use a scoping selector like: data-tablesaw-checkall="#my-scoped-id input[type='checkbox']"


    CheckAll.prototype.getCheckboxesForButton = function (button) {
      return this._filterCells($($(button).attr(this.attr)));
    };

    CheckAll.prototype.getCheckboxesForCheckbox = function (checkbox) {
      return this._filterCells($($(checkbox).closest("th")[0].cells));
    };

    CheckAll.prototype.init = function () {
      var self = this;
      this.$table.find(this.checkAllSelector).each(function () {
        var $trigger = $(this);

        if ($trigger.is(self.checkboxSelector)) {
          self.addCheckboxEvents(this);
        } else {
          self.addButtonEvents(this);
        }
      });
    };

    CheckAll.prototype.addButtonEvents = function (trigger) {
      var self = this; // Update body checkboxes when header checkbox is changed

      $(trigger).on("click", function (event) {
        event.preventDefault();
        var $checkboxes = self.getCheckboxesForButton(this);
        var allChecked = true;
        $checkboxes.each(function () {
          if (!this.checked) {
            allChecked = false;
          }
        });
        var setChecked;

        if ($(this).is(self.forceCheckedSelector)) {
          setChecked = true;
        } else if ($(this).is(self.forceUncheckedSelector)) {
          setChecked = false;
        } else {
          setChecked = allChecked ? false : true;
        }

        $checkboxes.each(function () {
          this.checked = setChecked;
          $(this).trigger("change." + pluginName);
        });
      });
    };

    CheckAll.prototype.addCheckboxEvents = function (trigger) {
      var self = this; // Update body checkboxes when header checkbox is changed

      $(trigger).on("change", function () {
        var setChecked = this.checked;
        self.getCheckboxesForCheckbox(this).each(function () {
          this.checked = setChecked;
        });
      });
      var $checkboxes = self.getCheckboxesForCheckbox(trigger); // Update header checkbox when body checkboxes are changed

      $checkboxes.on("change." + pluginName, function () {
        var checkedCount = 0;
        $checkboxes.each(function () {
          if (this.checked) {
            checkedCount++;
          }
        });
        var allSelected = checkedCount === $checkboxes.length;
        trigger.checked = allSelected; // only indeterminate if some are selected (not all and not none)

        trigger.indeterminate = checkedCount !== 0 && !allSelected;
      });
    }; // on tablecreate, init


    $(document).on(Tablesaw.events.create, function (e, tablesaw) {
      new CheckAll(tablesaw);
    });
    Tablesaw.CheckAll = CheckAll;
  })();

  return Tablesaw;
});

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./node_modules/what-input/dist/what-input.js":
/*!****************************************************!*\
  !*** ./node_modules/what-input/dist/what-input.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
 * @version v5.1.2
 * @link https://github.com/ten1seven/what-input
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId])
          /******/
          return installedModules[moduleId].exports;
        /******/
        // Create a new module (and put it into the cache)

        /******/

        var module = installedModules[moduleId] = {
          /******/
          exports: {},

          /******/
          id: moduleId,

          /******/
          loaded: false
          /******/

        };
        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        // Flag the module as loaded

        /******/

        module.loaded = true;
        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/
      // __webpack_public_path__

      /******/

      __webpack_require__.p = "";
      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(0);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports) {
      'use strict';

      module.exports = function () {
        /*
         * bail out if there is no document or window
         * (i.e. in a node/non-DOM environment)
         *
         * Return a stubbed API instead
         */
        if (typeof document === 'undefined' || typeof window === 'undefined') {
          return {
            // always return "initial" because no interaction will ever be detected
            ask: function ask() {
              return 'initial';
            },
            // always return null
            element: function element() {
              return null;
            },
            // no-op
            ignoreKeys: function ignoreKeys() {},
            // no-op
            specificKeys: function specificKeys() {},
            // no-op
            registerOnChange: function registerOnChange() {},
            // no-op
            unRegisterOnChange: function unRegisterOnChange() {}
          };
        }
        /*
         * variables
         */
        // cache document.documentElement


        var docElem = document.documentElement; // currently focused dom element

        var currentElement = null; // last used input type

        var currentInput = 'initial'; // last used input intent

        var currentIntent = currentInput; // check for sessionStorage support
        // then check for session variables and use if available

        try {
          if (window.sessionStorage.getItem('what-input')) {
            currentInput = window.sessionStorage.getItem('what-input');
          }

          if (window.sessionStorage.getItem('what-intent')) {
            currentIntent = window.sessionStorage.getItem('what-intent');
          }
        } catch (e) {} // event buffer timer


        var eventTimer = null; // form input types

        var formInputs = ['input', 'select', 'textarea']; // empty array for holding callback functions

        var functionList = []; // list of modifier keys commonly used with the mouse and
        // can be safely ignored to prevent false keyboard detection

        var ignoreMap = [16, // shift
        17, // control
        18, // alt
        91, // Windows key / left Apple cmd
        93 // Windows menu / right Apple cmd
        ];
        var specificMap = []; // mapping of events to input types

        var inputMap = {
          keydown: 'keyboard',
          keyup: 'keyboard',
          mousedown: 'mouse',
          mousemove: 'mouse',
          MSPointerDown: 'pointer',
          MSPointerMove: 'pointer',
          pointerdown: 'pointer',
          pointermove: 'pointer',
          touchstart: 'touch' // boolean: true if touch buffer is active

        };
        var isBuffering = false; // boolean: true if the page is being scrolled

        var isScrolling = false; // store current mouse position

        var mousePos = {
          x: null,
          y: null // map of IE 10 pointer events

        };
        var pointerMap = {
          2: 'touch',
          3: 'touch',
          // treat pen like touch
          4: 'mouse' // check support for passive event listeners

        };
        var supportsPassive = false;

        try {
          var opts = Object.defineProperty({}, 'passive', {
            get: function get() {
              supportsPassive = true;
            }
          });
          window.addEventListener('test', null, opts);
        } catch (e) {}
        /*
         * set up
         */


        var setUp = function setUp() {
          // add correct mouse wheel event mapping to `inputMap`
          inputMap[detectWheel()] = 'mouse';
          addListeners();
          doUpdate('input');
          doUpdate('intent');
        };
        /*
         * events
         */


        var addListeners = function addListeners() {
          // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding
          // can only demonstrate potential, but not actual, interaction
          // and are treated separately
          var options = supportsPassive ? {
            passive: true
          } : false; // pointer events (mouse, pen, touch)

          if (window.PointerEvent) {
            window.addEventListener('pointerdown', setInput);
            window.addEventListener('pointermove', setIntent);
          } else if (window.MSPointerEvent) {
            window.addEventListener('MSPointerDown', setInput);
            window.addEventListener('MSPointerMove', setIntent);
          } else {
            // mouse events
            window.addEventListener('mousedown', setInput);
            window.addEventListener('mousemove', setIntent); // touch events

            if ('ontouchstart' in window) {
              window.addEventListener('touchstart', eventBuffer, options);
              window.addEventListener('touchend', setInput);
            }
          } // mouse wheel


          window.addEventListener(detectWheel(), setIntent, options); // keyboard events

          window.addEventListener('keydown', eventBuffer);
          window.addEventListener('keyup', eventBuffer); // focus events

          window.addEventListener('focusin', setElement);
          window.addEventListener('focusout', clearElement);
        }; // checks conditions before updating new input


        var setInput = function setInput(event) {
          // only execute if the event buffer timer isn't running
          if (!isBuffering) {
            var eventKey = event.which;
            var value = inputMap[event.type];

            if (value === 'pointer') {
              value = pointerType(event);
            }

            var ignoreMatch = !specificMap.length && ignoreMap.indexOf(eventKey) === -1;
            var specificMatch = specificMap.length && specificMap.indexOf(eventKey) !== -1;
            var shouldUpdate = value === 'keyboard' && eventKey && (ignoreMatch || specificMatch) || value === 'mouse' || value === 'touch';

            if (currentInput !== value && shouldUpdate) {
              currentInput = value;

              try {
                window.sessionStorage.setItem('what-input', currentInput);
              } catch (e) {}

              doUpdate('input');
            }

            if (currentIntent !== value && shouldUpdate) {
              // preserve intent for keyboard typing in form fields
              var activeElem = document.activeElement;
              var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;

              if (notFormInput) {
                currentIntent = value;

                try {
                  window.sessionStorage.setItem('what-intent', currentIntent);
                } catch (e) {}

                doUpdate('intent');
              }
            }
          }
        }; // updates the doc and `inputTypes` array with new input


        var doUpdate = function doUpdate(which) {
          docElem.setAttribute('data-what' + which, which === 'input' ? currentInput : currentIntent);
          fireFunctions(which);
        }; // updates input intent for `mousemove` and `pointermove`


        var setIntent = function setIntent(event) {
          // test to see if `mousemove` happened relative to the screen to detect scrolling versus mousemove
          detectScrolling(event); // only execute if the event buffer timer isn't running
          // or scrolling isn't happening

          if (!isBuffering && !isScrolling) {
            var value = inputMap[event.type];

            if (value === 'pointer') {
              value = pointerType(event);
            }

            if (currentIntent !== value) {
              currentIntent = value;

              try {
                window.sessionStorage.setItem('what-intent', currentIntent);
              } catch (e) {}

              doUpdate('intent');
            }
          }
        };

        var setElement = function setElement(event) {
          if (!event.target.nodeName) {
            // If nodeName is undefined, clear the element
            // This can happen if click inside an <svg> element.
            clearElement();
            return;
          }

          currentElement = event.target.nodeName.toLowerCase();
          docElem.setAttribute('data-whatelement', currentElement);

          if (event.target.classList && event.target.classList.length) {
            docElem.setAttribute('data-whatclasses', event.target.classList.toString().replace(' ', ','));
          }
        };

        var clearElement = function clearElement() {
          currentElement = null;
          docElem.removeAttribute('data-whatelement');
          docElem.removeAttribute('data-whatclasses');
        }; // buffers events that frequently also fire mouse events


        var eventBuffer = function eventBuffer(event) {
          // set the current input
          setInput(event); // clear the timer if it happens to be running

          window.clearTimeout(eventTimer); // set the isBuffering to `true`

          isBuffering = true; // run the timer

          eventTimer = window.setTimeout(function () {
            // if the timer runs out, set isBuffering back to `false`
            isBuffering = false;
          }, 100);
        };
        /*
         * utilities
         */


        var pointerType = function pointerType(event) {
          if (typeof event.pointerType === 'number') {
            return pointerMap[event.pointerType];
          } else {
            // treat pen like touch
            return event.pointerType === 'pen' ? 'touch' : event.pointerType;
          }
        }; // detect version of mouse wheel event to use
        // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel


        var detectWheel = function detectWheel() {
          var wheelType = void 0; // Modern browsers support "wheel"

          if ('onwheel' in document.createElement('div')) {
            wheelType = 'wheel';
          } else {
            // Webkit and IE support at least "mousewheel"
            // or assume that remaining browsers are older Firefox
            wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';
          }

          return wheelType;
        }; // runs callback functions


        var fireFunctions = function fireFunctions(type) {
          for (var i = 0, len = functionList.length; i < len; i++) {
            if (functionList[i].type === type) {
              functionList[i].fn.call(undefined, type === 'input' ? currentInput : currentIntent);
            }
          }
        }; // finds matching element in an object


        var objPos = function objPos(match) {
          for (var i = 0, len = functionList.length; i < len; i++) {
            if (functionList[i].fn === match) {
              return i;
            }
          }
        };

        var detectScrolling = function detectScrolling(event) {
          if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {
            isScrolling = false;
            mousePos['x'] = event.screenX;
            mousePos['y'] = event.screenY;
          } else {
            isScrolling = true;
          }
        };
        /*
         * init
         */
        // don't start script unless browser cuts the mustard
        // (also passes if polyfills are used)


        if ('addEventListener' in window && Array.prototype.indexOf) {
          setUp();
        }
        /*
         * api
         */


        return {
          // returns string: the current input type
          // opt: 'intent'|'input'
          // 'input' (default): returns the same value as the `data-whatinput` attribute
          // 'intent': includes `data-whatintent` value if it's different than `data-whatinput`
          ask: function ask(opt) {
            return opt === 'intent' ? currentIntent : currentInput;
          },
          // returns string: the currently focused element or null
          element: function element() {
            return currentElement;
          },
          // overwrites ignored keys with provided array
          ignoreKeys: function ignoreKeys(arr) {
            ignoreMap = arr;
          },
          // overwrites specific char keys to update on
          specificKeys: function specificKeys(arr) {
            specificMap = arr;
          },
          // attach functions to input and intent "events"
          // funct: function to fire on change
          // eventType: 'input'|'intent'
          registerOnChange: function registerOnChange(fn, eventType) {
            functionList.push({
              fn: fn,
              type: eventType || 'input'
            });
          },
          unRegisterOnChange: function unRegisterOnChange(fn) {
            var position = objPos(fn);

            if (position || position === 0) {
              functionList.splice(position, 1);
            }
          }
        };
      }();
      /***/

    }])
  );
});

;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./src/assets/js/DeviceOrientationControls.js":
/*!****************************************************!*\
  !*** ./src/assets/js/DeviceOrientationControls.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @author richt / http://richt.me
 * @author WestLangley / http://github.com/WestLangley
 *
 * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)
 */
var THREE = __webpack_require__(/*! ./three.min.js */ "./src/assets/js/three.min.js");

THREE.DeviceOrientationControls = function (object) {
  var scope = this;
  this.object = object;
  this.object.rotation.reorder('YXZ');
  this.enabled = true;
  this.deviceOrientation = {};
  this.screenOrientation = 0;
  this.alphaOffset = 0; // radians

  var onDeviceOrientationChangeEvent = function onDeviceOrientationChangeEvent(event) {
    scope.deviceOrientation = event;
  };

  var onScreenOrientationChangeEvent = function onScreenOrientationChangeEvent() {
    scope.screenOrientation = window.orientation || 0;
  }; // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''


  var setObjectQuaternion = function () {
    var zee = new THREE.Vector3(0, 0, 1);
    var euler = new THREE.Euler();
    var q0 = new THREE.Quaternion();
    var q1 = new THREE.Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)); // - PI/2 around the x-axis

    return function (quaternion, alpha, beta, gamma, orient) {
      euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us

      quaternion.setFromEuler(euler); // orient the device

      quaternion.multiply(q1); // camera looks out the back of the device, not the top

      quaternion.multiply(q0.setFromAxisAngle(zee, -orient)); // adjust for screen orientation
    };
  }();

  this.connect = function () {
    onScreenOrientationChangeEvent(); // run once on load

    window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);
    window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);
    scope.enabled = true;
  };

  this.disconnect = function () {
    window.removeEventListener('orientationchange', onScreenOrientationChangeEvent, false);
    window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);
    scope.enabled = false;
  };

  this.update = function () {
    if (scope.enabled === false) return;
    var device = scope.deviceOrientation;

    if (device) {
      var alpha = device.alpha ? THREE.Math.degToRad(device.alpha) + scope.alphaOffset : 0; // Z

      var beta = device.beta ? THREE.Math.degToRad(device.beta) : 0; // X'

      var gamma = device.gamma ? THREE.Math.degToRad(device.gamma) : 0; // Y''

      var orient = scope.screenOrientation ? THREE.Math.degToRad(scope.screenOrientation) : 0; // O

      setObjectQuaternion(scope.object.quaternion, alpha, beta, gamma, orient);
    }
  };

  this.dispose = function () {
    scope.disconnect();
  };

  this.connect();
};

module.exports = exports.default = THREE.DeviceOrientationControls;

/***/ }),

/***/ "./src/assets/js/OrbitControls.js":
/*!****************************************!*\
  !*** ./src/assets/js/OrbitControls.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* three-orbitcontrols addendum */
var THREE = __webpack_require__(/*! ./three.min.js */ "./src/assets/js/three.min.js");
/**
 * @author qiao / https://github.com/qiao
 * @author mrdoob / http://mrdoob.com
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author erich666 / http://erichaines.com
 */
// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one-finger move
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - right mouse, or left mouse + ctrl/metaKey, or arrow keys / touch: two-finger move


THREE.OrbitControls = function (object, domElement) {
  this.object = object;
  this.domElement = domElement !== undefined ? domElement : document; // Set to false to disable this control

  this.enabled = true; // "target" sets the location of focus, where the object orbits around

  this.target = new THREE.Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )

  this.minDistance = 0;
  this.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )

  this.minZoom = 0;
  this.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.
  // Range is 0 to Math.PI radians.

  this.minPolarAngle = 0; // radians

  this.maxPolarAngle = Math.PI; // radians
  // How far you can orbit horizontally, upper and lower limits.
  // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].

  this.minAzimuthAngle = -Infinity; // radians

  this.maxAzimuthAngle = Infinity; // radians
  // Set to true to enable damping (inertia)
  // If damping is enabled, you must call controls.update() in your animation loop

  this.enableDamping = false;
  this.dampingFactor = 0.25; // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
  // Set to false to disable zooming

  this.enableZoom = true;
  this.zoomSpeed = 1.0; // Set to false to disable rotating

  this.enableRotate = true;
  this.rotateSpeed = 1.0; // Set to false to disable panning

  this.enablePan = true;
  this.panSpeed = 1.0;
  this.screenSpacePanning = false; // if true, pan in screen-space

  this.keyPanSpeed = 7.0; // pixels moved per arrow key push
  // Set to true to automatically rotate around the target
  // If auto-rotate is enabled, you must call controls.update() in your animation loop

  this.autoRotate = false;
  this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60
  // Set to false to disable use of the keys

  this.enableKeys = true; // The four arrow keys

  this.keys = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    BOTTOM: 40
  }; // Mouse buttons

  this.mouseButtons = {
    LEFT: THREE.MOUSE.LEFT,
    MIDDLE: THREE.MOUSE.MIDDLE,
    RIGHT: THREE.MOUSE.RIGHT
  }; // for reset

  this.target0 = this.target.clone();
  this.position0 = this.object.position.clone();
  this.zoom0 = this.object.zoom; //
  // public methods
  //

  this.getPolarAngle = function () {
    return spherical.phi;
  };

  this.getAzimuthalAngle = function () {
    return spherical.theta;
  };

  this.saveState = function () {
    scope.target0.copy(scope.target);
    scope.position0.copy(scope.object.position);
    scope.zoom0 = scope.object.zoom;
  };

  this.reset = function () {
    scope.target.copy(scope.target0);
    scope.object.position.copy(scope.position0);
    scope.object.zoom = scope.zoom0;
    scope.object.updateProjectionMatrix();
    scope.dispatchEvent(changeEvent);
    scope.update();
    state = STATE.NONE;
  }; // this method is exposed, but perhaps it would be better if we can make it private...


  this.update = function () {
    var offset = new THREE.Vector3(); // so camera.up is the orbit axis

    var quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));
    var quatInverse = quat.clone().inverse();
    var lastPosition = new THREE.Vector3();
    var lastQuaternion = new THREE.Quaternion();
    return function update() {
      var position = scope.object.position;
      offset.copy(position).sub(scope.target); // rotate offset to "y-axis-is-up" space

      offset.applyQuaternion(quat); // angle from z-axis around y-axis

      spherical.setFromVector3(offset);

      if (scope.autoRotate && state === STATE.NONE) {
        rotateLeft(getAutoRotationAngle());
      }

      spherical.theta += sphericalDelta.theta;
      spherical.phi += sphericalDelta.phi; // restrict theta to be between desired limits

      spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta)); // restrict phi to be between desired limits

      spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
      spherical.makeSafe();
      spherical.radius *= scale; // restrict radius to be between desired limits

      spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius)); // move target to panned location

      scope.target.add(panOffset);
      offset.setFromSpherical(spherical); // rotate offset back to "camera-up-vector-is-up" space

      offset.applyQuaternion(quatInverse);
      position.copy(scope.target).add(offset);
      scope.object.lookAt(scope.target);

      if (scope.enableDamping === true) {
        sphericalDelta.theta *= 1 - scope.dampingFactor;
        sphericalDelta.phi *= 1 - scope.dampingFactor;
        panOffset.multiplyScalar(1 - scope.dampingFactor);
      } else {
        sphericalDelta.set(0, 0, 0);
        panOffset.set(0, 0, 0);
      }

      scale = 1; // update condition is:
      // min(camera displacement, camera rotation in radians)^2 > EPS
      // using small-angle approximation cos(x/2) = 1 - x^2 / 8

      if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {
        scope.dispatchEvent(changeEvent);
        lastPosition.copy(scope.object.position);
        lastQuaternion.copy(scope.object.quaternion);
        zoomChanged = false;
        return true;
      }

      return false;
    };
  }();

  this.dispose = function () {
    scope.domElement.removeEventListener('contextmenu', onContextMenu, false);
    scope.domElement.removeEventListener('mousedown', onMouseDown, false);
    scope.domElement.removeEventListener('wheel', onMouseWheel, false);
    scope.domElement.removeEventListener('touchstart', onTouchStart, false);
    scope.domElement.removeEventListener('touchend', onTouchEnd, false);
    scope.domElement.removeEventListener('touchmove', onTouchMove, false);
    document.removeEventListener('mousemove', onMouseMove, false);
    document.removeEventListener('mouseup', onMouseUp, false);
    window.removeEventListener('keydown', onKeyDown, false); //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?
  }; //
  // internals
  //


  var scope = this;
  var changeEvent = {
    type: 'change'
  };
  var startEvent = {
    type: 'start'
  };
  var endEvent = {
    type: 'end'
  };
  var STATE = {
    NONE: -1,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2,
    TOUCH_ROTATE: 3,
    TOUCH_DOLLY_PAN: 4
  };
  var state = STATE.NONE;
  var EPS = 0.000001; // current position in spherical coordinates

  var spherical = new THREE.Spherical();
  var sphericalDelta = new THREE.Spherical();
  var scale = 1;
  var panOffset = new THREE.Vector3();
  var zoomChanged = false;
  var rotateStart = new THREE.Vector2();
  var rotateEnd = new THREE.Vector2();
  var rotateDelta = new THREE.Vector2();
  var panStart = new THREE.Vector2();
  var panEnd = new THREE.Vector2();
  var panDelta = new THREE.Vector2();
  var dollyStart = new THREE.Vector2();
  var dollyEnd = new THREE.Vector2();
  var dollyDelta = new THREE.Vector2();

  function getAutoRotationAngle() {
    return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
  }

  function getZoomScale() {
    return Math.pow(0.95, scope.zoomSpeed);
  }

  function rotateLeft(angle) {
    sphericalDelta.theta -= angle;
  }

  function rotateUp(angle) {
    sphericalDelta.phi -= angle;
  }

  var panLeft = function () {
    var v = new THREE.Vector3();
    return function panLeft(distance, objectMatrix) {
      v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix

      v.multiplyScalar(-distance);
      panOffset.add(v);
    };
  }();

  var panUp = function () {
    var v = new THREE.Vector3();
    return function panUp(distance, objectMatrix) {
      if (scope.screenSpacePanning === true) {
        v.setFromMatrixColumn(objectMatrix, 1);
      } else {
        v.setFromMatrixColumn(objectMatrix, 0);
        v.crossVectors(scope.object.up, v);
      }

      v.multiplyScalar(distance);
      panOffset.add(v);
    };
  }(); // deltaX and deltaY are in pixels; right and down are positive


  var pan = function () {
    var offset = new THREE.Vector3();
    return function pan(deltaX, deltaY) {
      var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

      if (scope.object.isPerspectiveCamera) {
        // perspective
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        var targetDistance = offset.length(); // half of the fov is center to top of screen

        targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we use only clientHeight here so aspect ratio does not distort speed

        panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
        panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
      } else if (scope.object.isOrthographicCamera) {
        // orthographic
        panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
        panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
      } else {
        // camera neither orthographic nor perspective
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');
        scope.enablePan = false;
      }
    };
  }();

  function dollyIn(dollyScale) {
    if (scope.object.isPerspectiveCamera) {
      scale /= dollyScale;
    } else if (scope.object.isOrthographicCamera) {
      scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
      scope.object.updateProjectionMatrix();
      zoomChanged = true;
    } else {
      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
      scope.enableZoom = false;
    }
  }

  function dollyOut(dollyScale) {
    if (scope.object.isPerspectiveCamera) {
      scale *= dollyScale;
    } else if (scope.object.isOrthographicCamera) {
      scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
      scope.object.updateProjectionMatrix();
      zoomChanged = true;
    } else {
      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
      scope.enableZoom = false;
    }
  } //
  // event callbacks - update the object state
  //


  function handleMouseDownRotate(event) {
    //console.log( 'handleMouseDownRotate' );
    rotateStart.set(event.clientX, event.clientY);
  }

  function handleMouseDownDolly(event) {
    //console.log( 'handleMouseDownDolly' );
    dollyStart.set(event.clientX, event.clientY);
  }

  function handleMouseDownPan(event) {
    //console.log( 'handleMouseDownPan' );
    panStart.set(event.clientX, event.clientY);
  }

  function handleMouseMoveRotate(event) {
    //console.log( 'handleMouseMoveRotate' );
    rotateEnd.set(event.clientX, event.clientY);
    rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
    var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
    rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

    rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
    rotateStart.copy(rotateEnd);
    scope.update();
  }

  function handleMouseMoveDolly(event) {
    //console.log( 'handleMouseMoveDolly' );
    dollyEnd.set(event.clientX, event.clientY);
    dollyDelta.subVectors(dollyEnd, dollyStart);

    if (dollyDelta.y > 0) {
      dollyIn(getZoomScale());
    } else if (dollyDelta.y < 0) {
      dollyOut(getZoomScale());
    }

    dollyStart.copy(dollyEnd);
    scope.update();
  }

  function handleMouseMovePan(event) {
    //console.log( 'handleMouseMovePan' );
    panEnd.set(event.clientX, event.clientY);
    panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
    pan(panDelta.x, panDelta.y);
    panStart.copy(panEnd);
    scope.update();
  }

  function handleMouseUp(event) {// console.log( 'handleMouseUp' );
  }

  function handleMouseWheel(event) {
    // console.log( 'handleMouseWheel' );
    if (event.deltaY < 0) {
      dollyOut(getZoomScale());
    } else if (event.deltaY > 0) {
      dollyIn(getZoomScale());
    }

    scope.update();
  }

  function handleKeyDown(event) {
    //console.log( 'handleKeyDown' );
    switch (event.keyCode) {
      case scope.keys.UP:
        pan(0, scope.keyPanSpeed);
        scope.update();
        break;

      case scope.keys.BOTTOM:
        pan(0, -scope.keyPanSpeed);
        scope.update();
        break;

      case scope.keys.LEFT:
        pan(scope.keyPanSpeed, 0);
        scope.update();
        break;

      case scope.keys.RIGHT:
        pan(-scope.keyPanSpeed, 0);
        scope.update();
        break;
    }
  }

  function handleTouchStartRotate(event) {
    //console.log( 'handleTouchStartRotate' );
    rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);
  }

  function handleTouchStartDollyPan(event) {
    //console.log( 'handleTouchStartDollyPan' );
    if (scope.enableZoom) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyStart.set(0, distance);
    }

    if (scope.enablePan) {
      var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
      var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
      panStart.set(x, y);
    }
  }

  function handleTouchMoveRotate(event) {
    //console.log( 'handleTouchMoveRotate' );
    rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);
    rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
    var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
    rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

    rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
    rotateStart.copy(rotateEnd);
    scope.update();
  }

  function handleTouchMoveDollyPan(event) {
    //console.log( 'handleTouchMoveDollyPan' );
    if (scope.enableZoom) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyEnd.set(0, distance);
      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
      dollyIn(dollyDelta.y);
      dollyStart.copy(dollyEnd);
    }

    if (scope.enablePan) {
      var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
      var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
      panEnd.set(x, y);
      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
    }

    scope.update();
  }

  function handleTouchEnd(event) {} //console.log( 'handleTouchEnd' );
  //
  // event handlers - FSM: listen for events and reset state
  //


  function onMouseDown(event) {
    if (scope.enabled === false) return;
    event.preventDefault();

    switch (event.button) {
      case scope.mouseButtons.LEFT:
        if (event.ctrlKey || event.metaKey) {
          if (scope.enablePan === false) return;
          handleMouseDownPan(event);
          state = STATE.PAN;
        } else {
          if (scope.enableRotate === false) return;
          handleMouseDownRotate(event);
          state = STATE.ROTATE;
        }

        break;

      case scope.mouseButtons.MIDDLE:
        if (scope.enableZoom === false) return;
        handleMouseDownDolly(event);
        state = STATE.DOLLY;
        break;

      case scope.mouseButtons.RIGHT:
        if (scope.enablePan === false) return;
        handleMouseDownPan(event);
        state = STATE.PAN;
        break;
    }

    if (state !== STATE.NONE) {
      document.addEventListener('mousemove', onMouseMove, false);
      document.addEventListener('mouseup', onMouseUp, false);
      scope.dispatchEvent(startEvent);
    }
  }

  function onMouseMove(event) {
    if (scope.enabled === false) return;
    event.preventDefault();

    switch (state) {
      case STATE.ROTATE:
        if (scope.enableRotate === false) return;
        handleMouseMoveRotate(event);
        break;

      case STATE.DOLLY:
        if (scope.enableZoom === false) return;
        handleMouseMoveDolly(event);
        break;

      case STATE.PAN:
        if (scope.enablePan === false) return;
        handleMouseMovePan(event);
        break;
    }
  }

  function onMouseUp(event) {
    if (scope.enabled === false) return;
    handleMouseUp(event);
    document.removeEventListener('mousemove', onMouseMove, false);
    document.removeEventListener('mouseup', onMouseUp, false);
    scope.dispatchEvent(endEvent);
    state = STATE.NONE;
  }

  function onMouseWheel(event) {
    if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;
    event.preventDefault();
    event.stopPropagation();
    scope.dispatchEvent(startEvent);
    handleMouseWheel(event);
    scope.dispatchEvent(endEvent);
  }

  function onKeyDown(event) {
    if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;
    handleKeyDown(event);
  }

  function onTouchStart(event) {
    if (scope.enabled === false) return;
    event.preventDefault();

    switch (event.touches.length) {
      case 1:
        // one-fingered touch: rotate
        if (scope.enableRotate === false) return;
        handleTouchStartRotate(event);
        state = STATE.TOUCH_ROTATE;
        break;

      case 2:
        // two-fingered touch: dolly-pan
        if (scope.enableZoom === false && scope.enablePan === false) return;
        handleTouchStartDollyPan(event);
        state = STATE.TOUCH_DOLLY_PAN;
        break;

      default:
        state = STATE.NONE;
    }

    if (state !== STATE.NONE) {
      scope.dispatchEvent(startEvent);
    }
  }

  function onTouchMove(event) {
    if (scope.enabled === false) return;
    event.preventDefault();
    event.stopPropagation();

    switch (event.touches.length) {
      case 1:
        // one-fingered touch: rotate
        if (scope.enableRotate === false) return;
        if (state !== STATE.TOUCH_ROTATE) return; // is this needed?

        handleTouchMoveRotate(event);
        break;

      case 2:
        // two-fingered touch: dolly-pan
        if (scope.enableZoom === false && scope.enablePan === false) return;
        if (state !== STATE.TOUCH_DOLLY_PAN) return; // is this needed?

        handleTouchMoveDollyPan(event);
        break;

      default:
        state = STATE.NONE;
    }
  }

  function onTouchEnd(event) {
    if (scope.enabled === false) return;
    handleTouchEnd(event);
    scope.dispatchEvent(endEvent);
    state = STATE.NONE;
  }

  function onContextMenu(event) {
    if (scope.enabled === false) return;
    event.preventDefault();
  } //


  scope.domElement.addEventListener('contextmenu', onContextMenu, false);
  scope.domElement.addEventListener('mousedown', onMouseDown, false);
  scope.domElement.addEventListener('wheel', onMouseWheel, false);
  scope.domElement.addEventListener('touchstart', onTouchStart, false);
  scope.domElement.addEventListener('touchend', onTouchEnd, false);
  scope.domElement.addEventListener('touchmove', onTouchMove, false);
  window.addEventListener('keydown', onKeyDown, false); // force an update at start

  this.update();
};

THREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);
THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;
Object.defineProperties(THREE.OrbitControls.prototype, {
  center: {
    get: function get() {
      console.warn('THREE.OrbitControls: .center has been renamed to .target');
      return this.target;
    }
  },
  // backward compatibility
  noZoom: {
    get: function get() {
      console.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');
      return !this.enableZoom;
    },
    set: function set(value) {
      console.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');
      this.enableZoom = !value;
    }
  },
  noRotate: {
    get: function get() {
      console.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');
      return !this.enableRotate;
    },
    set: function set(value) {
      console.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');
      this.enableRotate = !value;
    }
  },
  noPan: {
    get: function get() {
      console.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');
      return !this.enablePan;
    },
    set: function set(value) {
      console.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');
      this.enablePan = !value;
    }
  },
  noKeys: {
    get: function get() {
      console.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');
      return !this.enableKeys;
    },
    set: function set(value) {
      console.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');
      this.enableKeys = !value;
    }
  },
  staticMoving: {
    get: function get() {
      console.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');
      return !this.enableDamping;
    },
    set: function set(value) {
      console.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');
      this.enableDamping = !value;
    }
  },
  dynamicDampingFactor: {
    get: function get() {
      console.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');
      return this.dampingFactor;
    },
    set: function set(value) {
      console.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');
      this.dampingFactor = value;
    }
  }
});
/* three-orbitcontrols addendum */

module.exports = exports.default = THREE.OrbitControls;

/***/ }),

/***/ "./src/assets/js/app.js":
/*!******************************!*\
  !*** ./src/assets/js/app.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var what_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! what-input */ "./node_modules/what-input/dist/what-input.js");
/* harmony import */ var what_input__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(what_input__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var foundation_sites__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! foundation-sites */ "./node_modules/foundation-sites/dist/js/npm.js");
/* harmony import */ var tablesaw_dist_tablesaw_jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tablesaw/dist/tablesaw.jquery */ "./node_modules/tablesaw/dist/tablesaw.jquery.js");
/* harmony import */ var tablesaw_dist_tablesaw_jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(tablesaw_dist_tablesaw_jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _lib_dependencies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/dependencies */ "./src/assets/js/lib/dependencies.js");
/* harmony import */ var _three_min_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./three.min.js */ "./src/assets/js/three.min.js");
/* harmony import */ var _three_min_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_three_min_js__WEBPACK_IMPORTED_MODULE_5__);


window.$ = jquery__WEBPACK_IMPORTED_MODULE_0___default.a;
 // If you want to pick and choose which modules to include, comment out the above and uncomment
// the line below
//import './lib/foundation-explicit-pieces';



window.libs = _lib_dependencies__WEBPACK_IMPORTED_MODULE_4__["default"];

jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).foundation();
_lib_dependencies__WEBPACK_IMPORTED_MODULE_4__["default"].AOS.init(); // SVG Injector
// Elements to inject

var mySVGsToInject = document.querySelectorAll('img.inject-me'); // Options

var injectorOptions = {
  evalScripts: 'once',
  pngFallback: 'assets/png'
};

var afterAllInjectionsFinishedCallback = function afterAllInjectionsFinishedCallback(totalSVGsInjected) {
  // Callback after all SVGs are injected
  console.log('We injected ' + totalSVGsInjected + ' SVG(s)!');
};

var perInjectionCallback = function perInjectionCallback(svg) {
  // Callback after each SVG is injected
  console.log('SVG injected: ' + svg);
}; // create injector configured by options


var injector = new _lib_dependencies__WEBPACK_IMPORTED_MODULE_4__["default"].svgInjector(injectorOptions); // Trigger the injection

injector.inject(mySVGsToInject, afterAllInjectionsFinishedCallback, perInjectionCallback); // slick carousel

jquery__WEBPACK_IMPORTED_MODULE_0___default()(".content-carousel").slick({
  // normal options...
  speed: 5000,
  autoplay: true,
  autoplaySpeed: 0,
  cssEase: 'linear',
  slidesToShow: 5,
  slidesToScroll: 1,
  infinite: true,
  swipeToSlide: true,
  centerMode: true,
  focusOnSelect: true,
  // the magic
  responsive: [{
    breakpoint: 1024,
    settings: {
      slidesToShow: 3,
      infinite: true
    }
  }, {
    breakpoint: 600,
    settings: {
      slidesToShow: 2,
      dots: true
    }
  }, {
    breakpoint: 300,
    settings: "unslick" // destroys slick

  }]
}); // tablesaw table plugin

jquery__WEBPACK_IMPORTED_MODULE_0___default()(function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).foundation().trigger('enhance.tablesaw');
});
var TablesawConfig = {
  swipeHorizontalThreshold: 15
}; // app dashboard toggle

jquery__WEBPACK_IMPORTED_MODULE_0___default()('[data-app-dashboard-toggle-shrink]').on('click', function (e) {
  e.preventDefault();
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).parents('.app-dashboard').toggleClass('shrink-medium').toggleClass('shrink-large');
});

__webpack_require__(/*! ./custom.js */ "./src/assets/js/custom.js");

/***/ }),

/***/ "./src/assets/js/custom.js":
/*!*********************************!*\
  !*** ./src/assets/js/custom.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _three_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./three.min.js */ "./src/assets/js/three.min.js");
/* harmony import */ var _three_min_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_three_min_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _OrbitControls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OrbitControls.js */ "./src/assets/js/OrbitControls.js");
/* harmony import */ var _OrbitControls_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_OrbitControls_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _DeviceOrientationControls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DeviceOrientationControls.js */ "./src/assets/js/DeviceOrientationControls.js");
/* harmony import */ var _DeviceOrientationControls_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_DeviceOrientationControls_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var aos_dist_aos_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! aos/dist/aos.js */ "./node_modules/aos/dist/aos.js");
/* harmony import */ var aos_dist_aos_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(aos_dist_aos_js__WEBPACK_IMPORTED_MODULE_3__);




var starViewer = {
  // variables
  camera: false,
  controls: false,
  scene: false,
  renderer: false,
  container: false,
  textlabels: [],
  onReady: function onReady() {
    this.scene = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["Scene"]();
    this.renderer = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["WebGLRenderer"]({
      antialias: true
    });
    this.renderer.setClearColor(0x004477);
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.container.appendChild(this.renderer.domElement); // Set a close distance to hide close object

    this.camera = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["PerspectiveCamera"](75, window.innerWidth / window.innerHeight, 1, 1100);
    this.mCamera = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["PerspectiveCamera"](40, window.innerWidth / window.innerHeight, 1, 1100);
    this.camera.position.set(0, 10, 400); /// Create geometry for panorama photo

    var sphereGeo = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["SphereBufferGeometry"](500, 70, 60); // invert geometry normal

    sphereGeo.scale(-1, 1, 1); // Define panorama image

    var panoMat = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["MeshBasicMaterial"]({
      map: new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["TextureLoader"]().load('assets/img/texture/pano2.jpg')
    });
    var panoMesh = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["Mesh"](sphereGeo, panoMat);
    this.scene.add(panoMesh); // Added Orbit Controls camera

    if (isMobile()) {
      console.log("on phone");
      this.controls = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["DeviceOrientationControls"](this.camera);
    } else {
      console.log("on desktop");
      this.controls = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["OrbitControls"](this.camera, this.renderer.domElement);
      this.controls.enableDamping = true;
      this.controls.dampingFactor = 0.25;
      this.controls.enableZoom = false;
      this.controls.enablePan = false;
      this.controls.enableKeys = false;
    } //// world
    // Create base mesh Cylinder geometry


    var geometry = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["SphereBufferGeometry"](0, 10, 30);
    var defaultMat = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["MeshBasicMaterial"]({
      color: 0xffffff
    }); // Delcare a list for hotspots

    var hotspotList = [{
      'name': 'car-1',
      'pos': {
        'x': 350,
        'y': 100,
        'z': 220
      },
      'title': 'About',
      'description': 'Learn more about me.',
      'func': 'aboutModal.open()'
    }, {
      'name': 'car-2',
      'pos': {
        'x': -400,
        'y': 50,
        'z': 20
      },
      'title': 'Contact',
      'description': 'Say Hello! Send an Email.',
      'func': 'contactModal.open()'
    }, {
      'name': 'car-3',
      'pos': {
        'x': 400,
        'y': 10,
        'z': 10
      },
      'title': 'Portfolio',
      'description': 'Check out my works.',
      'func': 'portfolioModal.open()'
    }, {
      'name': 'car-4',
      'pos': {
        'x': -350,
        'y': 20,
        'z': -250
      },
      'title': 'demo',
      'description': 'Lorem Ipsum Polum.',
      'func': 'demoModal.open()'
    }]; // Create mesh basic materials, i defines the number of cylinder

    for (var i = 0; i < hotspotList.length; i++) {
      var selectedGeo = hotspotList[i];
      var mesh = new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["Mesh"](geometry, defaultMat);
      mesh.name = selectedGeo.name || ''; // mesh.position.x = (Math.random() - 0.5) * 1000;

      mesh.position.x = selectedGeo.pos.x;
      mesh.position.y = selectedGeo.pos.y;
      mesh.position.z = selectedGeo.pos.z;
      mesh.updateMatrix();
      mesh.matrixAutoUpdate = false;
      this.scene.add(mesh);

      var text = this._createTextLabel(); // text.setHTML("Label "+i);


      console.log('open', selectedGeo.func);
      text.setHTML("<a class=\"three-hotspot-item hvr-outline-out\" onclick=\"".concat(selectedGeo.func, "\"><i class=\"fa fa-info-circle\"></i></a>\n        <div class=\"three-hotspot-infobox\">\n          <h2 class=\"infobox-title\">").concat(selectedGeo.title, "</h2>\n          <hr>\n          <h4 class=\"infobox-description\" >").concat(selectedGeo.description, "</h4>\n        </div>"));
      text.setParent(mesh);
      this.textlabels.push(text);
      console.log(this.textlabels);
      this.container.appendChild(text.element);
    } //
    // animate
    //


    var _this = this;

    var animate = function animate() {
      requestAnimationFrame(animate);

      _this.controls.update();

      _this._render(_this.scene, _this.camera);
    };

    animate();
  },
  onResize: function onResize() {
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
  },
  _render: function _render() {
    for (var i = 0; i < this.textlabels.length; i++) {
      this.textlabels[i].updatePosition();
    }

    this.renderer.render(this.scene, this.camera);
  },
  _createTextLabel: function _createTextLabel() {
    var div = document.createElement('div');
    div.className = 'three-hotspot';
    div.style.position = 'absolute';
    div.style.width = 100;
    div.style.height = 100;
    div.innerHTML = '';
    div.style.top = -1000;
    div.style.left = -1000; // var infoIcon = `<a class="three-hotspot-item hvr-outline-out"><i class="fa fa-info-circle"></i></a>`;''
    // div.innerHTML += infoIcon;

    var _this = this;

    return {
      element: div,
      parent: false,
      position: new _three_min_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](0, 0, 0),
      setHTML: function setHTML(html) {
        this.element.innerHTML += "".concat(html);
      },
      setParent: function setParent(threejsobj) {
        this.parent = threejsobj;
      },
      updatePosition: function updatePosition() {
        if (parent) {
          this.position.copy(this.parent.position);
        }

        var coords2d = this.get2DCoords(this.position, _this.camera);
        this.element.style.left = coords2d.x + 'px';
        this.element.style.top = coords2d.y + 'px';
      },
      get2DCoords: function get2DCoords(position, camera) {
        var vector = position.project(camera);
        vector.x = (vector.x + 1) / 2 * window.innerWidth;
        vector.y = -(vector.y - 1) / 2 * window.innerHeight;
        return vector;
      }
    };
  }
};
starViewer.container = document.getElementById('container');
starViewer.onReady();
var overlay = document.getElementsByClassName('overlay')[0];
var modalCreater = {
  modalList: [],
  onReady: function onReady() {
    var modalListID = [{
      'id': 'aboutModal',
      'name': 'about-modal',
      'endPos': {
        'x': 0,
        'y': 0
      }
    }, {
      'id': 'contactModal',
      'name': 'contact-modal',
      'endPos': {
        'x': '16.5%',
        'y': '10%'
      }
    }, {
      'id': 'portfolioModal',
      'name': 'portfolio-modal',
      'endPos': {
        'x': '25%',
        'y': '5%'
      }
    }, {
      'id': 'item',
      'name': 'check'
    }, {
      'id': 'item2',
      'name': 'mate'
    }];

    for (var i = 0; i < modalListID.length; i++) {
      // !!modalListID[i].id ? this.modalList.push(modalListID[i].name) : null;
      !!modalListID[i].id ? window[modalListID[i].id] = this._createModalBox(modalListID[i].name, modalListID[i].endPos) : null;
    } // for(var i = 0; i < this.modalList.length; i++) {
    //   window[modalListID[i].id] = this._createModalBox(this.modalList[i]);
    // }

  },
  _createModalBox: function _createModalBox(id) {
    var endPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      'x': 0,
      'y': 0
    };
    var item = document.getElementById(id);
    console.log('item', item, 'endpos', endPos);

    if (!!item) {
      var position = {
        'x': item.style.right,
        'y': item.style.top
      };

      var _this = this;

      return {
        element: item,
        pos: position,
        close: function close() {
          item.style.visibility = 'hidden';
          item.style.opacity = "0";
          overlay.style.display = 'none'; // item.style.right = this.pos.x;
          // item.style.top = this.pos.y;

          item.classList.remove("active");
          setTimeout(function () {
            console.log('1');
            aos_dist_aos_js__WEBPACK_IMPORTED_MODULE_3__["refresh"](true);
          }, 500);
        },
        open: function open() {
          console.log("open");
          item.style.visibility = 'visible';
          item.style.opacity = "1";
          overlay.style.display = 'block'; // item.style.right = endPos.x;
          // item.style.top = endPos.y;

          item.classList.add("active");
          setTimeout(function () {
            console.log('1');
            aos_dist_aos_js__WEBPACK_IMPORTED_MODULE_3__["refresh"](true);
          }, 500);
        }
      };
    }
  }
};
modalCreater.onReady();
$('.portfolio-image-container').on('scroll', function () {
  aos_dist_aos_js__WEBPACK_IMPORTED_MODULE_3__["refresh"](true);
});

function isMobile() {
  if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
    return true;
  } else {
    return false;
  }
}

window.addEventListener('resize', function () {
  starViewer.onResize();
}, false);

/***/ }),

/***/ "./src/assets/js/lib/dependencies.js":
/*!*******************************************!*\
  !*** ./src/assets/js/lib/dependencies.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aos */ "./node_modules/aos/dist/aos.js");
/* harmony import */ var aos__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aos__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var svg_injector_2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svg-injector-2 */ "./node_modules/svg-injector-2/dist/svg-injector.min.js");
/* harmony import */ var svg_injector_2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(svg_injector_2__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! slick-carousel */ "./node_modules/slick-carousel/slick/slick.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_2__);
// custom dependencies



var deps = {
  AOS: aos__WEBPACK_IMPORTED_MODULE_0___default.a,
  svgInjector: svg_injector_2__WEBPACK_IMPORTED_MODULE_1___default.a,
  slickCarousel: slick_carousel__WEBPACK_IMPORTED_MODULE_2___default.a
};
/* harmony default export */ __webpack_exports__["default"] = (deps);

/***/ }),

/***/ "./src/assets/js/three.min.js":
/*!************************************!*\
  !*** ./src/assets/js/three.min.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// threejs.org/license
(function (l, ia) {
  "object" === ( false ? undefined : _typeof(exports)) && "undefined" !== typeof module ? ia(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (ia),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function (l) {
  function ia() {}

  function z(a, b) {
    this.x = a || 0;
    this.y = b || 0;
  }

  function P() {
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
  }

  function ja(a, b, c, d) {
    this._x = a || 0;
    this._y = b || 0;
    this._z = c || 0;
    this._w = void 0 !== d ? d : 1;
  }

  function p(a, b, c) {
    this.x = a || 0;
    this.y = b || 0;
    this.z = c || 0;
  }

  function da() {
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
  }

  function W(a, b, c, d, e, f, g, h, k, m) {
    Object.defineProperty(this, "id", {
      value: Kf++
    });
    this.uuid = R.generateUUID();
    this.name = "";
    this.image = void 0 !== a ? a : W.DEFAULT_IMAGE;
    this.mipmaps = [];
    this.mapping = void 0 !== b ? b : W.DEFAULT_MAPPING;
    this.wrapS = void 0 !== c ? c : 1001;
    this.wrapT = void 0 !== d ? d : 1001;
    this.magFilter = void 0 !== e ? e : 1006;
    this.minFilter = void 0 !== f ? f : 1008;
    this.anisotropy = void 0 !== k ? k : 1;
    this.format = void 0 !== g ? g : 1023;
    this.type = void 0 !== h ? h : 1009;
    this.offset = new z(0, 0);
    this.repeat = new z(1, 1);
    this.center = new z(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = !0;
    this.matrix = new da();
    this.generateMipmaps = !0;
    this.premultiplyAlpha = !1;
    this.flipY = !0;
    this.unpackAlignment = 4;
    this.encoding = void 0 !== m ? m : 3E3;
    this.version = 0;
    this.onUpdate = null;
  }

  function Z(a, b, c, d) {
    this.x = a || 0;
    this.y = b || 0;
    this.z = c || 0;
    this.w = void 0 !== d ? d : 1;
  }

  function kb(a, b, c) {
    this.width = a;
    this.height = b;
    this.scissor = new Z(0, 0, a, b);
    this.scissorTest = !1;
    this.viewport = new Z(0, 0, a, b);
    c = c || {};
    void 0 === c.minFilter && (c.minFilter = 1006);
    this.texture = new W(void 0, void 0, c.wrapS, c.wrapT, c.magFilter, c.minFilter, c.format, c.type, c.anisotropy, c.encoding);
    this.texture.generateMipmaps = void 0 !== c.generateMipmaps ? c.generateMipmaps : !0;
    this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;
    this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;
    this.depthTexture = void 0 !== c.depthTexture ? c.depthTexture : null;
  }

  function Jb(a, b, c) {
    kb.call(this, a, b, c);
    this.activeMipMapLevel = this.activeCubeFace = 0;
  }

  function lb(a, b, c, d, e, f, g, h, k, m, q, n) {
    W.call(this, null, f, g, h, k, m, d, e, q, n);
    this.image = {
      data: a,
      width: b,
      height: c
    };
    this.magFilter = void 0 !== k ? k : 1003;
    this.minFilter = void 0 !== m ? m : 1003;
    this.flipY = this.generateMipmaps = !1;
    this.unpackAlignment = 1;
  }

  function Wa(a, b) {
    this.min = void 0 !== a ? a : new p(Infinity, Infinity, Infinity);
    this.max = void 0 !== b ? b : new p(-Infinity, -Infinity, -Infinity);
  }

  function Ga(a, b) {
    this.center = void 0 !== a ? a : new p();
    this.radius = void 0 !== b ? b : 0;
  }

  function Pa(a, b) {
    this.normal = void 0 !== a ? a : new p(1, 0, 0);
    this.constant = void 0 !== b ? b : 0;
  }

  function rd(a, b, c, d, e, f) {
    this.planes = [void 0 !== a ? a : new Pa(), void 0 !== b ? b : new Pa(), void 0 !== c ? c : new Pa(), void 0 !== d ? d : new Pa(), void 0 !== e ? e : new Pa(), void 0 !== f ? f : new Pa()];
  }

  function G(a, b, c) {
    return void 0 === b && void 0 === c ? this.set(a) : this.setRGB(a, b, c);
  }

  function Xd() {
    function a(e, f) {
      !1 !== c && (d(e, f), b.requestAnimationFrame(a));
    }

    var b = null,
        c = !1,
        d = null;
    return {
      start: function start() {
        !0 !== c && null !== d && (b.requestAnimationFrame(a), c = !0);
      },
      stop: function stop() {
        c = !1;
      },
      setAnimationLoop: function setAnimationLoop(a) {
        d = a;
      },
      setContext: function setContext(a) {
        b = a;
      }
    };
  }

  function Lf(a) {
    function b(b, c) {
      var d = b.array,
          e = b.dynamic ? 35048 : 35044,
          h = a.createBuffer();
      a.bindBuffer(c, h);
      a.bufferData(c, d, e);
      b.onUploadCallback();
      c = 5126;
      d instanceof Float32Array ? c = 5126 : d instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : d instanceof Uint16Array ? c = 5123 : d instanceof Int16Array ? c = 5122 : d instanceof Uint32Array ? c = 5125 : d instanceof Int32Array ? c = 5124 : d instanceof Int8Array ? c = 5120 : d instanceof Uint8Array && (c = 5121);
      return {
        buffer: h,
        type: c,
        bytesPerElement: d.BYTES_PER_ELEMENT,
        version: b.version
      };
    }

    var c = new WeakMap();
    return {
      get: function get(a) {
        a.isInterleavedBufferAttribute && (a = a.data);
        return c.get(a);
      },
      remove: function remove(b) {
        b.isInterleavedBufferAttribute && (b = b.data);
        var d = c.get(b);
        d && (a.deleteBuffer(d.buffer), c.delete(b));
      },
      update: function update(d, e) {
        d.isInterleavedBufferAttribute && (d = d.data);
        var f = c.get(d);
        if (void 0 === f) c.set(d, b(d, e));else if (f.version < d.version) {
          var g = d,
              h = g.array,
              k = g.updateRange;
          a.bindBuffer(e, f.buffer);
          !1 === g.dynamic ? a.bufferData(e, h, 35044) : -1 === k.count ? a.bufferSubData(e, 0, h) : 0 === k.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (a.bufferSubData(e, k.offset * h.BYTES_PER_ELEMENT, h.subarray(k.offset, k.offset + k.count)), k.count = -1);
          f.version = d.version;
        }
      }
    };
  }

  function Xa(a, b, c, d, e, f) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.normal = d && d.isVector3 ? d : new p();
    this.vertexNormals = Array.isArray(d) ? d : [];
    this.color = e && e.isColor ? e : new G();
    this.vertexColors = Array.isArray(e) ? e : [];
    this.materialIndex = void 0 !== f ? f : 0;
  }

  function mb(a, b, c, d) {
    this._x = a || 0;
    this._y = b || 0;
    this._z = c || 0;
    this._order = d || mb.DefaultOrder;
  }

  function Yd() {
    this.mask = 1;
  }

  function D() {
    Object.defineProperty(this, "id", {
      value: Mf++
    });
    this.uuid = R.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = D.DefaultUp.clone();
    var a = new p(),
        b = new mb(),
        c = new ja(),
        d = new p(1, 1, 1);
    b.onChange(function () {
      c.setFromEuler(b, !1);
    });
    c.onChange(function () {
      b.setFromQuaternion(c, void 0, !1);
    });
    Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: a
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: b
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: c
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: d
      },
      modelViewMatrix: {
        value: new P()
      },
      normalMatrix: {
        value: new da()
      }
    });
    this.matrix = new P();
    this.matrixWorld = new P();
    this.matrixAutoUpdate = D.DefaultMatrixAutoUpdate;
    this.matrixWorldNeedsUpdate = !1;
    this.layers = new Yd();
    this.visible = !0;
    this.receiveShadow = this.castShadow = !1;
    this.frustumCulled = !0;
    this.renderOrder = 0;
    this.userData = {};
  }

  function I() {
    Object.defineProperty(this, "id", {
      value: Nf += 2
    });
    this.uuid = R.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
  }

  function F(a, b, c) {
    if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.name = "";
    this.array = a;
    this.itemSize = b;
    this.count = void 0 !== a ? a.length / b : 0;
    this.normalized = !0 === c;
    this.dynamic = !1;
    this.updateRange = {
      offset: 0,
      count: -1
    };
    this.version = 0;
  }

  function sc(a, b, c) {
    F.call(this, new Int8Array(a), b, c);
  }

  function tc(a, b, c) {
    F.call(this, new Uint8Array(a), b, c);
  }

  function uc(a, b, c) {
    F.call(this, new Uint8ClampedArray(a), b, c);
  }

  function vc(a, b, c) {
    F.call(this, new Int16Array(a), b, c);
  }

  function nb(a, b, c) {
    F.call(this, new Uint16Array(a), b, c);
  }

  function wc(a, b, c) {
    F.call(this, new Int32Array(a), b, c);
  }

  function ob(a, b, c) {
    F.call(this, new Uint32Array(a), b, c);
  }

  function C(a, b, c) {
    F.call(this, new Float32Array(a), b, c);
  }

  function xc(a, b, c) {
    F.call(this, new Float64Array(a), b, c);
  }

  function Ie() {
    this.vertices = [];
    this.normals = [];
    this.colors = [];
    this.uvs = [];
    this.uvs2 = [];
    this.groups = [];
    this.morphTargets = {};
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;
    this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
  }

  function Je(a) {
    if (0 === a.length) return -Infinity;

    for (var b = a[0], c = 1, d = a.length; c < d; ++c) {
      a[c] > b && (b = a[c]);
    }

    return b;
  }

  function E() {
    Object.defineProperty(this, "id", {
      value: Of += 2
    });
    this.uuid = R.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingSphere = this.boundingBox = null;
    this.drawRange = {
      start: 0,
      count: Infinity
    };
    this.userData = {};
  }

  function Kb(a, b, c, d, e, f) {
    I.call(this);
    this.type = "BoxGeometry";
    this.parameters = {
      width: a,
      height: b,
      depth: c,
      widthSegments: d,
      heightSegments: e,
      depthSegments: f
    };
    this.fromBufferGeometry(new pb(a, b, c, d, e, f));
    this.mergeVertices();
  }

  function pb(a, b, c, d, e, f) {
    function g(a, b, c, d, e, f, g, l, X, B, Lb) {
      var t = f / X,
          u = g / B,
          w = f / 2,
          v = g / 2,
          A = l / 2;
      g = X + 1;
      var y = B + 1,
          H = f = 0,
          N,
          z,
          C = new p();

      for (z = 0; z < y; z++) {
        var D = z * u - v;

        for (N = 0; N < g; N++) {
          C[a] = (N * t - w) * d, C[b] = D * e, C[c] = A, m.push(C.x, C.y, C.z), C[a] = 0, C[b] = 0, C[c] = 0 < l ? 1 : -1, q.push(C.x, C.y, C.z), n.push(N / X), n.push(1 - z / B), f += 1;
        }
      }

      for (z = 0; z < B; z++) {
        for (N = 0; N < X; N++) {
          a = r + N + g * (z + 1), b = r + (N + 1) + g * (z + 1), c = r + (N + 1) + g * z, k.push(r + N + g * z, a, c), k.push(a, b, c), H += 6;
        }
      }

      h.addGroup(x, H, Lb);
      x += H;
      r += f;
    }

    E.call(this);
    this.type = "BoxBufferGeometry";
    this.parameters = {
      width: a,
      height: b,
      depth: c,
      widthSegments: d,
      heightSegments: e,
      depthSegments: f
    };
    var h = this;
    a = a || 1;
    b = b || 1;
    c = c || 1;
    d = Math.floor(d) || 1;
    e = Math.floor(e) || 1;
    f = Math.floor(f) || 1;
    var k = [],
        m = [],
        q = [],
        n = [],
        r = 0,
        x = 0;
    g("z", "y", "x", -1, -1, c, b, a, f, e, 0);
    g("z", "y", "x", 1, -1, c, b, -a, f, e, 1);
    g("x", "z", "y", 1, 1, a, c, b, d, f, 2);
    g("x", "z", "y", 1, -1, a, c, -b, d, f, 3);
    g("x", "y", "z", 1, -1, a, b, c, d, e, 4);
    g("x", "y", "z", -1, -1, a, b, -c, d, e, 5);
    this.setIndex(k);
    this.addAttribute("position", new C(m, 3));
    this.addAttribute("normal", new C(q, 3));
    this.addAttribute("uv", new C(n, 2));
  }

  function yc(a, b, c, d) {
    I.call(this);
    this.type = "PlaneGeometry";
    this.parameters = {
      width: a,
      height: b,
      widthSegments: c,
      heightSegments: d
    };
    this.fromBufferGeometry(new qb(a, b, c, d));
    this.mergeVertices();
  }

  function qb(a, b, c, d) {
    E.call(this);
    this.type = "PlaneBufferGeometry";
    this.parameters = {
      width: a,
      height: b,
      widthSegments: c,
      heightSegments: d
    };
    a = a || 1;
    b = b || 1;
    var e = a / 2,
        f = b / 2;
    c = Math.floor(c) || 1;
    d = Math.floor(d) || 1;
    var g = c + 1,
        h = d + 1,
        k = a / c,
        m = b / d,
        q = [],
        n = [],
        r = [],
        x = [];

    for (a = 0; a < h; a++) {
      var t = a * m - f;

      for (b = 0; b < g; b++) {
        n.push(b * k - e, -t, 0), r.push(0, 0, 1), x.push(b / c), x.push(1 - a / d);
      }
    }

    for (a = 0; a < d; a++) {
      for (b = 0; b < c; b++) {
        e = b + g * (a + 1), f = b + 1 + g * (a + 1), h = b + 1 + g * a, q.push(b + g * a, e, h), q.push(e, f, h);
      }
    }

    this.setIndex(q);
    this.addAttribute("position", new C(n, 3));
    this.addAttribute("normal", new C(r, 3));
    this.addAttribute("uv", new C(x, 2));
  }

  function L() {
    Object.defineProperty(this, "id", {
      value: Pf++
    });
    this.uuid = R.generateUUID();
    this.name = "";
    this.type = "Material";
    this.lights = this.fog = !0;
    this.blending = 1;
    this.side = 0;
    this.flatShading = !1;
    this.vertexColors = 0;
    this.opacity = 1;
    this.transparent = !1;
    this.blendSrc = 204;
    this.blendDst = 205;
    this.blendEquation = 100;
    this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;
    this.depthFunc = 3;
    this.depthWrite = this.depthTest = !0;
    this.clippingPlanes = null;
    this.clipShadows = this.clipIntersection = !1;
    this.shadowSide = null;
    this.colorWrite = !0;
    this.precision = null;
    this.polygonOffset = !1;
    this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
    this.dithering = !1;
    this.alphaTest = 0;
    this.premultipliedAlpha = !1;
    this.visible = !0;
    this.userData = {};
    this.needsUpdate = !0;
  }

  function ka(a) {
    L.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    this.linewidth = 1;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;
    this.extensions = {
      derivatives: !1,
      fragDepth: !1,
      drawBuffers: !1,
      shaderTextureLOD: !1
    };
    this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv2: [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = !1;
    void 0 !== a && (void 0 !== a.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(a));
  }

  function rb(a, b) {
    this.origin = void 0 !== a ? a : new p();
    this.direction = void 0 !== b ? b : new p();
  }

  function ha(a, b, c) {
    this.a = void 0 !== a ? a : new p();
    this.b = void 0 !== b ? b : new p();
    this.c = void 0 !== c ? c : new p();
  }

  function Ea(a) {
    L.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new G(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.lights = this.morphTargets = this.skinning = !1;
    this.setValues(a);
  }

  function pa(a, b) {
    D.call(this);
    this.type = "Mesh";
    this.geometry = void 0 !== a ? a : new E();
    this.material = void 0 !== b ? b : new Ea({
      color: 16777215 * Math.random()
    });
    this.drawMode = 0;
    this.updateMorphTargets();
  }

  function Qf(a, b, c, d) {
    function e(a, c) {
      b.buffers.color.setClear(a.r, a.g, a.b, c, d);
    }

    var f = new G(0),
        g = 0,
        h,
        k;
    return {
      getClearColor: function getClearColor() {
        return f;
      },
      setClearColor: function setClearColor(a, b) {
        f.set(a);
        g = void 0 !== b ? b : 1;
        e(f, g);
      },
      getClearAlpha: function getClearAlpha() {
        return g;
      },
      setClearAlpha: function setClearAlpha(a) {
        g = a;
        e(f, g);
      },
      render: function render(b, d, n, r) {
        d = d.background;
        null === d ? e(f, g) : d && d.isColor && (e(d, 1), r = !0);
        (a.autoClear || r) && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil);
        d && (d.isCubeTexture || d.isWebGLRenderTargetCube) ? (void 0 === k && (k = new pa(new pb(1, 1, 1), new ka({
          type: "BackgroundCubeMaterial",
          uniforms: va.clone(Qa.cube.uniforms),
          vertexShader: Qa.cube.vertexShader,
          fragmentShader: Qa.cube.fragmentShader,
          side: 1,
          depthTest: !0,
          depthWrite: !1,
          fog: !1
        })), k.geometry.removeAttribute("normal"), k.geometry.removeAttribute("uv"), k.onBeforeRender = function (a, b, c) {
          this.matrixWorld.copyPosition(c.matrixWorld);
        }, c.update(k)), k.material.uniforms.tCube.value = d.isWebGLRenderTargetCube ? d.texture : d, k.material.uniforms.tFlip.value = d.isWebGLRenderTargetCube ? 1 : -1, b.push(k, k.geometry, k.material, 0, null)) : d && d.isTexture && (void 0 === h && (h = new pa(new qb(2, 2), new ka({
          type: "BackgroundMaterial",
          uniforms: va.clone(Qa.background.uniforms),
          vertexShader: Qa.background.vertexShader,
          fragmentShader: Qa.background.fragmentShader,
          side: 0,
          depthTest: !0,
          depthWrite: !1,
          fog: !1
        })), h.geometry.removeAttribute("normal"), c.update(h)), h.material.uniforms.t2D.value = d, !0 === d.matrixAutoUpdate && d.updateMatrix(), h.material.uniforms.uvTransform.value.copy(d.matrix), b.push(h, h.geometry, h.material, 0, null));
      }
    };
  }

  function Rf(a, b, c, d) {
    var e;

    this.setMode = function (a) {
      e = a;
    };

    this.render = function (b, d) {
      a.drawArrays(e, b, d);
      c.update(d, e);
    };

    this.renderInstances = function (f, g, h) {
      if (d.isWebGL2) var k = a;else if (k = b.get("ANGLE_instanced_arrays"), null === k) {
        console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
      k[d.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](e, g, h, f.maxInstancedCount);
      c.update(h, e, f.maxInstancedCount);
    };
  }

  function Sf(a, b, c) {
    function d(b) {
      if ("highp" === b) {
        if (0 < a.getShaderPrecisionFormat(35633, 36338).precision && 0 < a.getShaderPrecisionFormat(35632, 36338).precision) return "highp";
        b = "mediump";
      }

      return "mediump" === b && 0 < a.getShaderPrecisionFormat(35633, 36337).precision && 0 < a.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp";
    }

    var e,
        f = "undefined" !== typeof WebGL2RenderingContext && a instanceof WebGL2RenderingContext,
        g = void 0 !== c.precision ? c.precision : "highp",
        h = d(g);
    h !== g && (console.warn("THREE.WebGLRenderer:", g, "not supported, using", h, "instead."), g = h);
    c = !0 === c.logarithmicDepthBuffer;
    h = a.getParameter(34930);
    var k = a.getParameter(35660),
        m = a.getParameter(3379),
        q = a.getParameter(34076),
        n = a.getParameter(34921),
        r = a.getParameter(36347),
        x = a.getParameter(36348),
        t = a.getParameter(36349),
        l = 0 < k,
        w = f || !!b.get("OES_texture_float");
    return {
      isWebGL2: f,
      getMaxAnisotropy: function getMaxAnisotropy() {
        if (void 0 !== e) return e;
        var c = b.get("EXT_texture_filter_anisotropic");
        return e = null !== c ? a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
      },
      getMaxPrecision: d,
      precision: g,
      logarithmicDepthBuffer: c,
      maxTextures: h,
      maxVertexTextures: k,
      maxTextureSize: m,
      maxCubemapSize: q,
      maxAttributes: n,
      maxVertexUniforms: r,
      maxVaryings: x,
      maxFragmentUniforms: t,
      vertexTextures: l,
      floatFragmentTextures: w,
      floatVertexTextures: l && w
    };
  }

  function Tf() {
    function a() {
      m.value !== d && (m.value = d, m.needsUpdate = 0 < e);
      c.numPlanes = e;
      c.numIntersection = 0;
    }

    function b(a, b, d, e) {
      var f = null !== a ? a.length : 0,
          g = null;

      if (0 !== f) {
        g = m.value;

        if (!0 !== e || null === g) {
          e = d + 4 * f;
          b = b.matrixWorldInverse;
          k.getNormalMatrix(b);
          if (null === g || g.length < e) g = new Float32Array(e);

          for (e = 0; e !== f; ++e, d += 4) {
            h.copy(a[e]).applyMatrix4(b, k), h.normal.toArray(g, d), g[d + 3] = h.constant;
          }
        }

        m.value = g;
        m.needsUpdate = !0;
      }

      c.numPlanes = f;
      return g;
    }

    var c = this,
        d = null,
        e = 0,
        f = !1,
        g = !1,
        h = new Pa(),
        k = new da(),
        m = {
      value: null,
      needsUpdate: !1
    };
    this.uniform = m;
    this.numIntersection = this.numPlanes = 0;

    this.init = function (a, c, g) {
      var h = 0 !== a.length || c || 0 !== e || f;
      f = c;
      d = b(a, g, 0);
      e = a.length;
      return h;
    };

    this.beginShadows = function () {
      g = !0;
      b(null);
    };

    this.endShadows = function () {
      g = !1;
      a();
    };

    this.setState = function (c, h, k, x, l, u) {
      if (!f || null === c || 0 === c.length || g && !k) g ? b(null) : a();else {
        k = g ? 0 : e;
        var n = 4 * k,
            q = l.clippingState || null;
        m.value = q;
        q = b(c, x, n, u);

        for (c = 0; c !== n; ++c) {
          q[c] = d[c];
        }

        l.clippingState = q;
        this.numIntersection = h ? this.numPlanes : 0;
        this.numPlanes += k;
      }
    };
  }

  function Uf(a) {
    var b = {};
    return {
      get: function get(c) {
        if (void 0 !== b[c]) return b[c];

        switch (c) {
          case "WEBGL_depth_texture":
            var d = a.getExtension("WEBGL_depth_texture") || a.getExtension("MOZ_WEBGL_depth_texture") || a.getExtension("WEBKIT_WEBGL_depth_texture");
            break;

          case "EXT_texture_filter_anisotropic":
            d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
            break;

          case "WEBGL_compressed_texture_s3tc":
            d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
            break;

          case "WEBGL_compressed_texture_pvrtc":
            d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
            break;

          default:
            d = a.getExtension(c);
        }

        null === d && console.warn("THREE.WebGLRenderer: " + c + " extension not supported.");
        return b[c] = d;
      }
    };
  }

  function Vf(a, b, c) {
    function d(a) {
      var g = a.target;
      a = e[g.id];
      null !== a.index && b.remove(a.index);

      for (var k in a.attributes) {
        b.remove(a.attributes[k]);
      }

      g.removeEventListener("dispose", d);
      delete e[g.id];
      if (k = f[a.id]) b.remove(k), delete f[a.id];
      c.memory.geometries--;
    }

    var e = {},
        f = {};
    return {
      get: function get(a, b) {
        var f = e[b.id];
        if (f) return f;
        b.addEventListener("dispose", d);
        b.isBufferGeometry ? f = b : b.isGeometry && (void 0 === b._bufferGeometry && (b._bufferGeometry = new E().setFromObject(a)), f = b._bufferGeometry);
        e[b.id] = f;
        c.memory.geometries++;
        return f;
      },
      update: function update(a) {
        var c = a.index,
            d = a.attributes;
        null !== c && b.update(c, 34963);

        for (var e in d) {
          b.update(d[e], 34962);
        }

        a = a.morphAttributes;

        for (e in a) {
          c = a[e];
          d = 0;

          for (var f = c.length; d < f; d++) {
            b.update(c[d], 34962);
          }
        }
      },
      getWireframeAttribute: function getWireframeAttribute(a) {
        var c = f[a.id];
        if (c) return c;
        c = [];
        var d = a.index,
            e = a.attributes;

        if (null !== d) {
          d = d.array;
          e = 0;

          for (var g = d.length; e < g; e += 3) {
            var n = d[e + 0],
                r = d[e + 1],
                x = d[e + 2];
            c.push(n, r, r, x, x, n);
          }
        } else for (d = e.position.array, e = 0, g = d.length / 3 - 1; e < g; e += 3) {
          n = e + 0, r = e + 1, x = e + 2, c.push(n, r, r, x, x, n);
        }

        c = new (65535 < Je(c) ? ob : nb)(c, 1);
        b.update(c, 34963);
        return f[a.id] = c;
      }
    };
  }

  function Wf(a, b, c, d) {
    var e, f, g;

    this.setMode = function (a) {
      e = a;
    };

    this.setIndex = function (a) {
      f = a.type;
      g = a.bytesPerElement;
    };

    this.render = function (b, d) {
      a.drawElements(e, d, f, b * g);
      c.update(d, e);
    };

    this.renderInstances = function (h, k, m) {
      if (d.isWebGL2) var q = a;else if (q = b.get("ANGLE_instanced_arrays"), null === q) {
        console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
      q[d.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](e, m, f, k * g, h.maxInstancedCount);
      c.update(m, e, h.maxInstancedCount);
    };
  }

  function Xf(a) {
    var b = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    return {
      memory: {
        geometries: 0,
        textures: 0
      },
      render: b,
      programs: null,
      autoReset: !0,
      reset: function reset() {
        b.frame++;
        b.calls = 0;
        b.triangles = 0;
        b.points = 0;
        b.lines = 0;
      },
      update: function update(a, d, e) {
        e = e || 1;
        b.calls++;

        switch (d) {
          case 4:
            b.triangles += a / 3 * e;
            break;

          case 5:
          case 6:
            b.triangles += e * (a - 2);
            break;

          case 1:
            b.lines += a / 2 * e;
            break;

          case 3:
            b.lines += e * (a - 1);
            break;

          case 2:
            b.lines += e * a;
            break;

          case 0:
            b.points += e * a;
            break;

          default:
            console.error("THREE.WebGLInfo: Unknown draw mode:", d);
        }
      }
    };
  }

  function Yf(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
  }

  function Zf(a) {
    var b = {},
        c = new Float32Array(8);
    return {
      update: function update(d, e, f, g) {
        var h = d.morphTargetInfluences,
            k = h.length;
        d = b[e.id];

        if (void 0 === d) {
          d = [];

          for (var m = 0; m < k; m++) {
            d[m] = [m, 0];
          }

          b[e.id] = d;
        }

        var q = f.morphTargets && e.morphAttributes.position;
        f = f.morphNormals && e.morphAttributes.normal;

        for (m = 0; m < k; m++) {
          var n = d[m];
          0 !== n[1] && (q && e.removeAttribute("morphTarget" + m), f && e.removeAttribute("morphNormal" + m));
        }

        for (m = 0; m < k; m++) {
          n = d[m], n[0] = m, n[1] = h[m];
        }

        d.sort(Yf);

        for (m = 0; 8 > m; m++) {
          if (n = d[m]) if (h = n[0], k = n[1]) {
            q && e.addAttribute("morphTarget" + m, q[h]);
            f && e.addAttribute("morphNormal" + m, f[h]);
            c[m] = k;
            continue;
          }
          c[m] = 0;
        }

        g.getUniforms().setValue(a, "morphTargetInfluences", c);
      }
    };
  }

  function $f(a, b) {
    var c = {};
    return {
      update: function update(d) {
        var e = b.render.frame,
            f = d.geometry,
            g = a.get(d, f);
        c[g.id] !== e && (f.isGeometry && g.updateFromObject(d), a.update(g), c[g.id] = e);
        return g;
      },
      dispose: function dispose() {
        c = {};
      }
    };
  }

  function Ya(a, b, c, d, e, f, g, h, k, m) {
    a = void 0 !== a ? a : [];
    W.call(this, a, void 0 !== b ? b : 301, c, d, e, f, g, h, k, m);
    this.flipY = !1;
  }

  function Mb(a, b, c, d) {
    W.call(this, null);
    this.image = {
      data: a,
      width: b,
      height: c,
      depth: d
    };
    this.minFilter = this.magFilter = 1003;
    this.flipY = this.generateMipmaps = !1;
  }

  function Nb(a, b, c) {
    var d = a[0];
    if (0 >= d || 0 < d) return a;
    var e = b * c,
        f = Ke[e];
    void 0 === f && (f = new Float32Array(e), Ke[e] = f);
    if (0 !== b) for (d.toArray(f, 0), d = 1, e = 0; d !== b; ++d) {
      e += c, a[d].toArray(f, e);
    }
    return f;
  }

  function ea(a, b) {
    if (a.length !== b.length) return !1;

    for (var c = 0, d = a.length; c < d; c++) {
      if (a[c] !== b[c]) return !1;
    }

    return !0;
  }

  function sa(a, b) {
    for (var c = 0, d = b.length; c < d; c++) {
      a[c] = b[c];
    }
  }

  function Le(a, b) {
    var c = Me[b];
    void 0 === c && (c = new Int32Array(b), Me[b] = c);

    for (var d = 0; d !== b; ++d) {
      c[d] = a.allocTextureUnit();
    }

    return c;
  }

  function ag(a, b) {
    var c = this.cache;
    c[0] !== b && (a.uniform1f(this.addr, b), c[0] = b);
  }

  function bg(a, b) {
    var c = this.cache;
    c[0] !== b && (a.uniform1i(this.addr, b), c[0] = b);
  }

  function cg(a, b) {
    var c = this.cache;

    if (void 0 !== b.x) {
      if (c[0] !== b.x || c[1] !== b.y) a.uniform2f(this.addr, b.x, b.y), c[0] = b.x, c[1] = b.y;
    } else ea(c, b) || (a.uniform2fv(this.addr, b), sa(c, b));
  }

  function dg(a, b) {
    var c = this.cache;

    if (void 0 !== b.x) {
      if (c[0] !== b.x || c[1] !== b.y || c[2] !== b.z) a.uniform3f(this.addr, b.x, b.y, b.z), c[0] = b.x, c[1] = b.y, c[2] = b.z;
    } else if (void 0 !== b.r) {
      if (c[0] !== b.r || c[1] !== b.g || c[2] !== b.b) a.uniform3f(this.addr, b.r, b.g, b.b), c[0] = b.r, c[1] = b.g, c[2] = b.b;
    } else ea(c, b) || (a.uniform3fv(this.addr, b), sa(c, b));
  }

  function eg(a, b) {
    var c = this.cache;

    if (void 0 !== b.x) {
      if (c[0] !== b.x || c[1] !== b.y || c[2] !== b.z || c[3] !== b.w) a.uniform4f(this.addr, b.x, b.y, b.z, b.w), c[0] = b.x, c[1] = b.y, c[2] = b.z, c[3] = b.w;
    } else ea(c, b) || (a.uniform4fv(this.addr, b), sa(c, b));
  }

  function fg(a, b) {
    var c = this.cache,
        d = b.elements;
    void 0 === d ? ea(c, b) || (a.uniformMatrix2fv(this.addr, !1, b), sa(c, b)) : ea(c, d) || (Ne.set(d), a.uniformMatrix2fv(this.addr, !1, Ne), sa(c, d));
  }

  function gg(a, b) {
    var c = this.cache,
        d = b.elements;
    void 0 === d ? ea(c, b) || (a.uniformMatrix3fv(this.addr, !1, b), sa(c, b)) : ea(c, d) || (Oe.set(d), a.uniformMatrix3fv(this.addr, !1, Oe), sa(c, d));
  }

  function hg(a, b) {
    var c = this.cache,
        d = b.elements;
    void 0 === d ? ea(c, b) || (a.uniformMatrix4fv(this.addr, !1, b), sa(c, b)) : ea(c, d) || (Pe.set(d), a.uniformMatrix4fv(this.addr, !1, Pe), sa(c, d));
  }

  function ig(a, b, c) {
    var d = this.cache,
        e = c.allocTextureUnit();
    d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);
    c.setTexture2D(b || Qe, e);
  }

  function jg(a, b, c) {
    var d = this.cache,
        e = c.allocTextureUnit();
    d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);
    c.setTexture3D(b || kg, e);
  }

  function lg(a, b, c) {
    var d = this.cache,
        e = c.allocTextureUnit();
    d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);
    c.setTextureCube(b || Re, e);
  }

  function Se(a, b) {
    var c = this.cache;
    ea(c, b) || (a.uniform2iv(this.addr, b), sa(c, b));
  }

  function Te(a, b) {
    var c = this.cache;
    ea(c, b) || (a.uniform3iv(this.addr, b), sa(c, b));
  }

  function Ue(a, b) {
    var c = this.cache;
    ea(c, b) || (a.uniform4iv(this.addr, b), sa(c, b));
  }

  function mg(a) {
    switch (a) {
      case 5126:
        return ag;

      case 35664:
        return cg;

      case 35665:
        return dg;

      case 35666:
        return eg;

      case 35674:
        return fg;

      case 35675:
        return gg;

      case 35676:
        return hg;

      case 35678:
      case 36198:
        return ig;

      case 35679:
        return jg;

      case 35680:
        return lg;

      case 5124:
      case 35670:
        return bg;

      case 35667:
      case 35671:
        return Se;

      case 35668:
      case 35672:
        return Te;

      case 35669:
      case 35673:
        return Ue;
    }
  }

  function ng(a, b) {
    var c = this.cache;
    ea(c, b) || (a.uniform1fv(this.addr, b), sa(c, b));
  }

  function og(a, b) {
    var c = this.cache;
    ea(c, b) || (a.uniform1iv(this.addr, b), sa(c, b));
  }

  function pg(a, b) {
    var c = this.cache;
    b = Nb(b, this.size, 2);
    ea(c, b) || (a.uniform2fv(this.addr, b), this.updateCache(b));
  }

  function qg(a, b) {
    var c = this.cache;
    b = Nb(b, this.size, 3);
    ea(c, b) || (a.uniform3fv(this.addr, b), this.updateCache(b));
  }

  function rg(a, b) {
    var c = this.cache;
    b = Nb(b, this.size, 4);
    ea(c, b) || (a.uniform4fv(this.addr, b), this.updateCache(b));
  }

  function sg(a, b) {
    var c = this.cache;
    b = Nb(b, this.size, 4);
    ea(c, b) || (a.uniformMatrix2fv(this.addr, !1, b), this.updateCache(b));
  }

  function tg(a, b) {
    var c = this.cache;
    b = Nb(b, this.size, 9);
    ea(c, b) || (a.uniformMatrix3fv(this.addr, !1, b), this.updateCache(b));
  }

  function ug(a, b) {
    var c = this.cache;
    b = Nb(b, this.size, 16);
    ea(c, b) || (a.uniformMatrix4fv(this.addr, !1, b), this.updateCache(b));
  }

  function vg(a, b, c) {
    var d = this.cache,
        e = b.length,
        f = Le(c, e);
    !1 === ea(d, f) && (a.uniform1iv(this.addr, f), sa(d, f));

    for (a = 0; a !== e; ++a) {
      c.setTexture2D(b[a] || Qe, f[a]);
    }
  }

  function wg(a, b, c) {
    var d = this.cache,
        e = b.length,
        f = Le(c, e);
    !1 === ea(d, f) && (a.uniform1iv(this.addr, f), sa(d, f));

    for (a = 0; a !== e; ++a) {
      c.setTextureCube(b[a] || Re, f[a]);
    }
  }

  function xg(a) {
    switch (a) {
      case 5126:
        return ng;

      case 35664:
        return pg;

      case 35665:
        return qg;

      case 35666:
        return rg;

      case 35674:
        return sg;

      case 35675:
        return tg;

      case 35676:
        return ug;

      case 35678:
        return vg;

      case 35680:
        return wg;

      case 5124:
      case 35670:
        return og;

      case 35667:
      case 35671:
        return Se;

      case 35668:
      case 35672:
        return Te;

      case 35669:
      case 35673:
        return Ue;
    }
  }

  function yg(a, b, c) {
    this.id = a;
    this.addr = c;
    this.cache = [];
    this.setValue = mg(b.type);
  }

  function Ve(a, b, c) {
    this.id = a;
    this.addr = c;
    this.cache = [];
    this.size = b.size;
    this.setValue = xg(b.type);
  }

  function We(a) {
    this.id = a;
    this.seq = [];
    this.map = {};
  }

  function db(a, b, c) {
    this.seq = [];
    this.map = {};
    this.renderer = c;
    c = a.getProgramParameter(b, 35718);

    for (var d = 0; d < c; ++d) {
      var e = a.getActiveUniform(b, d),
          f = a.getUniformLocation(b, e.name),
          g = this,
          h = e.name,
          k = h.length;

      for ($d.lastIndex = 0;;) {
        var m = $d.exec(h),
            q = $d.lastIndex,
            n = m[1],
            r = m[3];
        "]" === m[2] && (n |= 0);

        if (void 0 === r || "[" === r && q + 2 === k) {
          h = g;
          e = void 0 === r ? new yg(n, e, f) : new Ve(n, e, f);
          h.seq.push(e);
          h.map[e.id] = e;
          break;
        } else r = g.map[n], void 0 === r && (r = new We(n), n = g, g = r, n.seq.push(g), n.map[g.id] = g), g = r;
      }
    }
  }

  function zg(a) {
    a = a.split("\n");

    for (var b = 0; b < a.length; b++) {
      a[b] = b + 1 + ": " + a[b];
    }

    return a.join("\n");
  }

  function Xe(a, b, c) {
    var d = a.createShader(b);
    a.shaderSource(d, c);
    a.compileShader(d);
    !1 === a.getShaderParameter(d, 35713) && console.error("THREE.WebGLShader: Shader couldn't compile.");
    "" !== a.getShaderInfoLog(d) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", 35633 === b ? "vertex" : "fragment", a.getShaderInfoLog(d), zg(c));
    return d;
  }

  function Ye(a) {
    switch (a) {
      case 3E3:
        return ["Linear", "( value )"];

      case 3001:
        return ["sRGB", "( value )"];

      case 3002:
        return ["RGBE", "( value )"];

      case 3004:
        return ["RGBM", "( value, 7.0 )"];

      case 3005:
        return ["RGBM", "( value, 16.0 )"];

      case 3006:
        return ["RGBD", "( value, 256.0 )"];

      case 3007:
        return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];

      default:
        throw Error("unsupported encoding: " + a);
    }
  }

  function td(a, b) {
    b = Ye(b);
    return "vec4 " + a + "( vec4 value ) { return " + b[0] + "ToLinear" + b[1] + "; }";
  }

  function Ag(a, b) {
    b = Ye(b);
    return "vec4 " + a + "( vec4 value ) { return LinearTo" + b[0] + b[1] + "; }";
  }

  function Bg(a, b) {
    switch (b) {
      case 1:
        b = "Linear";
        break;

      case 2:
        b = "Reinhard";
        break;

      case 3:
        b = "Uncharted2";
        break;

      case 4:
        b = "OptimizedCineon";
        break;

      default:
        throw Error("unsupported toneMapping: " + b);
    }

    return "vec3 " + a + "( vec3 color ) { return " + b + "ToneMapping( color ); }";
  }

  function Cg(a, b, c) {
    a = a || {};
    return [a.derivatives || b.envMapCubeUV || b.bumpMap || b.normalMap && !b.objectSpaceNormalMap || b.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (a.fragDepth || b.logarithmicDepthBuffer) && c.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", a.drawBuffers && c.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (a.shaderTextureLOD || b.envMap) && c.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(zc).join("\n");
  }

  function Dg(a) {
    var b = [],
        c;

    for (c in a) {
      var d = a[c];
      !1 !== d && b.push("#define " + c + " " + d);
    }

    return b.join("\n");
  }

  function zc(a) {
    return "" !== a;
  }

  function Ze(a, b) {
    return a.replace(/NUM_DIR_LIGHTS/g, b.numDirLights).replace(/NUM_SPOT_LIGHTS/g, b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, b.numPointLights).replace(/NUM_HEMI_LIGHTS/g, b.numHemiLights);
  }

  function $e(a, b) {
    return a.replace(/NUM_CLIPPING_PLANES/g, b.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, b.numClippingPlanes - b.numClipIntersection);
  }

  function ae(a) {
    return a.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function (a, c) {
      a = K[c];
      if (void 0 === a) throw Error("Can not resolve #include <" + c + ">");
      return ae(a);
    });
  }

  function af(a) {
    return a.replace(/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function (a, c, d, e) {
      a = "";

      for (c = parseInt(c); c < parseInt(d); c++) {
        a += e.replace(/\[ i \]/g, "[ " + c + " ]");
      }

      return a;
    });
  }

  function Eg(a, b, c, d, e, f, g) {
    var h = a.context,
        k = d.defines,
        m = e.vertexShader,
        q = e.fragmentShader,
        n = "SHADOWMAP_TYPE_BASIC";
    1 === f.shadowMapType ? n = "SHADOWMAP_TYPE_PCF" : 2 === f.shadowMapType && (n = "SHADOWMAP_TYPE_PCF_SOFT");
    var r = "ENVMAP_TYPE_CUBE",
        x = "ENVMAP_MODE_REFLECTION",
        l = "ENVMAP_BLENDING_MULTIPLY";

    if (f.envMap) {
      switch (d.envMap.mapping) {
        case 301:
        case 302:
          r = "ENVMAP_TYPE_CUBE";
          break;

        case 306:
        case 307:
          r = "ENVMAP_TYPE_CUBE_UV";
          break;

        case 303:
        case 304:
          r = "ENVMAP_TYPE_EQUIREC";
          break;

        case 305:
          r = "ENVMAP_TYPE_SPHERE";
      }

      switch (d.envMap.mapping) {
        case 302:
        case 304:
          x = "ENVMAP_MODE_REFRACTION";
      }

      switch (d.combine) {
        case 0:
          l = "ENVMAP_BLENDING_MULTIPLY";
          break;

        case 1:
          l = "ENVMAP_BLENDING_MIX";
          break;

        case 2:
          l = "ENVMAP_BLENDING_ADD";
      }
    }

    var u = 0 < a.gammaFactor ? a.gammaFactor : 1,
        w = g.isWebGL2 ? "" : Cg(d.extensions, f, b),
        p = Dg(k),
        v = h.createProgram();
    d.isRawShaderMaterial ? (k = [p].filter(zc).join("\n"), 0 < k.length && (k += "\n"), b = [w, p].filter(zc).join("\n"), 0 < b.length && (b += "\n")) : (k = ["precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + e.name, p, f.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + u, "#define MAX_BONES " + f.maxBones, f.useFog && f.fog ? "#define USE_FOG" : "", f.useFog && f.fogExp ? "#define FOG_EXP2" : "", f.map ? "#define USE_MAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + x : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.normalMap && f.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", f.displacementMap && f.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", f.metalnessMap ? "#define USE_METALNESSMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexColors ? "#define USE_COLOR" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.skinning ? "#define USE_SKINNING" : "", f.useVertexTexture ? "#define BONE_TEXTURE" : "", f.morphTargets ? "#define USE_MORPHTARGETS" : "", f.morphNormals && !1 === f.flatShading ? "#define USE_MORPHNORMALS" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + n : "", f.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && (g.isWebGL2 || b.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(zc).join("\n"), b = [w, "precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + e.name, p, f.alphaTest ? "#define ALPHATEST " + f.alphaTest + (f.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + u, f.useFog && f.fog ? "#define USE_FOG" : "", f.useFog && f.fogExp ? "#define FOG_EXP2" : "", f.map ? "#define USE_MAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + r : "", f.envMap ? "#define " + x : "", f.envMap ? "#define " + l : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.normalMap && f.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", f.metalnessMap ? "#define USE_METALNESSMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexColors ? "#define USE_COLOR" : "", f.gradientMap ? "#define USE_GRADIENTMAP" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + n : "", f.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", f.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && (g.isWebGL2 || b.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", f.envMap && (g.isWebGL2 || b.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", 0 !== f.toneMapping ? "#define TONE_MAPPING" : "", 0 !== f.toneMapping ? K.tonemapping_pars_fragment : "", 0 !== f.toneMapping ? Bg("toneMapping", f.toneMapping) : "", f.dithering ? "#define DITHERING" : "", f.outputEncoding || f.mapEncoding || f.matcapEncoding || f.envMapEncoding || f.emissiveMapEncoding ? K.encodings_pars_fragment : "", f.mapEncoding ? td("mapTexelToLinear", f.mapEncoding) : "", f.matcapEncoding ? td("matcapTexelToLinear", f.matcapEncoding) : "", f.envMapEncoding ? td("envMapTexelToLinear", f.envMapEncoding) : "", f.emissiveMapEncoding ? td("emissiveMapTexelToLinear", f.emissiveMapEncoding) : "", f.outputEncoding ? Ag("linearToOutputTexel", f.outputEncoding) : "", f.depthPacking ? "#define DEPTH_PACKING " + d.depthPacking : "", "\n"].filter(zc).join("\n"));
    m = ae(m);
    m = Ze(m, f);
    m = $e(m, f);
    q = ae(q);
    q = Ze(q, f);
    q = $e(q, f);
    m = af(m);
    q = af(q);
    g.isWebGL2 && !d.isRawShaderMaterial && (g = !1, n = /^\s*#version\s+300\s+es\s*\n/, d.isShaderMaterial && null !== m.match(n) && null !== q.match(n) && (g = !0, m = m.replace(n, ""), q = q.replace(n, "")), k = "#version 300 es\n\n#define attribute in\n#define varying out\n#define texture2D texture\n" + k, b = ["#version 300 es\n\n#define varying in", g ? "" : "out highp vec4 pc_fragColor;", g ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + b);
    q = b + q;
    m = Xe(h, 35633, k + m);
    q = Xe(h, 35632, q);
    h.attachShader(v, m);
    h.attachShader(v, q);
    void 0 !== d.index0AttributeName ? h.bindAttribLocation(v, 0, d.index0AttributeName) : !0 === f.morphTargets && h.bindAttribLocation(v, 0, "position");
    h.linkProgram(v);
    f = h.getProgramInfoLog(v).trim();
    g = h.getShaderInfoLog(m).trim();
    n = h.getShaderInfoLog(q).trim();
    x = r = !0;
    if (!1 === h.getProgramParameter(v, 35714)) r = !1, console.error("THREE.WebGLProgram: shader error: ", h.getError(), "35715", h.getProgramParameter(v, 35715), "gl.getProgramInfoLog", f, g, n);else if ("" !== f) console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", f);else if ("" === g || "" === n) x = !1;
    x && (this.diagnostics = {
      runnable: r,
      material: d,
      programLog: f,
      vertexShader: {
        log: g,
        prefix: k
      },
      fragmentShader: {
        log: n,
        prefix: b
      }
    });
    h.deleteShader(m);
    h.deleteShader(q);
    var H;

    this.getUniforms = function () {
      void 0 === H && (H = new db(h, v, a));
      return H;
    };

    var y;

    this.getAttributes = function () {
      if (void 0 === y) {
        for (var a = {}, b = h.getProgramParameter(v, 35721), c = 0; c < b; c++) {
          var d = h.getActiveAttrib(v, c).name;
          a[d] = h.getAttribLocation(v, d);
        }

        y = a;
      }

      return y;
    };

    this.destroy = function () {
      h.deleteProgram(v);
      this.program = void 0;
    };

    Object.defineProperties(this, {
      uniforms: {
        get: function get() {
          console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");
          return this.getUniforms();
        }
      },
      attributes: {
        get: function get() {
          console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");
          return this.getAttributes();
        }
      }
    });
    this.name = e.name;
    this.id = Fg++;
    this.code = c;
    this.usedTimes = 1;
    this.program = v;
    this.vertexShader = m;
    this.fragmentShader = q;
    return this;
  }

  function Gg(a, b, c) {
    function d(a, b) {
      if (a) a.isTexture ? c = a.encoding : a.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), c = a.texture.encoding);else var c = 3E3;
      3E3 === c && b && (c = 3007);
      return c;
    }

    var e = [],
        f = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "phong",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    },
        g = "precision supportsVertexTextures map mapEncoding matcapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering".split(" ");

    this.getParameters = function (b, e, g, q, n, r, x) {
      var h = f[b.type];

      if (x.isSkinnedMesh) {
        var k = x.skeleton.bones;
        if (c.floatVertexTextures) k = 1024;else {
          var m = Math.min(Math.floor((c.maxVertexUniforms - 20) / 4), k.length);
          m < k.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + k.length + " bones. This GPU supports " + m + "."), k = 0) : k = m;
        }
      } else k = 0;

      m = c.precision;
      null !== b.precision && (m = c.getMaxPrecision(b.precision), m !== b.precision && console.warn("THREE.WebGLProgram.getParameters:", b.precision, "not supported, using", m, "instead."));
      var l = a.getRenderTarget();
      return {
        shaderID: h,
        precision: m,
        supportsVertexTextures: c.vertexTextures,
        outputEncoding: d(l ? l.texture : null, a.gammaOutput),
        map: !!b.map,
        mapEncoding: d(b.map, a.gammaInput),
        matcap: !!b.matcap,
        matcapEncoding: d(b.matcap, a.gammaInput),
        envMap: !!b.envMap,
        envMapMode: b.envMap && b.envMap.mapping,
        envMapEncoding: d(b.envMap, a.gammaInput),
        envMapCubeUV: !!b.envMap && (306 === b.envMap.mapping || 307 === b.envMap.mapping),
        lightMap: !!b.lightMap,
        aoMap: !!b.aoMap,
        emissiveMap: !!b.emissiveMap,
        emissiveMapEncoding: d(b.emissiveMap, a.gammaInput),
        bumpMap: !!b.bumpMap,
        normalMap: !!b.normalMap,
        objectSpaceNormalMap: 1 === b.normalMapType,
        displacementMap: !!b.displacementMap,
        roughnessMap: !!b.roughnessMap,
        metalnessMap: !!b.metalnessMap,
        specularMap: !!b.specularMap,
        alphaMap: !!b.alphaMap,
        gradientMap: !!b.gradientMap,
        combine: b.combine,
        vertexColors: b.vertexColors,
        fog: !!q,
        useFog: b.fog,
        fogExp: q && q.isFogExp2,
        flatShading: b.flatShading,
        sizeAttenuation: b.sizeAttenuation,
        logarithmicDepthBuffer: c.logarithmicDepthBuffer,
        skinning: b.skinning && 0 < k,
        maxBones: k,
        useVertexTexture: c.floatVertexTextures,
        morphTargets: b.morphTargets,
        morphNormals: b.morphNormals,
        maxMorphTargets: a.maxMorphTargets,
        maxMorphNormals: a.maxMorphNormals,
        numDirLights: e.directional.length,
        numPointLights: e.point.length,
        numSpotLights: e.spot.length,
        numRectAreaLights: e.rectArea.length,
        numHemiLights: e.hemi.length,
        numClippingPlanes: n,
        numClipIntersection: r,
        dithering: b.dithering,
        shadowMapEnabled: a.shadowMap.enabled && x.receiveShadow && 0 < g.length,
        shadowMapType: a.shadowMap.type,
        toneMapping: a.toneMapping,
        physicallyCorrectLights: a.physicallyCorrectLights,
        premultipliedAlpha: b.premultipliedAlpha,
        alphaTest: b.alphaTest,
        doubleSided: 2 === b.side,
        flipSided: 1 === b.side,
        depthPacking: void 0 !== b.depthPacking ? b.depthPacking : !1
      };
    };

    this.getProgramCode = function (b, c) {
      var d = [];
      c.shaderID ? d.push(c.shaderID) : (d.push(b.fragmentShader), d.push(b.vertexShader));
      if (void 0 !== b.defines) for (var e in b.defines) {
        d.push(e), d.push(b.defines[e]);
      }

      for (e = 0; e < g.length; e++) {
        d.push(c[g[e]]);
      }

      d.push(b.onBeforeCompile.toString());
      d.push(a.gammaOutput);
      d.push(a.gammaFactor);
      return d.join();
    };

    this.acquireProgram = function (d, f, g, q) {
      for (var h, k = 0, m = e.length; k < m; k++) {
        var l = e[k];

        if (l.code === q) {
          h = l;
          ++h.usedTimes;
          break;
        }
      }

      void 0 === h && (h = new Eg(a, b, q, d, f, g, c), e.push(h));
      return h;
    };

    this.releaseProgram = function (a) {
      if (0 === --a.usedTimes) {
        var b = e.indexOf(a);
        e[b] = e[e.length - 1];
        e.pop();
        a.destroy();
      }
    };

    this.programs = e;
  }

  function Hg() {
    var a = new WeakMap();
    return {
      get: function get(b) {
        var c = a.get(b);
        void 0 === c && (c = {}, a.set(b, c));
        return c;
      },
      remove: function remove(b) {
        a.delete(b);
      },
      update: function update(b, c, d) {
        a.get(b)[c] = d;
      },
      dispose: function dispose() {
        a = new WeakMap();
      }
    };
  }

  function Ig(a, b) {
    return a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.program && b.program && a.program !== b.program ? a.program.id - b.program.id : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
  }

  function Jg(a, b) {
    return a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
  }

  function Kg() {
    var a = [],
        b = 0,
        c = [],
        d = [];
    return {
      opaque: c,
      transparent: d,
      init: function init() {
        b = 0;
        c.length = 0;
        d.length = 0;
      },
      push: function push(e, f, g, h, k) {
        var m = a[b];
        void 0 === m ? (m = {
          id: e.id,
          object: e,
          geometry: f,
          material: g,
          program: g.program,
          renderOrder: e.renderOrder,
          z: h,
          group: k
        }, a[b] = m) : (m.id = e.id, m.object = e, m.geometry = f, m.material = g, m.program = g.program, m.renderOrder = e.renderOrder, m.z = h, m.group = k);
        (!0 === g.transparent ? d : c).push(m);
        b++;
      },
      sort: function sort() {
        1 < c.length && c.sort(Ig);
        1 < d.length && d.sort(Jg);
      }
    };
  }

  function Lg() {
    var a = {};
    return {
      get: function get(b, c) {
        b = b.id + "," + c.id;
        c = a[b];
        void 0 === c && (c = new Kg(), a[b] = c);
        return c;
      },
      dispose: function dispose() {
        a = {};
      }
    };
  }

  function Mg() {
    var a = {};
    return {
      get: function get(b) {
        if (void 0 !== a[b.id]) return a[b.id];

        switch (b.type) {
          case "DirectionalLight":
            var c = {
              direction: new p(),
              color: new G(),
              shadow: !1,
              shadowBias: 0,
              shadowRadius: 1,
              shadowMapSize: new z()
            };
            break;

          case "SpotLight":
            c = {
              position: new p(),
              direction: new p(),
              color: new G(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0,
              shadow: !1,
              shadowBias: 0,
              shadowRadius: 1,
              shadowMapSize: new z()
            };
            break;

          case "PointLight":
            c = {
              position: new p(),
              color: new G(),
              distance: 0,
              decay: 0,
              shadow: !1,
              shadowBias: 0,
              shadowRadius: 1,
              shadowMapSize: new z(),
              shadowCameraNear: 1,
              shadowCameraFar: 1E3
            };
            break;

          case "HemisphereLight":
            c = {
              direction: new p(),
              skyColor: new G(),
              groundColor: new G()
            };
            break;

          case "RectAreaLight":
            c = {
              color: new G(),
              position: new p(),
              halfWidth: new p(),
              halfHeight: new p()
            };
        }

        return a[b.id] = c;
      }
    };
  }

  function Ng() {
    var a = new Mg(),
        b = {
      id: Og++,
      hash: {
        stateID: -1,
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        shadowsLength: -1
      },
      ambient: [0, 0, 0],
      directional: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotShadowMap: [],
      spotShadowMatrix: [],
      rectArea: [],
      point: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: []
    },
        c = new p(),
        d = new P(),
        e = new P();
    return {
      setup: function setup(f, g, h) {
        var k = 0,
            m = 0,
            q = 0,
            n = 0,
            r = 0,
            x = 0,
            l = 0,
            u = 0;
        h = h.matrixWorldInverse;

        for (var w = 0, p = f.length; w < p; w++) {
          var v = f[w],
              H = v.color,
              y = v.intensity,
              N = v.distance,
              X = v.shadow && v.shadow.map ? v.shadow.map.texture : null;
          if (v.isAmbientLight) k += H.r * y, m += H.g * y, q += H.b * y;else if (v.isDirectionalLight) {
            var B = a.get(v);
            B.color.copy(v.color).multiplyScalar(v.intensity);
            B.direction.setFromMatrixPosition(v.matrixWorld);
            c.setFromMatrixPosition(v.target.matrixWorld);
            B.direction.sub(c);
            B.direction.transformDirection(h);
            if (B.shadow = v.castShadow) H = v.shadow, B.shadowBias = H.bias, B.shadowRadius = H.radius, B.shadowMapSize = H.mapSize;
            b.directionalShadowMap[n] = X;
            b.directionalShadowMatrix[n] = v.shadow.matrix;
            b.directional[n] = B;
            n++;
          } else if (v.isSpotLight) {
            B = a.get(v);
            B.position.setFromMatrixPosition(v.matrixWorld);
            B.position.applyMatrix4(h);
            B.color.copy(H).multiplyScalar(y);
            B.distance = N;
            B.direction.setFromMatrixPosition(v.matrixWorld);
            c.setFromMatrixPosition(v.target.matrixWorld);
            B.direction.sub(c);
            B.direction.transformDirection(h);
            B.coneCos = Math.cos(v.angle);
            B.penumbraCos = Math.cos(v.angle * (1 - v.penumbra));
            B.decay = v.decay;
            if (B.shadow = v.castShadow) H = v.shadow, B.shadowBias = H.bias, B.shadowRadius = H.radius, B.shadowMapSize = H.mapSize;
            b.spotShadowMap[x] = X;
            b.spotShadowMatrix[x] = v.shadow.matrix;
            b.spot[x] = B;
            x++;
          } else if (v.isRectAreaLight) B = a.get(v), B.color.copy(H).multiplyScalar(y), B.position.setFromMatrixPosition(v.matrixWorld), B.position.applyMatrix4(h), e.identity(), d.copy(v.matrixWorld), d.premultiply(h), e.extractRotation(d), B.halfWidth.set(.5 * v.width, 0, 0), B.halfHeight.set(0, .5 * v.height, 0), B.halfWidth.applyMatrix4(e), B.halfHeight.applyMatrix4(e), b.rectArea[l] = B, l++;else if (v.isPointLight) {
            B = a.get(v);
            B.position.setFromMatrixPosition(v.matrixWorld);
            B.position.applyMatrix4(h);
            B.color.copy(v.color).multiplyScalar(v.intensity);
            B.distance = v.distance;
            B.decay = v.decay;
            if (B.shadow = v.castShadow) H = v.shadow, B.shadowBias = H.bias, B.shadowRadius = H.radius, B.shadowMapSize = H.mapSize, B.shadowCameraNear = H.camera.near, B.shadowCameraFar = H.camera.far;
            b.pointShadowMap[r] = X;
            b.pointShadowMatrix[r] = v.shadow.matrix;
            b.point[r] = B;
            r++;
          } else v.isHemisphereLight && (B = a.get(v), B.direction.setFromMatrixPosition(v.matrixWorld), B.direction.transformDirection(h), B.direction.normalize(), B.skyColor.copy(v.color).multiplyScalar(y), B.groundColor.copy(v.groundColor).multiplyScalar(y), b.hemi[u] = B, u++);
        }

        b.ambient[0] = k;
        b.ambient[1] = m;
        b.ambient[2] = q;
        b.directional.length = n;
        b.spot.length = x;
        b.rectArea.length = l;
        b.point.length = r;
        b.hemi.length = u;
        b.hash.stateID = b.id;
        b.hash.directionalLength = n;
        b.hash.pointLength = r;
        b.hash.spotLength = x;
        b.hash.rectAreaLength = l;
        b.hash.hemiLength = u;
        b.hash.shadowsLength = g.length;
      },
      state: b
    };
  }

  function bf() {
    var a = new Ng(),
        b = [],
        c = [];
    return {
      init: function init() {
        b.length = 0;
        c.length = 0;
      },
      state: {
        lightsArray: b,
        shadowsArray: c,
        lights: a
      },
      setupLights: function setupLights(d) {
        a.setup(b, c, d);
      },
      pushLight: function pushLight(a) {
        b.push(a);
      },
      pushShadow: function pushShadow(a) {
        c.push(a);
      }
    };
  }

  function Pg() {
    var a = {};
    return {
      get: function get(b, c) {
        if (void 0 === a[b.id]) {
          var d = new bf();
          a[b.id] = {};
          a[b.id][c.id] = d;
        } else void 0 === a[b.id][c.id] ? (d = new bf(), a[b.id][c.id] = d) : d = a[b.id][c.id];

        return d;
      },
      dispose: function dispose() {
        a = {};
      }
    };
  }

  function eb(a) {
    L.call(this);
    this.type = "MeshDepthMaterial";
    this.depthPacking = 3200;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.lights = this.fog = !1;
    this.setValues(a);
  }

  function fb(a) {
    L.call(this);
    this.type = "MeshDistanceMaterial";
    this.referencePosition = new p();
    this.nearDistance = 1;
    this.farDistance = 1E3;
    this.morphTargets = this.skinning = !1;
    this.displacementMap = this.alphaMap = this.map = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.lights = this.fog = !1;
    this.setValues(a);
  }

  function cf(a, b, c) {
    function d(b, c, d, e, f, g) {
      var h = b.geometry;
      var k = n;
      var m = b.customDepthMaterial;
      d && (k = r, m = b.customDistanceMaterial);
      m ? k = m : (m = !1, c.morphTargets && (h && h.isBufferGeometry ? m = h.morphAttributes && h.morphAttributes.position && 0 < h.morphAttributes.position.length : h && h.isGeometry && (m = h.morphTargets && 0 < h.morphTargets.length)), b.isSkinnedMesh && !1 === c.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", b), b = b.isSkinnedMesh && c.skinning, h = 0, m && (h |= 1), b && (h |= 2), k = k[h]);
      a.localClippingEnabled && !0 === c.clipShadows && 0 !== c.clippingPlanes.length && (h = k.uuid, m = c.uuid, b = x[h], void 0 === b && (b = {}, x[h] = b), h = b[m], void 0 === h && (h = k.clone(), b[m] = h), k = h);
      k.visible = c.visible;
      k.wireframe = c.wireframe;
      k.side = null != c.shadowSide ? c.shadowSide : l[c.side];
      k.clipShadows = c.clipShadows;
      k.clippingPlanes = c.clippingPlanes;
      k.clipIntersection = c.clipIntersection;
      k.wireframeLinewidth = c.wireframeLinewidth;
      k.linewidth = c.linewidth;
      d && k.isMeshDistanceMaterial && (k.referencePosition.copy(e), k.nearDistance = f, k.farDistance = g);
      return k;
    }

    function e(c, g, h, k) {
      if (!1 !== c.visible) {
        if (c.layers.test(g.layers) && (c.isMesh || c.isLine || c.isPoints) && c.castShadow && (!c.frustumCulled || f.intersectsObject(c))) {
          c.modelViewMatrix.multiplyMatrices(h.matrixWorldInverse, c.matrixWorld);
          var m = b.update(c),
              n = c.material;
          if (Array.isArray(n)) for (var r = m.groups, x = 0, l = r.length; x < l; x++) {
            var t = r[x],
                u = n[t.materialIndex];
            u && u.visible && (u = d(c, u, k, q, h.near, h.far), a.renderBufferDirect(h, null, m, u, c, t));
          } else n.visible && (u = d(c, n, k, q, h.near, h.far), a.renderBufferDirect(h, null, m, u, c, null));
        }

        c = c.children;
        m = 0;

        for (n = c.length; m < n; m++) {
          e(c[m], g, h, k);
        }
      }
    }

    var f = new rd(),
        g = new P(),
        h = new z(),
        k = new z(c, c),
        m = new p(),
        q = new p(),
        n = Array(4),
        r = Array(4),
        x = {},
        l = {
      0: 1,
      1: 0,
      2: 2
    },
        u = [new p(1, 0, 0), new p(-1, 0, 0), new p(0, 0, 1), new p(0, 0, -1), new p(0, 1, 0), new p(0, -1, 0)],
        w = [new p(0, 1, 0), new p(0, 1, 0), new p(0, 1, 0), new p(0, 1, 0), new p(0, 0, 1), new p(0, 0, -1)],
        A = [new Z(), new Z(), new Z(), new Z(), new Z(), new Z()];

    for (c = 0; 4 !== c; ++c) {
      var v = 0 !== (c & 1),
          H = 0 !== (c & 2),
          y = new eb({
        depthPacking: 3201,
        morphTargets: v,
        skinning: H
      });
      n[c] = y;
      v = new fb({
        morphTargets: v,
        skinning: H
      });
      r[c] = v;
    }

    var N = this;
    this.enabled = !1;
    this.autoUpdate = !0;
    this.needsUpdate = !1;
    this.type = 1;

    this.render = function (b, c, d) {
      if (!1 !== N.enabled && (!1 !== N.autoUpdate || !1 !== N.needsUpdate) && 0 !== b.length) {
        var n = a.state;
        n.disable(3042);
        n.buffers.color.setClear(1, 1, 1, 1);
        n.buffers.depth.setTest(!0);
        n.setScissorTest(!1);

        for (var r, x = 0, l = b.length; x < l; x++) {
          var t = b[x];
          r = t.shadow;
          var X = t && t.isPointLight;
          if (void 0 === r) console.warn("THREE.WebGLShadowMap:", t, "has no shadow.");else {
            var B = r.camera;
            h.copy(r.mapSize);
            h.min(k);

            if (X) {
              var p = h.x,
                  v = h.y;
              A[0].set(2 * p, v, p, v);
              A[1].set(0, v, p, v);
              A[2].set(3 * p, v, p, v);
              A[3].set(p, v, p, v);
              A[4].set(3 * p, 0, p, v);
              A[5].set(p, 0, p, v);
              h.x *= 4;
              h.y *= 2;
            }

            null === r.map && (r.map = new kb(h.x, h.y, {
              minFilter: 1003,
              magFilter: 1003,
              format: 1023
            }), r.map.texture.name = t.name + ".shadowMap", B.updateProjectionMatrix());
            r.isSpotLightShadow && r.update(t);
            p = r.map;
            v = r.matrix;
            q.setFromMatrixPosition(t.matrixWorld);
            B.position.copy(q);
            X ? (r = 6, v.makeTranslation(-q.x, -q.y, -q.z)) : (r = 1, m.setFromMatrixPosition(t.target.matrixWorld), B.lookAt(m), B.updateMatrixWorld(), v.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), v.multiply(B.projectionMatrix), v.multiply(B.matrixWorldInverse));
            a.setRenderTarget(p);
            a.clear();

            for (t = 0; t < r; t++) {
              X && (m.copy(B.position), m.add(u[t]), B.up.copy(w[t]), B.lookAt(m), B.updateMatrixWorld(), n.viewport(A[t])), g.multiplyMatrices(B.projectionMatrix, B.matrixWorldInverse), f.setFromMatrix(g), e(c, d, B, X);
            }
          }
        }

        N.needsUpdate = !1;
      }
    };
  }

  function Qg(a, b, c, d) {
    function e(b, c, d) {
      var e = new Uint8Array(4),
          f = a.createTexture();
      a.bindTexture(b, f);
      a.texParameteri(b, 10241, 9728);
      a.texParameteri(b, 10240, 9728);

      for (b = 0; b < d; b++) {
        a.texImage2D(c + b, 0, 6408, 1, 1, 0, 6408, 5121, e);
      }

      return f;
    }

    function f(c, e) {
      p[c] = 1;
      0 === v[c] && (a.enableVertexAttribArray(c), v[c] = 1);
      H[c] !== e && ((d.isWebGL2 ? a : b.get("ANGLE_instanced_arrays"))[d.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](c, e), H[c] = e);
    }

    function g(b) {
      !0 !== y[b] && (a.enable(b), y[b] = !0);
    }

    function h(b) {
      !1 !== y[b] && (a.disable(b), y[b] = !1);
    }

    function k(b, d, e, f, k, m, n, q) {
      if (0 === b) B && (h(3042), B = !1);else if (B || (g(3042), B = !0), 5 !== b) {
        if (b !== Lb || q !== J) {
          if (100 !== z || 100 !== C) a.blendEquation(32774), C = z = 100;
          if (q) switch (b) {
            case 1:
              a.blendFuncSeparate(1, 771, 1, 771);
              break;

            case 2:
              a.blendFunc(1, 1);
              break;

            case 3:
              a.blendFuncSeparate(0, 0, 769, 771);
              break;

            case 4:
              a.blendFuncSeparate(0, 768, 0, 770);
              break;

            default:
              console.error("THREE.WebGLState: Invalid blending: ", b);
          } else switch (b) {
            case 1:
              a.blendFuncSeparate(770, 771, 1, 771);
              break;

            case 2:
              a.blendFunc(770, 1);
              break;

            case 3:
              a.blendFunc(0, 769);
              break;

            case 4:
              a.blendFunc(0, 768);
              break;

            default:
              console.error("THREE.WebGLState: Invalid blending: ", b);
          }
          E = D = Y = Zd = null;
          Lb = b;
          J = q;
        }
      } else {
        k = k || d;
        m = m || e;
        n = n || f;
        if (d !== z || k !== C) a.blendEquationSeparate(c.convert(d), c.convert(k)), z = d, C = k;
        if (e !== Zd || f !== Y || m !== D || n !== E) a.blendFuncSeparate(c.convert(e), c.convert(f), c.convert(m), c.convert(n)), Zd = e, Y = f, D = m, E = n;
        Lb = b;
        J = null;
      }
    }

    function m(b) {
      G !== b && (b ? a.frontFace(2304) : a.frontFace(2305), G = b);
    }

    function q(b) {
      0 !== b ? (g(2884), b !== Q && (1 === b ? a.cullFace(1029) : 2 === b ? a.cullFace(1028) : a.cullFace(1032))) : h(2884);
      Q = b;
    }

    function n(b, c, d) {
      if (b) {
        if (g(32823), I !== c || L !== d) a.polygonOffset(c, d), I = c, L = d;
      } else h(32823);
    }

    function r(b) {
      void 0 === b && (b = 33984 + R - 1);
      K !== b && (a.activeTexture(b), K = b);
    }

    var x = new function () {
      var b = !1,
          c = new Z(),
          d = null,
          e = new Z(0, 0, 0, 0);
      return {
        setMask: function setMask(c) {
          d === c || b || (a.colorMask(c, c, c, c), d = c);
        },
        setLocked: function setLocked(a) {
          b = a;
        },
        setClear: function setClear(b, d, f, g, h) {
          !0 === h && (b *= g, d *= g, f *= g);
          c.set(b, d, f, g);
          !1 === e.equals(c) && (a.clearColor(b, d, f, g), e.copy(c));
        },
        reset: function reset() {
          b = !1;
          d = null;
          e.set(-1, 0, 0, 0);
        }
      };
    }(),
        l = new function () {
      var b = !1,
          c = null,
          d = null,
          e = null;
      return {
        setTest: function setTest(a) {
          a ? g(2929) : h(2929);
        },
        setMask: function setMask(d) {
          c === d || b || (a.depthMask(d), c = d);
        },
        setFunc: function setFunc(b) {
          if (d !== b) {
            if (b) switch (b) {
              case 0:
                a.depthFunc(512);
                break;

              case 1:
                a.depthFunc(519);
                break;

              case 2:
                a.depthFunc(513);
                break;

              case 3:
                a.depthFunc(515);
                break;

              case 4:
                a.depthFunc(514);
                break;

              case 5:
                a.depthFunc(518);
                break;

              case 6:
                a.depthFunc(516);
                break;

              case 7:
                a.depthFunc(517);
                break;

              default:
                a.depthFunc(515);
            } else a.depthFunc(515);
            d = b;
          }
        },
        setLocked: function setLocked(a) {
          b = a;
        },
        setClear: function setClear(b) {
          e !== b && (a.clearDepth(b), e = b);
        },
        reset: function reset() {
          b = !1;
          e = d = c = null;
        }
      };
    }(),
        u = new function () {
      var b = !1,
          c = null,
          d = null,
          e = null,
          f = null,
          k = null,
          m = null,
          n = null,
          q = null;
      return {
        setTest: function setTest(a) {
          a ? g(2960) : h(2960);
        },
        setMask: function setMask(d) {
          c === d || b || (a.stencilMask(d), c = d);
        },
        setFunc: function setFunc(b, c, g) {
          if (d !== b || e !== c || f !== g) a.stencilFunc(b, c, g), d = b, e = c, f = g;
        },
        setOp: function setOp(b, c, d) {
          if (k !== b || m !== c || n !== d) a.stencilOp(b, c, d), k = b, m = c, n = d;
        },
        setLocked: function setLocked(a) {
          b = a;
        },
        setClear: function setClear(b) {
          q !== b && (a.clearStencil(b), q = b);
        },
        reset: function reset() {
          b = !1;
          q = n = m = k = f = e = d = c = null;
        }
      };
    }(),
        w = a.getParameter(34921),
        p = new Uint8Array(w),
        v = new Uint8Array(w),
        H = new Uint8Array(w),
        y = {},
        N = null,
        X = null,
        B = null,
        Lb = null,
        z = null,
        Zd = null,
        Y = null,
        C = null,
        D = null,
        E = null,
        J = !1,
        G = null,
        Q = null,
        P = null,
        I = null,
        L = null,
        R = a.getParameter(35661),
        F = !1;
    w = 0;
    w = a.getParameter(7938);
    -1 !== w.indexOf("WebGL") ? (w = parseFloat(/^WebGL ([0-9])/.exec(w)[1]), F = 1 <= w) : -1 !== w.indexOf("OpenGL ES") && (w = parseFloat(/^OpenGL ES ([0-9])/.exec(w)[1]), F = 2 <= w);
    var K = null,
        T = {},
        W = new Z(),
        M = new Z(),
        U = {};
    U[3553] = e(3553, 3553, 1);
    U[34067] = e(34067, 34069, 6);
    x.setClear(0, 0, 0, 1);
    l.setClear(1);
    u.setClear(0);
    g(2929);
    l.setFunc(3);
    m(!1);
    q(1);
    g(2884);
    k(0);
    return {
      buffers: {
        color: x,
        depth: l,
        stencil: u
      },
      initAttributes: function initAttributes() {
        for (var a = 0, b = p.length; a < b; a++) {
          p[a] = 0;
        }
      },
      enableAttribute: function enableAttribute(a) {
        f(a, 0);
      },
      enableAttributeAndDivisor: f,
      disableUnusedAttributes: function disableUnusedAttributes() {
        for (var b = 0, c = v.length; b !== c; ++b) {
          v[b] !== p[b] && (a.disableVertexAttribArray(b), v[b] = 0);
        }
      },
      enable: g,
      disable: h,
      getCompressedTextureFormats: function getCompressedTextureFormats() {
        if (null === N && (N = [], b.get("WEBGL_compressed_texture_pvrtc") || b.get("WEBGL_compressed_texture_s3tc") || b.get("WEBGL_compressed_texture_etc1") || b.get("WEBGL_compressed_texture_astc"))) for (var c = a.getParameter(34467), d = 0; d < c.length; d++) {
          N.push(c[d]);
        }
        return N;
      },
      useProgram: function useProgram(b) {
        return X !== b ? (a.useProgram(b), X = b, !0) : !1;
      },
      setBlending: k,
      setMaterial: function setMaterial(a, b) {
        2 === a.side ? h(2884) : g(2884);
        var c = 1 === a.side;
        b && (c = !c);
        m(c);
        1 === a.blending && !1 === a.transparent ? k(0) : k(a.blending, a.blendEquation, a.blendSrc, a.blendDst, a.blendEquationAlpha, a.blendSrcAlpha, a.blendDstAlpha, a.premultipliedAlpha);
        l.setFunc(a.depthFunc);
        l.setTest(a.depthTest);
        l.setMask(a.depthWrite);
        x.setMask(a.colorWrite);
        n(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits);
      },
      setFlipSided: m,
      setCullFace: q,
      setLineWidth: function setLineWidth(b) {
        b !== P && (F && a.lineWidth(b), P = b);
      },
      setPolygonOffset: n,
      setScissorTest: function setScissorTest(a) {
        a ? g(3089) : h(3089);
      },
      activeTexture: r,
      bindTexture: function bindTexture(b, c) {
        null === K && r();
        var d = T[K];
        void 0 === d && (d = {
          type: void 0,
          texture: void 0
        }, T[K] = d);
        if (d.type !== b || d.texture !== c) a.bindTexture(b, c || U[b]), d.type = b, d.texture = c;
      },
      compressedTexImage2D: function compressedTexImage2D() {
        try {
          a.compressedTexImage2D.apply(a, arguments);
        } catch (fa) {
          console.error("THREE.WebGLState:", fa);
        }
      },
      texImage2D: function texImage2D() {
        try {
          a.texImage2D.apply(a, arguments);
        } catch (fa) {
          console.error("THREE.WebGLState:", fa);
        }
      },
      texImage3D: function texImage3D() {
        try {
          a.texImage3D.apply(a, arguments);
        } catch (fa) {
          console.error("THREE.WebGLState:", fa);
        }
      },
      scissor: function scissor(b) {
        !1 === W.equals(b) && (a.scissor(b.x, b.y, b.z, b.w), W.copy(b));
      },
      viewport: function viewport(b) {
        !1 === M.equals(b) && (a.viewport(b.x, b.y, b.z, b.w), M.copy(b));
      },
      reset: function reset() {
        for (var b = 0; b < v.length; b++) {
          1 === v[b] && (a.disableVertexAttribArray(b), v[b] = 0);
        }

        y = {};
        K = N = null;
        T = {};
        Q = G = Lb = X = null;
        x.reset();
        l.reset();
        u.reset();
      }
    };
  }

  function Rg(a, b, c, d, e, f, g) {
    function h(a, b) {
      if (a.width > b || a.height > b) {
        if ("data" in a) {
          console.warn("THREE.WebGLRenderer: image in DataTexture is too big (" + a.width + "x" + a.height + ").");
          return;
        }

        b /= Math.max(a.width, a.height);
        var c = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
        c.width = Math.floor(a.width * b);
        c.height = Math.floor(a.height * b);
        c.getContext("2d").drawImage(a, 0, 0, a.width, a.height, 0, 0, c.width, c.height);
        console.warn("THREE.WebGLRenderer: image is too big (" + a.width + "x" + a.height + "). Resized to " + c.width + "x" + c.height);
        return c;
      }

      return a;
    }

    function k(a) {
      return R.isPowerOfTwo(a.width) && R.isPowerOfTwo(a.height);
    }

    function m(a, b) {
      return a.generateMipmaps && b && 1003 !== a.minFilter && 1006 !== a.minFilter;
    }

    function q(b, c, e, f) {
      a.generateMipmap(b);
      d.get(c).__maxMipLevel = Math.log(Math.max(e, f)) * Math.LOG2E;
    }

    function n(a, b) {
      if (!e.isWebGL2) return a;

      if (6403 === a) {
        if (5126 === b) return 33326;
        if (5131 === b) return 33325;
        if (5121 === b) return 33321;
      }

      if (6407 === a) {
        if (5126 === b) return 34837;
        if (5131 === b) return 34843;
        if (5121 === b) return 32849;
      }

      if (6408 === a) {
        if (5126 === b) return 34836;
        if (5131 === b) return 34842;
        if (5121 === b) return 32856;
      }

      return a;
    }

    function r(a) {
      return 1003 === a || 1004 === a || 1005 === a ? 9728 : 9729;
    }

    function x(b) {
      b = b.target;
      b.removeEventListener("dispose", x);

      a: {
        var c = d.get(b);
        if (b.image && c.__image__webglTextureCube) a.deleteTexture(c.__image__webglTextureCube);else {
          if (void 0 === c.__webglInit) break a;
          a.deleteTexture(c.__webglTexture);
        }
        d.remove(b);
      }

      b.isVideoTexture && delete y[b.id];
      g.memory.textures--;
    }

    function l(b) {
      b = b.target;
      b.removeEventListener("dispose", l);
      var c = d.get(b),
          e = d.get(b.texture);

      if (b) {
        void 0 !== e.__webglTexture && a.deleteTexture(e.__webglTexture);
        b.depthTexture && b.depthTexture.dispose();
        if (b.isWebGLRenderTargetCube) for (e = 0; 6 > e; e++) {
          a.deleteFramebuffer(c.__webglFramebuffer[e]), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer[e]);
        } else a.deleteFramebuffer(c.__webglFramebuffer), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer);
        d.remove(b.texture);
        d.remove(b);
      }

      g.memory.textures--;
    }

    function u(a, b) {
      var e = d.get(a);

      if (a.isVideoTexture) {
        var f = a.id,
            h = g.render.frame;
        y[f] !== h && (y[f] = h, a.update());
      }

      if (0 < a.version && e.__version !== a.version) if (f = a.image, void 0 === f) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if (!1 === f.complete) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else {
        A(e, a, b);
        return;
      }
      c.activeTexture(33984 + b);
      c.bindTexture(3553, e.__webglTexture);
    }

    function p(c, g, h) {
      h ? (a.texParameteri(c, 10242, f.convert(g.wrapS)), a.texParameteri(c, 10243, f.convert(g.wrapT)), a.texParameteri(c, 10240, f.convert(g.magFilter)), a.texParameteri(c, 10241, f.convert(g.minFilter))) : (a.texParameteri(c, 10242, 33071), a.texParameteri(c, 10243, 33071), 1001 === g.wrapS && 1001 === g.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), a.texParameteri(c, 10240, r(g.magFilter)), a.texParameteri(c, 10241, r(g.minFilter)), 1003 !== g.minFilter && 1006 !== g.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
      !(h = b.get("EXT_texture_filter_anisotropic")) || 1015 === g.type && null === b.get("OES_texture_float_linear") || 1016 === g.type && null === (e.isWebGL2 || b.get("OES_texture_half_float_linear")) || !(1 < g.anisotropy || d.get(g).__currentAnisotropy) || (a.texParameterf(c, h.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(g.anisotropy, e.getMaxAnisotropy())), d.get(g).__currentAnisotropy = g.anisotropy);
    }

    function A(b, d, r) {
      var l = d.isDataTexture3D ? 32879 : 3553;
      void 0 === b.__webglInit && (b.__webglInit = !0, d.addEventListener("dispose", x), b.__webglTexture = a.createTexture(), g.memory.textures++);
      c.activeTexture(33984 + r);
      c.bindTexture(l, b.__webglTexture);
      a.pixelStorei(37440, d.flipY);
      a.pixelStorei(37441, d.premultiplyAlpha);
      a.pixelStorei(3317, d.unpackAlignment);
      r = h(d.image, e.maxTextureSize);
      var t = e.isWebGL2 ? !1 : 1001 !== d.wrapS || 1001 !== d.wrapT || 1003 !== d.minFilter && 1006 !== d.minFilter;
      t && !1 === k(r) && (r instanceof HTMLImageElement || r instanceof HTMLCanvasElement || r instanceof ImageBitmap) && (void 0 === N && (N = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), N.width = R.floorPowerOfTwo(r.width), N.height = R.floorPowerOfTwo(r.height), N.getContext("2d").drawImage(r, 0, 0, N.width, N.height), console.warn("THREE.WebGLRenderer: image is not power of two (" + r.width + "x" + r.height + "). Resized to " + N.width + "x" + N.height), r = N);
      t = k(r);
      var u = f.convert(d.format),
          w = f.convert(d.type),
          v = n(u, w);
      p(l, d, t);
      var X = d.mipmaps;

      if (d.isDepthTexture) {
        v = 6402;

        if (1015 === d.type) {
          if (!e.isWebGL2) throw Error("Float Depth Texture only supported in WebGL2.0");
          v = 36012;
        } else e.isWebGL2 && (v = 33189);

        1026 === d.format && 6402 === v && 1012 !== d.type && 1014 !== d.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), d.type = 1012, w = f.convert(d.type));
        1027 === d.format && (v = 34041, 1020 !== d.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), d.type = 1020, w = f.convert(d.type)));
        c.texImage2D(3553, 0, v, r.width, r.height, 0, u, w, null);
      } else if (d.isDataTexture) {
        if (0 < X.length && t) {
          for (var B = 0, y = X.length; B < y; B++) {
            l = X[B], c.texImage2D(3553, B, v, l.width, l.height, 0, u, w, l.data);
          }

          d.generateMipmaps = !1;
          b.__maxMipLevel = X.length - 1;
        } else c.texImage2D(3553, 0, v, r.width, r.height, 0, u, w, r.data), b.__maxMipLevel = 0;
      } else if (d.isCompressedTexture) {
        B = 0;

        for (y = X.length; B < y; B++) {
          l = X[B], 1023 !== d.format && 1022 !== d.format ? -1 < c.getCompressedTextureFormats().indexOf(u) ? c.compressedTexImage2D(3553, B, v, l.width, l.height, 0, l.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : c.texImage2D(3553, B, v, l.width, l.height, 0, u, w, l.data);
        }

        b.__maxMipLevel = X.length - 1;
      } else if (d.isDataTexture3D) c.texImage3D(32879, 0, v, r.width, r.height, r.depth, 0, u, w, r.data), b.__maxMipLevel = 0;else if (0 < X.length && t) {
        B = 0;

        for (y = X.length; B < y; B++) {
          l = X[B], c.texImage2D(3553, B, v, u, w, l);
        }

        d.generateMipmaps = !1;
        b.__maxMipLevel = X.length - 1;
      } else c.texImage2D(3553, 0, v, u, w, r), b.__maxMipLevel = 0;

      m(d, t) && q(3553, d, r.width, r.height);
      b.__version = d.version;
      if (d.onUpdate) d.onUpdate(d);
    }

    function v(b, e, g, h) {
      var k = f.convert(e.texture.format),
          m = f.convert(e.texture.type),
          q = n(k, m);
      c.texImage2D(h, 0, q, e.width, e.height, 0, k, m, null);
      a.bindFramebuffer(36160, b);
      a.framebufferTexture2D(36160, g, h, d.get(e.texture).__webglTexture, 0);
      a.bindFramebuffer(36160, null);
    }

    function H(b, c) {
      a.bindRenderbuffer(36161, b);
      c.depthBuffer && !c.stencilBuffer ? (a.renderbufferStorage(36161, 33189, c.width, c.height), a.framebufferRenderbuffer(36160, 36096, 36161, b)) : c.depthBuffer && c.stencilBuffer ? (a.renderbufferStorage(36161, 34041, c.width, c.height), a.framebufferRenderbuffer(36160, 33306, 36161, b)) : a.renderbufferStorage(36161, 32854, c.width, c.height);
      a.bindRenderbuffer(36161, null);
    }

    var y = {},
        N;
    this.setTexture2D = u;

    this.setTexture3D = function (a, b) {
      var e = d.get(a);
      0 < a.version && e.__version !== a.version ? A(e, a, b) : (c.activeTexture(33984 + b), c.bindTexture(32879, e.__webglTexture));
    };

    this.setTextureCube = function (b, r) {
      var l = d.get(b);
      if (6 === b.image.length) if (0 < b.version && l.__version !== b.version) {
        l.__image__webglTextureCube || (b.addEventListener("dispose", x), l.__image__webglTextureCube = a.createTexture(), g.memory.textures++);
        c.activeTexture(33984 + r);
        c.bindTexture(34067, l.__image__webglTextureCube);
        a.pixelStorei(37440, b.flipY);
        r = b && b.isCompressedTexture;

        for (var t = b.image[0] && b.image[0].isDataTexture, u = [], w = 0; 6 > w; w++) {
          u[w] = r || t ? t ? b.image[w].image : b.image[w] : h(b.image[w], e.maxCubemapSize);
        }

        var v = u[0],
            X = k(v),
            B = f.convert(b.format),
            y = f.convert(b.type),
            H = n(B, y);
        p(34067, b, X);

        for (w = 0; 6 > w; w++) {
          if (r) for (var A, N = u[w].mipmaps, z = 0, C = N.length; z < C; z++) {
            A = N[z], 1023 !== b.format && 1022 !== b.format ? -1 < c.getCompressedTextureFormats().indexOf(B) ? c.compressedTexImage2D(34069 + w, z, H, A.width, A.height, 0, A.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : c.texImage2D(34069 + w, z, H, A.width, A.height, 0, B, y, A.data);
          } else t ? c.texImage2D(34069 + w, 0, H, u[w].width, u[w].height, 0, B, y, u[w].data) : c.texImage2D(34069 + w, 0, H, B, y, u[w]);
        }

        l.__maxMipLevel = r ? N.length - 1 : 0;
        m(b, X) && q(34067, b, v.width, v.height);
        l.__version = b.version;
        if (b.onUpdate) b.onUpdate(b);
      } else c.activeTexture(33984 + r), c.bindTexture(34067, l.__image__webglTextureCube);
    };

    this.setTextureCubeDynamic = function (a, b) {
      c.activeTexture(33984 + b);
      c.bindTexture(34067, d.get(a).__webglTexture);
    };

    this.setupRenderTarget = function (b) {
      var e = d.get(b),
          f = d.get(b.texture);
      b.addEventListener("dispose", l);
      f.__webglTexture = a.createTexture();
      g.memory.textures++;
      var h = !0 === b.isWebGLRenderTargetCube,
          n = k(b);

      if (h) {
        e.__webglFramebuffer = [];

        for (var r = 0; 6 > r; r++) {
          e.__webglFramebuffer[r] = a.createFramebuffer();
        }
      } else e.__webglFramebuffer = a.createFramebuffer();

      if (h) {
        c.bindTexture(34067, f.__webglTexture);
        p(34067, b.texture, n);

        for (r = 0; 6 > r; r++) {
          v(e.__webglFramebuffer[r], b, 36064, 34069 + r);
        }

        m(b.texture, n) && q(34067, b.texture, b.width, b.height);
        c.bindTexture(34067, null);
      } else c.bindTexture(3553, f.__webglTexture), p(3553, b.texture, n), v(e.__webglFramebuffer, b, 36064, 3553), m(b.texture, n) && q(3553, b.texture, b.width, b.height), c.bindTexture(3553, null);

      if (b.depthBuffer) {
        e = d.get(b);
        f = !0 === b.isWebGLRenderTargetCube;

        if (b.depthTexture) {
          if (f) throw Error("target.depthTexture not supported in Cube render targets");
          if (b && b.isWebGLRenderTargetCube) throw Error("Depth Texture with cube render targets is not supported");
          a.bindFramebuffer(36160, e.__webglFramebuffer);
          if (!b.depthTexture || !b.depthTexture.isDepthTexture) throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
          d.get(b.depthTexture).__webglTexture && b.depthTexture.image.width === b.width && b.depthTexture.image.height === b.height || (b.depthTexture.image.width = b.width, b.depthTexture.image.height = b.height, b.depthTexture.needsUpdate = !0);
          u(b.depthTexture, 0);
          e = d.get(b.depthTexture).__webglTexture;
          if (1026 === b.depthTexture.format) a.framebufferTexture2D(36160, 36096, 3553, e, 0);else if (1027 === b.depthTexture.format) a.framebufferTexture2D(36160, 33306, 3553, e, 0);else throw Error("Unknown depthTexture format");
        } else if (f) for (e.__webglDepthbuffer = [], f = 0; 6 > f; f++) {
          a.bindFramebuffer(36160, e.__webglFramebuffer[f]), e.__webglDepthbuffer[f] = a.createRenderbuffer(), H(e.__webglDepthbuffer[f], b);
        } else a.bindFramebuffer(36160, e.__webglFramebuffer), e.__webglDepthbuffer = a.createRenderbuffer(), H(e.__webglDepthbuffer, b);

        a.bindFramebuffer(36160, null);
      }
    };

    this.updateRenderTargetMipmap = function (a) {
      var b = a.texture,
          e = k(a);

      if (m(b, e)) {
        e = a.isWebGLRenderTargetCube ? 34067 : 3553;

        var f = d.get(b).__webglTexture;

        c.bindTexture(e, f);
        q(e, b, a.width, a.height);
        c.bindTexture(e, null);
      }
    };
  }

  function df(a, b, c) {
    return {
      convert: function convert(a) {
        if (1E3 === a) return 10497;
        if (1001 === a) return 33071;
        if (1002 === a) return 33648;
        if (1003 === a) return 9728;
        if (1004 === a) return 9984;
        if (1005 === a) return 9986;
        if (1006 === a) return 9729;
        if (1007 === a) return 9985;
        if (1008 === a) return 9987;
        if (1009 === a) return 5121;
        if (1017 === a) return 32819;
        if (1018 === a) return 32820;
        if (1019 === a) return 33635;
        if (1010 === a) return 5120;
        if (1011 === a) return 5122;
        if (1012 === a) return 5123;
        if (1013 === a) return 5124;
        if (1014 === a) return 5125;
        if (1015 === a) return 5126;

        if (1016 === a) {
          if (c.isWebGL2) return 5131;
          var d = b.get("OES_texture_half_float");
          if (null !== d) return d.HALF_FLOAT_OES;
        }

        if (1021 === a) return 6406;
        if (1022 === a) return 6407;
        if (1023 === a) return 6408;
        if (1024 === a) return 6409;
        if (1025 === a) return 6410;
        if (1026 === a) return 6402;
        if (1027 === a) return 34041;
        if (1028 === a) return 6403;
        if (100 === a) return 32774;
        if (101 === a) return 32778;
        if (102 === a) return 32779;
        if (200 === a) return 0;
        if (201 === a) return 1;
        if (202 === a) return 768;
        if (203 === a) return 769;
        if (204 === a) return 770;
        if (205 === a) return 771;
        if (206 === a) return 772;
        if (207 === a) return 773;
        if (208 === a) return 774;
        if (209 === a) return 775;
        if (210 === a) return 776;
        if (33776 === a || 33777 === a || 33778 === a || 33779 === a) if (d = b.get("WEBGL_compressed_texture_s3tc"), null !== d) {
          if (33776 === a) return d.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (33777 === a) return d.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (33778 === a) return d.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (33779 === a) return d.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        }
        if (35840 === a || 35841 === a || 35842 === a || 35843 === a) if (d = b.get("WEBGL_compressed_texture_pvrtc"), null !== d) {
          if (35840 === a) return d.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (35841 === a) return d.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (35842 === a) return d.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (35843 === a) return d.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        }
        if (36196 === a && (d = b.get("WEBGL_compressed_texture_etc1"), null !== d)) return d.COMPRESSED_RGB_ETC1_WEBGL;
        if (37808 === a || 37809 === a || 37810 === a || 37811 === a || 37812 === a || 37813 === a || 37814 === a || 37815 === a || 37816 === a || 37817 === a || 37818 === a || 37819 === a || 37820 === a || 37821 === a) if (d = b.get("WEBGL_compressed_texture_astc"), null !== d) return a;

        if (103 === a || 104 === a) {
          if (c.isWebGL2) {
            if (103 === a) return 32775;
            if (104 === a) return 32776;
          }

          d = b.get("EXT_blend_minmax");

          if (null !== d) {
            if (103 === a) return d.MIN_EXT;
            if (104 === a) return d.MAX_EXT;
          }
        }

        if (1020 === a) {
          if (c.isWebGL2) return 34042;
          d = b.get("WEBGL_depth_texture");
          if (null !== d) return d.UNSIGNED_INT_24_8_WEBGL;
        }

        return 0;
      }
    };
  }

  function Ob() {
    D.call(this);
    this.type = "Group";
  }

  function Ra() {
    D.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new P();
    this.projectionMatrix = new P();
    this.projectionMatrixInverse = new P();
  }

  function V(a, b, c, d) {
    Ra.call(this);
    this.type = "PerspectiveCamera";
    this.fov = void 0 !== a ? a : 50;
    this.zoom = 1;
    this.near = void 0 !== c ? c : .1;
    this.far = void 0 !== d ? d : 2E3;
    this.focus = 10;
    this.aspect = void 0 !== b ? b : 1;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }

  function Cc(a) {
    V.call(this);
    this.cameras = a || [];
  }

  function ef(a, b, c) {
    ff.setFromMatrixPosition(b.matrixWorld);
    gf.setFromMatrixPosition(c.matrixWorld);
    var d = ff.distanceTo(gf),
        e = b.projectionMatrix.elements,
        f = c.projectionMatrix.elements,
        g = e[14] / (e[10] - 1);
    c = e[14] / (e[10] + 1);
    var h = (e[9] + 1) / e[5],
        k = (e[9] - 1) / e[5],
        m = (e[8] - 1) / e[0],
        q = (f[8] + 1) / f[0];
    e = g * m;
    f = g * q;
    q = d / (-m + q);
    m = q * -m;
    b.matrixWorld.decompose(a.position, a.quaternion, a.scale);
    a.translateX(m);
    a.translateZ(q);
    a.matrixWorld.compose(a.position, a.quaternion, a.scale);
    a.matrixWorldInverse.getInverse(a.matrixWorld);
    b = g + q;
    g = c + q;
    a.projectionMatrix.makePerspective(e - m, f + (d - m), h * c / g * b, k * c / g * b, b, g);
  }

  function hf(a) {
    function b() {
      return null !== e && !0 === e.isPresenting;
    }

    function c() {
      if (b()) {
        var c = e.getEyeParameters("left"),
            f = c.renderWidth * q;
        c = c.renderHeight * q;
        H = a.getPixelRatio();
        v = a.getSize();
        a.setDrawingBufferSize(2 * f, c, 1);
        N.start();
      } else d.enabled && a.setDrawingBufferSize(v.width, v.height, H), N.stop();
    }

    var d = this,
        e = null,
        f = null,
        g = null,
        h = [],
        k = new P(),
        m = new P(),
        q = 1,
        n = "stage";
    "undefined" !== typeof window && "VRFrameData" in window && (f = new window.VRFrameData(), window.addEventListener("vrdisplaypresentchange", c, !1));
    var r = new P(),
        l = new ja(),
        t = new p(),
        u = new V();
    u.bounds = new Z(0, 0, .5, 1);
    u.layers.enable(1);
    var w = new V();
    w.bounds = new Z(.5, 0, .5, 1);
    w.layers.enable(2);
    var A = new Cc([u, w]);
    A.layers.enable(1);
    A.layers.enable(2);
    var v,
        H,
        y = [];
    this.enabled = !1;

    this.getController = function (a) {
      var b = h[a];
      void 0 === b && (b = new Ob(), b.matrixAutoUpdate = !1, b.visible = !1, h[a] = b);
      return b;
    };

    this.getDevice = function () {
      return e;
    };

    this.setDevice = function (a) {
      void 0 !== a && (e = a);
      N.setContext(a);
    };

    this.setFramebufferScaleFactor = function (a) {
      q = a;
    };

    this.setFrameOfReferenceType = function (a) {
      n = a;
    };

    this.setPoseTarget = function (a) {
      void 0 !== a && (g = a);
    };

    this.getCamera = function (a) {
      var b = "stage" === n ? 1.6 : 0;
      if (null === e) return a.position.set(0, b, 0), a;
      e.depthNear = a.near;
      e.depthFar = a.far;
      e.getFrameData(f);

      if ("stage" === n) {
        var c = e.stageParameters;
        c ? k.fromArray(c.sittingToStandingTransform) : k.makeTranslation(0, b, 0);
      }

      b = f.pose;
      c = null !== g ? g : a;
      c.matrix.copy(k);
      c.matrix.decompose(c.position, c.quaternion, c.scale);
      null !== b.orientation && (l.fromArray(b.orientation), c.quaternion.multiply(l));
      null !== b.position && (l.setFromRotationMatrix(k), t.fromArray(b.position), t.applyQuaternion(l), c.position.add(t));
      c.updateMatrixWorld();
      if (!1 === e.isPresenting) return a;
      u.near = a.near;
      w.near = a.near;
      u.far = a.far;
      w.far = a.far;
      u.matrixWorldInverse.fromArray(f.leftViewMatrix);
      w.matrixWorldInverse.fromArray(f.rightViewMatrix);
      m.getInverse(k);
      "stage" === n && (u.matrixWorldInverse.multiply(m), w.matrixWorldInverse.multiply(m));
      a = c.parent;
      null !== a && (r.getInverse(a.matrixWorld), u.matrixWorldInverse.multiply(r), w.matrixWorldInverse.multiply(r));
      u.matrixWorld.getInverse(u.matrixWorldInverse);
      w.matrixWorld.getInverse(w.matrixWorldInverse);
      u.projectionMatrix.fromArray(f.leftProjectionMatrix);
      w.projectionMatrix.fromArray(f.rightProjectionMatrix);
      ef(A, u, w);
      a = e.getLayers();
      a.length && (a = a[0], null !== a.leftBounds && 4 === a.leftBounds.length && u.bounds.fromArray(a.leftBounds), null !== a.rightBounds && 4 === a.rightBounds.length && w.bounds.fromArray(a.rightBounds));

      a: for (a = 0; a < h.length; a++) {
        b = h[a];

        b: {
          c = a;

          for (var d = navigator.getGamepads && navigator.getGamepads(), q = 0, x = 0, p = d.length; q < p; q++) {
            var v = d[q];

            if (v && ("Daydream Controller" === v.id || "Gear VR Controller" === v.id || "Oculus Go Controller" === v.id || "OpenVR Gamepad" === v.id || v.id.startsWith("Oculus Touch") || v.id.startsWith("Spatial Controller"))) {
              if (x === c) {
                c = v;
                break b;
              }

              x++;
            }
          }

          c = void 0;
        }

        if (void 0 !== c && void 0 !== c.pose) {
          if (null === c.pose) break a;
          d = c.pose;
          !1 === d.hasPosition && b.position.set(.2, -.6, -.05);
          null !== d.position && b.position.fromArray(d.position);
          null !== d.orientation && b.quaternion.fromArray(d.orientation);
          b.matrix.compose(b.position, b.quaternion, b.scale);
          b.matrix.premultiply(k);
          b.matrix.decompose(b.position, b.quaternion, b.scale);
          b.matrixWorldNeedsUpdate = !0;
          b.visible = !0;
          d = "Daydream Controller" === c.id ? 0 : 1;
          y[a] !== c.buttons[d].pressed && (y[a] = c.buttons[d].pressed, !0 === y[a] ? b.dispatchEvent({
            type: "selectstart"
          }) : (b.dispatchEvent({
            type: "selectend"
          }), b.dispatchEvent({
            type: "select"
          })));
        } else b.visible = !1;
      }

      return A;
    };

    this.getStandingMatrix = function () {
      return k;
    };

    this.isPresenting = b;
    var N = new Xd();

    this.setAnimationLoop = function (a) {
      N.setAnimationLoop(a);
    };

    this.submitFrame = function () {
      b() && e.submitFrame();
    };

    this.dispose = function () {
      "undefined" !== typeof window && window.removeEventListener("vrdisplaypresentchange", c);
    };
  }

  function Sg(a) {
    function b() {
      return null !== h && null !== m;
    }

    function c(a) {
      var b = r[l.indexOf(a.inputSource)];
      b && b.dispatchEvent({
        type: a.type
      });
    }

    function d() {
      a.setFramebuffer(null);
      v.stop();
    }

    function e(a, b) {
      null === b ? a.matrixWorld.copy(a.matrix) : a.matrixWorld.multiplyMatrices(b.matrixWorld, a.matrix);
      a.matrixWorldInverse.getInverse(a.matrixWorld);
    }

    var f = a.context,
        g = null,
        h = null,
        k = 1,
        m = null,
        q = "stage",
        n = null,
        r = [],
        l = [],
        t = new V();
    t.layers.enable(1);
    t.viewport = new Z();
    var u = new V();
    u.layers.enable(2);
    u.viewport = new Z();
    var w = new Cc([t, u]);
    w.layers.enable(1);
    w.layers.enable(2);
    this.enabled = !1;

    this.getController = function (a) {
      var b = r[a];
      void 0 === b && (b = new Ob(), b.matrixAutoUpdate = !1, b.visible = !1, r[a] = b);
      return b;
    };

    this.getDevice = function () {
      return g;
    };

    this.setDevice = function (a) {
      void 0 !== a && (g = a);
      a instanceof XRDevice && f.setCompatibleXRDevice(a);
    };

    this.setFramebufferScaleFactor = function (a) {
      k = a;
    };

    this.setFrameOfReferenceType = function (a) {
      q = a;
    };

    this.setSession = function (b) {
      h = b;
      null !== h && (h.addEventListener("select", c), h.addEventListener("selectstart", c), h.addEventListener("selectend", c), h.addEventListener("end", d), h.baseLayer = new XRWebGLLayer(h, f, {
        framebufferScaleFactor: k
      }), h.requestFrameOfReference(q).then(function (b) {
        m = b;
        a.setFramebuffer(h.baseLayer.framebuffer);
        v.setContext(h);
        v.start();
      }), l = h.getInputSources(), h.addEventListener("inputsourceschange", function () {
        l = h.getInputSources();
        console.log(l);

        for (var a = 0; a < r.length; a++) {
          r[a].userData.inputSource = l[a];
        }
      }));
    };

    this.getCamera = function (a) {
      if (b()) {
        var c = a.parent,
            d = w.cameras;
        e(w, c);

        for (var f = 0; f < d.length; f++) {
          e(d[f], c);
        }

        a.matrixWorld.copy(w.matrixWorld);
        a = a.children;
        f = 0;

        for (c = a.length; f < c; f++) {
          a[f].updateMatrixWorld(!0);
        }

        ef(w, t, u);
        return w;
      }

      return a;
    };

    this.isPresenting = b;
    var p = null,
        v = new Xd();
    v.setAnimationLoop(function (a, b) {
      n = b.getDevicePose(m);
      if (null !== n) for (var c = h.baseLayer, d = b.views, e = 0; e < d.length; e++) {
        var f = d[e],
            g = c.getViewport(f),
            k = n.getViewMatrix(f),
            q = w.cameras[e];
        q.matrix.fromArray(k).getInverse(q.matrix);
        q.projectionMatrix.fromArray(f.projectionMatrix);
        q.viewport.set(g.x, g.y, g.width, g.height);
        0 === e && w.matrix.copy(q.matrix);
      }

      for (e = 0; e < r.length; e++) {
        c = r[e];
        if (d = l[e]) if (d = b.getInputPose(d, m), null !== d) {
          "targetRay" in d ? c.matrix.elements = d.targetRay.transformMatrix : "pointerMatrix" in d && (c.matrix.elements = d.pointerMatrix);
          c.matrix.decompose(c.position, c.rotation, c.scale);
          c.visible = !0;
          continue;
        }
        c.visible = !1;
      }

      p && p(a);
    });

    this.setAnimationLoop = function (a) {
      p = a;
    };

    this.dispose = function () {};

    this.getStandingMatrix = function () {
      console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed.");
      return new THREE.Matrix4();
    };

    this.submitFrame = function () {};
  }

  function ce(a) {
    var b;

    function c() {
      la = new Uf(O);
      xa = new Sf(O, la, a);
      xa.isWebGL2 || (la.get("WEBGL_depth_texture"), la.get("OES_texture_float"), la.get("OES_texture_half_float"), la.get("OES_texture_half_float_linear"), la.get("OES_standard_derivatives"), la.get("OES_element_index_uint"), la.get("ANGLE_instanced_arrays"));
      la.get("OES_texture_float_linear");
      ia = new df(O, la, xa);
      ba = new Qg(O, la, ia, xa);
      ba.scissor(Bc.copy(ja).multiplyScalar(U));
      ba.viewport(S.copy(fa).multiplyScalar(U));
      da = new Xf(O);
      Da = new Hg();
      ha = new Rg(O, la, ba, Da, xa, ia, da);
      ra = new Lf(O);
      ua = new Vf(O, ra, da);
      oa = new $f(ua, da);
      ya = new Zf(O);
      na = new Gg(Y, la, xa);
      ta = new Lg();
      pa = new Pg();
      ma = new Qf(Y, ba, oa, z);
      Aa = new Rf(O, la, da, xa);
      Ba = new Wf(O, la, da, xa);
      da.programs = na.programs;
      Y.context = O;
      Y.capabilities = xa;
      Y.extensions = la;
      Y.properties = Da;
      Y.renderLists = ta;
      Y.state = ba;
      Y.info = da;
    }

    function d(a) {
      a.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      G = !0;
    }

    function e() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      G = !1;
      c();
    }

    function f(a) {
      a = a.target;
      a.removeEventListener("dispose", f);
      g(a);
      Da.remove(a);
    }

    function g(a) {
      var b = Da.get(a).program;
      a.program = void 0;
      void 0 !== b && na.releaseProgram(b);
    }

    function h(a, b) {
      a.render(function (a) {
        Y.renderBufferImmediate(a, b);
      });
    }

    function k(a, b, c) {
      if (!1 !== a.visible) {
        if (a.layers.test(b.layers)) if (a.isLight) E.pushLight(a), a.castShadow && E.pushShadow(a);else if (a.isSprite) {
          if (!a.frustumCulled || qa.intersectsSprite(a)) {
            c && gb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ac);
            var d = oa.update(a),
                e = a.material;
            D.push(a, d, e, gb.z, null);
          }
        } else if (a.isImmediateRenderObject) c && gb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ac), D.push(a, null, a.material, gb.z, null);else if (a.isMesh || a.isLine || a.isPoints) if (a.isSkinnedMesh && a.skeleton.update(), !a.frustumCulled || qa.intersectsObject(a)) if (c && gb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ac), d = oa.update(a), e = a.material, Array.isArray(e)) for (var f = d.groups, g = 0, h = f.length; g < h; g++) {
          var m = f[g],
              n = e[m.materialIndex];
          n && n.visible && D.push(a, d, n, gb.z, m);
        } else e.visible && D.push(a, d, e, gb.z, null);
        a = a.children;
        g = 0;

        for (h = a.length; g < h; g++) {
          k(a[g], b, c);
        }
      }
    }

    function m(a, b, c, d) {
      for (var e = 0, f = a.length; e < f; e++) {
        var g = a[e],
            h = g.object,
            k = g.geometry,
            m = void 0 === d ? g.material : d;
        g = g.group;

        if (c.isArrayCamera) {
          W = c;

          for (var n = c.cameras, r = 0, l = n.length; r < l; r++) {
            var x = n[r];

            if (h.layers.test(x.layers)) {
              if ("viewport" in x) ba.viewport(S.copy(x.viewport));else {
                var t = x.bounds;
                ba.viewport(S.set(t.x * V, t.y * M, t.z * V, t.w * M).multiplyScalar(U));
              }
              E.setupLights(x);
              q(h, b, x, k, m, g);
            }
          }
        } else W = null, q(h, b, c, k, m, g);
      }
    }

    function q(a, c, d, e, f, g) {
      a.onBeforeRender(Y, c, d, e, f, g);
      E = pa.get(c, W || d);
      a.modelViewMatrix.multiplyMatrices(d.matrixWorldInverse, a.matrixWorld);
      a.normalMatrix.getNormalMatrix(a.modelViewMatrix);

      if (a.isImmediateRenderObject) {
        ba.setMaterial(f);
        var k = r(d, c.fog, f, a);
        K = b = null;
        sd = !1;
        h(a, k);
      } else Y.renderBufferDirect(d, c.fog, e, f, a, g);

      a.onAfterRender(Y, c, d, e, f, g);
      E = pa.get(c, W || d);
    }

    function n(a, b, c) {
      var d = Da.get(a),
          e = E.state.lights,
          h = d.lightsHash,
          k = e.state.hash;
      c = na.getParameters(a, e.state, E.state.shadowsArray, b, aa.numPlanes, aa.numIntersection, c);
      var m = na.getProgramCode(a, c),
          n = d.program,
          q = !0;
      if (void 0 === n) a.addEventListener("dispose", f);else if (n.code !== m) g(a);else {
        if (h.stateID !== k.stateID || h.directionalLength !== k.directionalLength || h.pointLength !== k.pointLength || h.spotLength !== k.spotLength || h.rectAreaLength !== k.rectAreaLength || h.hemiLength !== k.hemiLength || h.shadowsLength !== k.shadowsLength) h.stateID = k.stateID, h.directionalLength = k.directionalLength, h.pointLength = k.pointLength, h.spotLength = k.spotLength, h.rectAreaLength = k.rectAreaLength, h.hemiLength = k.hemiLength, h.shadowsLength = k.shadowsLength;else if (void 0 !== c.shaderID) return;
        q = !1;
      }
      q && (c.shaderID ? (m = Qa[c.shaderID], d.shader = {
        name: a.type,
        uniforms: va.clone(m.uniforms),
        vertexShader: m.vertexShader,
        fragmentShader: m.fragmentShader
      }) : d.shader = {
        name: a.type,
        uniforms: a.uniforms,
        vertexShader: a.vertexShader,
        fragmentShader: a.fragmentShader
      }, a.onBeforeCompile(d.shader, Y), m = na.getProgramCode(a, c), n = na.acquireProgram(a, d.shader, c, m), d.program = n, a.program = n);
      c = n.getAttributes();
      if (a.morphTargets) for (m = a.numSupportedMorphTargets = 0; m < Y.maxMorphTargets; m++) {
        0 <= c["morphTarget" + m] && a.numSupportedMorphTargets++;
      }
      if (a.morphNormals) for (m = a.numSupportedMorphNormals = 0; m < Y.maxMorphNormals; m++) {
        0 <= c["morphNormal" + m] && a.numSupportedMorphNormals++;
      }
      c = d.shader.uniforms;
      if (!a.isShaderMaterial && !a.isRawShaderMaterial || !0 === a.clipping) d.numClippingPlanes = aa.numPlanes, d.numIntersection = aa.numIntersection, c.clippingPlanes = aa.uniform;
      d.fog = b;
      void 0 === h && (d.lightsHash = h = {});
      h.stateID = k.stateID;
      h.directionalLength = k.directionalLength;
      h.pointLength = k.pointLength;
      h.spotLength = k.spotLength;
      h.rectAreaLength = k.rectAreaLength;
      h.hemiLength = k.hemiLength;
      h.shadowsLength = k.shadowsLength;
      a.lights && (c.ambientLightColor.value = e.state.ambient, c.directionalLights.value = e.state.directional, c.spotLights.value = e.state.spot, c.rectAreaLights.value = e.state.rectArea, c.pointLights.value = e.state.point, c.hemisphereLights.value = e.state.hemi, c.directionalShadowMap.value = e.state.directionalShadowMap, c.directionalShadowMatrix.value = e.state.directionalShadowMatrix, c.spotShadowMap.value = e.state.spotShadowMap, c.spotShadowMatrix.value = e.state.spotShadowMatrix, c.pointShadowMap.value = e.state.pointShadowMap, c.pointShadowMatrix.value = e.state.pointShadowMatrix);
      a = d.program.getUniforms();
      a = db.seqWithValue(a.seq, c);
      d.uniformsList = a;
    }

    function r(a, b, c, d) {
      ca = 0;
      var e = Da.get(c),
          f = e.lightsHash,
          g = E.state.lights.state.hash;
      ud && (be || a !== T) && aa.setState(c.clippingPlanes, c.clipIntersection, c.clipShadows, a, e, a === T && c.id === F);
      !1 === c.needsUpdate && (void 0 === e.program ? c.needsUpdate = !0 : c.fog && e.fog !== b ? c.needsUpdate = !0 : !c.lights || f.stateID === g.stateID && f.directionalLength === g.directionalLength && f.pointLength === g.pointLength && f.spotLength === g.spotLength && f.rectAreaLength === g.rectAreaLength && f.hemiLength === g.hemiLength && f.shadowsLength === g.shadowsLength ? void 0 === e.numClippingPlanes || e.numClippingPlanes === aa.numPlanes && e.numIntersection === aa.numIntersection || (c.needsUpdate = !0) : c.needsUpdate = !0);
      c.needsUpdate && (n(c, b, d), c.needsUpdate = !1);
      var h = !1,
          k = !1,
          m = !1;
      f = e.program;
      g = f.getUniforms();
      var q = e.shader.uniforms;
      ba.useProgram(f.program) && (m = k = h = !0);
      c.id !== F && (F = c.id, k = !0);

      if (h || T !== a) {
        g.setValue(O, "projectionMatrix", a.projectionMatrix);
        xa.logarithmicDepthBuffer && g.setValue(O, "logDepthBufFC", 2 / (Math.log(a.far + 1) / Math.LN2));
        T !== a && (T = a, m = k = !0);
        if (c.isShaderMaterial || c.isMeshPhongMaterial || c.isMeshStandardMaterial || c.envMap) h = g.map.cameraPosition, void 0 !== h && h.setValue(O, gb.setFromMatrixPosition(a.matrixWorld));
        (c.isMeshPhongMaterial || c.isMeshLambertMaterial || c.isMeshBasicMaterial || c.isMeshStandardMaterial || c.isShaderMaterial || c.skinning) && g.setValue(O, "viewMatrix", a.matrixWorldInverse);
      }

      if (c.skinning && (g.setOptional(O, d, "bindMatrix"), g.setOptional(O, d, "bindMatrixInverse"), a = d.skeleton)) if (h = a.bones, xa.floatVertexTextures) {
        if (void 0 === a.boneTexture) {
          h = Math.sqrt(4 * h.length);
          h = R.ceilPowerOfTwo(h);
          h = Math.max(h, 4);
          var r = new Float32Array(h * h * 4);
          r.set(a.boneMatrices);
          var x = new lb(r, h, h, 1023, 1015);
          x.needsUpdate = !0;
          a.boneMatrices = r;
          a.boneTexture = x;
          a.boneTextureSize = h;
        }

        g.setValue(O, "boneTexture", a.boneTexture);
        g.setValue(O, "boneTextureSize", a.boneTextureSize);
      } else g.setOptional(O, a, "boneMatrices");
      k && (g.setValue(O, "toneMappingExposure", Y.toneMappingExposure), g.setValue(O, "toneMappingWhitePoint", Y.toneMappingWhitePoint), c.lights && (k = m, q.ambientLightColor.needsUpdate = k, q.directionalLights.needsUpdate = k, q.pointLights.needsUpdate = k, q.spotLights.needsUpdate = k, q.rectAreaLights.needsUpdate = k, q.hemisphereLights.needsUpdate = k), b && c.fog && (q.fogColor.value = b.color, b.isFog ? (q.fogNear.value = b.near, q.fogFar.value = b.far) : b.isFogExp2 && (q.fogDensity.value = b.density)), c.isMeshBasicMaterial ? l(q, c) : c.isMeshLambertMaterial ? (l(q, c), c.emissiveMap && (q.emissiveMap.value = c.emissiveMap)) : c.isMeshPhongMaterial ? (l(q, c), c.isMeshToonMaterial ? (t(q, c), c.gradientMap && (q.gradientMap.value = c.gradientMap)) : t(q, c)) : c.isMeshStandardMaterial ? (l(q, c), c.isMeshPhysicalMaterial ? (u(q, c), q.reflectivity.value = c.reflectivity, q.clearCoat.value = c.clearCoat, q.clearCoatRoughness.value = c.clearCoatRoughness) : u(q, c)) : c.isMeshMatcapMaterial ? (l(q, c), c.matcap && (q.matcap.value = c.matcap), c.bumpMap && (q.bumpMap.value = c.bumpMap, q.bumpScale.value = c.bumpScale, 1 === c.side && (q.bumpScale.value *= -1)), c.normalMap && (q.normalMap.value = c.normalMap, q.normalScale.value.copy(c.normalScale), 1 === c.side && q.normalScale.value.negate()), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias)) : c.isMeshDepthMaterial ? (l(q, c), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias)) : c.isMeshDistanceMaterial ? (l(q, c), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias), q.referencePosition.value.copy(c.referencePosition), q.nearDistance.value = c.nearDistance, q.farDistance.value = c.farDistance) : c.isMeshNormalMaterial ? (l(q, c), c.bumpMap && (q.bumpMap.value = c.bumpMap, q.bumpScale.value = c.bumpScale, 1 === c.side && (q.bumpScale.value *= -1)), c.normalMap && (q.normalMap.value = c.normalMap, q.normalScale.value.copy(c.normalScale), 1 === c.side && q.normalScale.value.negate()), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias)) : c.isLineBasicMaterial ? (q.diffuse.value = c.color, q.opacity.value = c.opacity, c.isLineDashedMaterial && (q.dashSize.value = c.dashSize, q.totalSize.value = c.dashSize + c.gapSize, q.scale.value = c.scale)) : c.isPointsMaterial ? (q.diffuse.value = c.color, q.opacity.value = c.opacity, q.size.value = c.size * U, q.scale.value = .5 * M, q.map.value = c.map, null !== c.map && (!0 === c.map.matrixAutoUpdate && c.map.updateMatrix(), q.uvTransform.value.copy(c.map.matrix))) : c.isSpriteMaterial ? (q.diffuse.value = c.color, q.opacity.value = c.opacity, q.rotation.value = c.rotation, q.map.value = c.map, null !== c.map && (!0 === c.map.matrixAutoUpdate && c.map.updateMatrix(), q.uvTransform.value.copy(c.map.matrix))) : c.isShadowMaterial && (q.color.value = c.color, q.opacity.value = c.opacity), void 0 !== q.ltc_1 && (q.ltc_1.value = J.LTC_1), void 0 !== q.ltc_2 && (q.ltc_2.value = J.LTC_2), db.upload(O, e.uniformsList, q, Y));
      c.isShaderMaterial && !0 === c.uniformsNeedUpdate && (db.upload(O, e.uniformsList, q, Y), c.uniformsNeedUpdate = !1);
      c.isSpriteMaterial && g.setValue(O, "center", d.center);
      g.setValue(O, "modelViewMatrix", d.modelViewMatrix);
      g.setValue(O, "normalMatrix", d.normalMatrix);
      g.setValue(O, "modelMatrix", d.matrixWorld);
      return f;
    }

    function l(a, b) {
      a.opacity.value = b.opacity;
      b.color && (a.diffuse.value = b.color);
      b.emissive && a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity);
      b.map && (a.map.value = b.map);
      b.alphaMap && (a.alphaMap.value = b.alphaMap);
      b.specularMap && (a.specularMap.value = b.specularMap);
      b.envMap && (a.envMap.value = b.envMap, a.flipEnvMap.value = b.envMap && b.envMap.isCubeTexture ? -1 : 1, a.reflectivity.value = b.reflectivity, a.refractionRatio.value = b.refractionRatio, a.maxMipLevel.value = Da.get(b.envMap).__maxMipLevel);
      b.lightMap && (a.lightMap.value = b.lightMap, a.lightMapIntensity.value = b.lightMapIntensity);
      b.aoMap && (a.aoMap.value = b.aoMap, a.aoMapIntensity.value = b.aoMapIntensity);
      if (b.map) var c = b.map;else b.specularMap ? c = b.specularMap : b.displacementMap ? c = b.displacementMap : b.normalMap ? c = b.normalMap : b.bumpMap ? c = b.bumpMap : b.roughnessMap ? c = b.roughnessMap : b.metalnessMap ? c = b.metalnessMap : b.alphaMap ? c = b.alphaMap : b.emissiveMap && (c = b.emissiveMap);
      void 0 !== c && (c.isWebGLRenderTarget && (c = c.texture), !0 === c.matrixAutoUpdate && c.updateMatrix(), a.uvTransform.value.copy(c.matrix));
    }

    function t(a, b) {
      a.specular.value = b.specular;
      a.shininess.value = Math.max(b.shininess, 1E-4);
      b.emissiveMap && (a.emissiveMap.value = b.emissiveMap);
      b.bumpMap && (a.bumpMap.value = b.bumpMap, a.bumpScale.value = b.bumpScale, 1 === b.side && (a.bumpScale.value *= -1));
      b.normalMap && (a.normalMap.value = b.normalMap, a.normalScale.value.copy(b.normalScale), 1 === b.side && a.normalScale.value.negate());
      b.displacementMap && (a.displacementMap.value = b.displacementMap, a.displacementScale.value = b.displacementScale, a.displacementBias.value = b.displacementBias);
    }

    function u(a, b) {
      a.roughness.value = b.roughness;
      a.metalness.value = b.metalness;
      b.roughnessMap && (a.roughnessMap.value = b.roughnessMap);
      b.metalnessMap && (a.metalnessMap.value = b.metalnessMap);
      b.emissiveMap && (a.emissiveMap.value = b.emissiveMap);
      b.bumpMap && (a.bumpMap.value = b.bumpMap, a.bumpScale.value = b.bumpScale, 1 === b.side && (a.bumpScale.value *= -1));
      b.normalMap && (a.normalMap.value = b.normalMap, a.normalScale.value.copy(b.normalScale), 1 === b.side && a.normalScale.value.negate());
      b.displacementMap && (a.displacementMap.value = b.displacementMap, a.displacementScale.value = b.displacementScale, a.displacementBias.value = b.displacementBias);
      b.envMap && (a.envMapIntensity.value = b.envMapIntensity);
    }

    console.log("THREE.WebGLRenderer", "98");
    a = a || {};
    var w = void 0 !== a.canvas ? a.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
        A = void 0 !== a.context ? a.context : null,
        v = void 0 !== a.alpha ? a.alpha : !1,
        H = void 0 !== a.depth ? a.depth : !0,
        y = void 0 !== a.stencil ? a.stencil : !0,
        N = void 0 !== a.antialias ? a.antialias : !1,
        z = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0,
        B = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1,
        C = void 0 !== a.powerPreference ? a.powerPreference : "default",
        D = null,
        E = null;
    this.domElement = w;
    this.context = null;
    this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
    this.clippingPlanes = [];
    this.localClippingEnabled = !1;
    this.gammaFactor = 2;
    this.physicallyCorrectLights = this.gammaOutput = this.gammaInput = !1;
    this.toneMappingWhitePoint = this.toneMappingExposure = this.toneMapping = 1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    var Y = this,
        G = !1,
        Q = null,
        I = null,
        L = null,
        F = -1;
    var K = b = null;
    var sd = !1;
    var T = null,
        W = null,
        S = new Z(),
        Bc = new Z(),
        ea = null,
        ca = 0,
        V = w.width,
        M = w.height,
        U = 1,
        fa = new Z(0, 0, V, M),
        ja = new Z(0, 0, V, M),
        sa = !1,
        qa = new rd(),
        aa = new Tf(),
        ud = !1,
        be = !1,
        Ac = new P(),
        gb = new p();

    try {
      v = {
        alpha: v,
        depth: H,
        stencil: y,
        antialias: N,
        premultipliedAlpha: z,
        preserveDrawingBuffer: B,
        powerPreference: C
      };
      w.addEventListener("webglcontextlost", d, !1);
      w.addEventListener("webglcontextrestored", e, !1);
      var O = A || w.getContext("webgl", v) || w.getContext("experimental-webgl", v);

      if (null === O) {
        if (null !== w.getContext("webgl")) throw Error("Error creating WebGL context with your selected attributes.");
        throw Error("Error creating WebGL context.");
      }

      void 0 === O.getShaderPrecisionFormat && (O.getShaderPrecisionFormat = function () {
        return {
          rangeMin: 1,
          rangeMax: 1,
          precision: 1
        };
      });
    } catch (Tg) {
      console.error("THREE.WebGLRenderer: " + Tg.message);
    }

    var la, xa, ba, da, Da, ha, ra, ua, oa, na, ta, pa, ma, ya, Aa, Ba, ia;
    c();
    var ka = null;
    "undefined" !== typeof navigator && (ka = "xr" in navigator ? new Sg(Y) : new hf(Y));
    this.vr = ka;
    var Ca = new cf(Y, oa, xa.maxTextureSize);
    this.shadowMap = Ca;

    this.getContext = function () {
      return O;
    };

    this.getContextAttributes = function () {
      return O.getContextAttributes();
    };

    this.forceContextLoss = function () {
      var a = la.get("WEBGL_lose_context");
      a && a.loseContext();
    };

    this.forceContextRestore = function () {
      var a = la.get("WEBGL_lose_context");
      a && a.restoreContext();
    };

    this.getPixelRatio = function () {
      return U;
    };

    this.setPixelRatio = function (a) {
      void 0 !== a && (U = a, this.setSize(V, M, !1));
    };

    this.getSize = function () {
      return {
        width: V,
        height: M
      };
    };

    this.setSize = function (a, b, c) {
      ka.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (V = a, M = b, w.width = a * U, w.height = b * U, !1 !== c && (w.style.width = a + "px", w.style.height = b + "px"), this.setViewport(0, 0, a, b));
    };

    this.getDrawingBufferSize = function () {
      return {
        width: V * U,
        height: M * U
      };
    };

    this.setDrawingBufferSize = function (a, b, c) {
      V = a;
      M = b;
      U = c;
      w.width = a * c;
      w.height = b * c;
      this.setViewport(0, 0, a, b);
    };

    this.getCurrentViewport = function () {
      return S;
    };

    this.setViewport = function (a, b, c, d) {
      fa.set(a, M - b - d, c, d);
      ba.viewport(S.copy(fa).multiplyScalar(U));
    };

    this.setScissor = function (a, b, c, d) {
      ja.set(a, M - b - d, c, d);
      ba.scissor(Bc.copy(ja).multiplyScalar(U));
    };

    this.setScissorTest = function (a) {
      ba.setScissorTest(sa = a);
    };

    this.getClearColor = function () {
      return ma.getClearColor();
    };

    this.setClearColor = function () {
      ma.setClearColor.apply(ma, arguments);
    };

    this.getClearAlpha = function () {
      return ma.getClearAlpha();
    };

    this.setClearAlpha = function () {
      ma.setClearAlpha.apply(ma, arguments);
    };

    this.clear = function (a, b, c) {
      var d = 0;
      if (void 0 === a || a) d |= 16384;
      if (void 0 === b || b) d |= 256;
      if (void 0 === c || c) d |= 1024;
      O.clear(d);
    };

    this.clearColor = function () {
      this.clear(!0, !1, !1);
    };

    this.clearDepth = function () {
      this.clear(!1, !0, !1);
    };

    this.clearStencil = function () {
      this.clear(!1, !1, !0);
    };

    this.dispose = function () {
      w.removeEventListener("webglcontextlost", d, !1);
      w.removeEventListener("webglcontextrestored", e, !1);
      ta.dispose();
      pa.dispose();
      Da.dispose();
      oa.dispose();
      ka.dispose();
      wa.stop();
    };

    this.renderBufferImmediate = function (a, b) {
      ba.initAttributes();
      var c = Da.get(a);
      a.hasPositions && !c.position && (c.position = O.createBuffer());
      a.hasNormals && !c.normal && (c.normal = O.createBuffer());
      a.hasUvs && !c.uv && (c.uv = O.createBuffer());
      a.hasColors && !c.color && (c.color = O.createBuffer());
      b = b.getAttributes();
      a.hasPositions && (O.bindBuffer(34962, c.position), O.bufferData(34962, a.positionArray, 35048), ba.enableAttribute(b.position), O.vertexAttribPointer(b.position, 3, 5126, !1, 0, 0));
      a.hasNormals && (O.bindBuffer(34962, c.normal), O.bufferData(34962, a.normalArray, 35048), ba.enableAttribute(b.normal), O.vertexAttribPointer(b.normal, 3, 5126, !1, 0, 0));
      a.hasUvs && (O.bindBuffer(34962, c.uv), O.bufferData(34962, a.uvArray, 35048), ba.enableAttribute(b.uv), O.vertexAttribPointer(b.uv, 2, 5126, !1, 0, 0));
      a.hasColors && (O.bindBuffer(34962, c.color), O.bufferData(34962, a.colorArray, 35048), ba.enableAttribute(b.color), O.vertexAttribPointer(b.color, 3, 5126, !1, 0, 0));
      ba.disableUnusedAttributes();
      O.drawArrays(4, 0, a.count);
      a.count = 0;
    };

    this.renderBufferDirect = function (a, c, d, e, f, g) {
      var h = f.isMesh && 0 > f.normalMatrix.determinant();
      ba.setMaterial(e, h);
      var k = r(a, c, e, f),
          m = !1;
      if (b !== d.id || K !== k.id || sd !== (!0 === e.wireframe)) b = d.id, K = k.id, sd = !0 === e.wireframe, m = !0;
      f.morphTargetInfluences && (ya.update(f, d, e, k), m = !0);
      h = d.index;
      var q = d.attributes.position;
      c = 1;
      !0 === e.wireframe && (h = ua.getWireframeAttribute(d), c = 2);
      a = Aa;

      if (null !== h) {
        var n = ra.get(h);
        a = Ba;
        a.setIndex(n);
      }

      if (m) {
        if (d && d.isInstancedBufferGeometry & !xa.isWebGL2 && null === la.get("ANGLE_instanced_arrays")) console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else {
          ba.initAttributes();
          m = d.attributes;
          k = k.getAttributes();
          var l = e.defaultAttributeValues;

          for (B in k) {
            var x = k[B];

            if (0 <= x) {
              var t = m[B];

              if (void 0 !== t) {
                var u = t.normalized,
                    w = t.itemSize,
                    p = ra.get(t);

                if (void 0 !== p) {
                  var v = p.buffer,
                      A = p.type;
                  p = p.bytesPerElement;

                  if (t.isInterleavedBufferAttribute) {
                    var y = t.data,
                        H = y.stride;
                    t = t.offset;
                    y && y.isInstancedInterleavedBuffer ? (ba.enableAttributeAndDivisor(x, y.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = y.meshPerAttribute * y.count)) : ba.enableAttribute(x);
                    O.bindBuffer(34962, v);
                    O.vertexAttribPointer(x, w, A, u, H * p, t * p);
                  } else t.isInstancedBufferAttribute ? (ba.enableAttributeAndDivisor(x, t.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = t.meshPerAttribute * t.count)) : ba.enableAttribute(x), O.bindBuffer(34962, v), O.vertexAttribPointer(x, w, A, u, 0, 0);
                }
              } else if (void 0 !== l && (u = l[B], void 0 !== u)) switch (u.length) {
                case 2:
                  O.vertexAttrib2fv(x, u);
                  break;

                case 3:
                  O.vertexAttrib3fv(x, u);
                  break;

                case 4:
                  O.vertexAttrib4fv(x, u);
                  break;

                default:
                  O.vertexAttrib1fv(x, u);
              }
            }
          }

          ba.disableUnusedAttributes();
        }
        null !== h && O.bindBuffer(34963, n.buffer);
      }

      n = Infinity;
      null !== h ? n = h.count : void 0 !== q && (n = q.count);
      h = d.drawRange.start * c;
      q = null !== g ? g.start * c : 0;
      var B = Math.max(h, q);
      g = Math.max(0, Math.min(n, h + d.drawRange.count * c, q + (null !== g ? g.count * c : Infinity)) - 1 - B + 1);

      if (0 !== g) {
        if (f.isMesh) {
          if (!0 === e.wireframe) ba.setLineWidth(e.wireframeLinewidth * (null === I ? U : 1)), a.setMode(1);else switch (f.drawMode) {
            case 0:
              a.setMode(4);
              break;

            case 1:
              a.setMode(5);
              break;

            case 2:
              a.setMode(6);
          }
        } else f.isLine ? (e = e.linewidth, void 0 === e && (e = 1), ba.setLineWidth(e * (null === I ? U : 1)), f.isLineSegments ? a.setMode(1) : f.isLineLoop ? a.setMode(2) : a.setMode(3)) : f.isPoints ? a.setMode(0) : f.isSprite && a.setMode(4);
        d && d.isInstancedBufferGeometry ? 0 < d.maxInstancedCount && a.renderInstances(d, B, g) : a.render(B, g);
      }
    };

    this.compile = function (a, b) {
      E = pa.get(a, b);
      E.init();
      a.traverse(function (a) {
        a.isLight && (E.pushLight(a), a.castShadow && E.pushShadow(a));
      });
      E.setupLights(b);
      a.traverse(function (b) {
        if (b.material) if (Array.isArray(b.material)) for (var c = 0; c < b.material.length; c++) {
          n(b.material[c], a.fog, b);
        } else n(b.material, a.fog, b);
      });
    };

    var za = null,
        wa = new Xd();
    wa.setAnimationLoop(function (a) {
      ka.isPresenting() || za && za(a);
    });
    "undefined" !== typeof window && wa.setContext(window);

    this.setAnimationLoop = function (a) {
      za = a;
      ka.setAnimationLoop(a);
      wa.start();
    };

    this.render = function (a, c, d, e) {
      if (!c || !c.isCamera) console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else if (!G) {
        K = b = null;
        sd = !1;
        F = -1;
        T = null;
        !0 === a.autoUpdate && a.updateMatrixWorld();
        null === c.parent && c.updateMatrixWorld();
        ka.enabled && (c = ka.getCamera(c));
        E = pa.get(a, c);
        E.init();
        a.onBeforeRender(Y, a, c, d);
        Ac.multiplyMatrices(c.projectionMatrix, c.matrixWorldInverse);
        qa.setFromMatrix(Ac);
        be = this.localClippingEnabled;
        ud = aa.init(this.clippingPlanes, be, c);
        D = ta.get(a, c);
        D.init();
        k(a, c, Y.sortObjects);
        !0 === Y.sortObjects && D.sort();
        ud && aa.beginShadows();
        Ca.render(E.state.shadowsArray, a, c);
        E.setupLights(c);
        ud && aa.endShadows();
        this.info.autoReset && this.info.reset();
        void 0 === d && (d = null);
        this.setRenderTarget(d);
        ma.render(D, a, c, e);
        e = D.opaque;
        var f = D.transparent;

        if (a.overrideMaterial) {
          var g = a.overrideMaterial;
          e.length && m(e, a, c, g);
          f.length && m(f, a, c, g);
        } else e.length && m(e, a, c), f.length && m(f, a, c);

        d && ha.updateRenderTargetMipmap(d);
        ba.buffers.depth.setTest(!0);
        ba.buffers.depth.setMask(!0);
        ba.buffers.color.setMask(!0);
        ba.setPolygonOffset(!1);
        a.onAfterRender(Y, a, c);
        ka.enabled && ka.submitFrame();
        E = D = null;
      }
    };

    this.allocTextureUnit = function () {
      var a = ca;
      a >= xa.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + a + " texture units while this GPU supports only " + xa.maxTextures);
      ca += 1;
      return a;
    };

    this.setTexture2D = function () {
      var a = !1;
      return function (b, c) {
        b && b.isWebGLRenderTarget && (a || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), a = !0), b = b.texture);
        ha.setTexture2D(b, c);
      };
    }();

    this.setTexture3D = function () {
      return function (a, b) {
        ha.setTexture3D(a, b);
      };
    }();

    this.setTexture = function () {
      var a = !1;
      return function (b, c) {
        a || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), a = !0);
        ha.setTexture2D(b, c);
      };
    }();

    this.setTextureCube = function () {
      var a = !1;
      return function (b, c) {
        b && b.isWebGLRenderTargetCube && (a || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), a = !0), b = b.texture);
        b && b.isCubeTexture || Array.isArray(b.image) && 6 === b.image.length ? ha.setTextureCube(b, c) : ha.setTextureCubeDynamic(b, c);
      };
    }();

    this.setFramebuffer = function (a) {
      Q = a;
    };

    this.getRenderTarget = function () {
      return I;
    };

    this.setRenderTarget = function (a) {
      (I = a) && void 0 === Da.get(a).__webglFramebuffer && ha.setupRenderTarget(a);
      var b = Q,
          c = !1;
      a ? (b = Da.get(a).__webglFramebuffer, a.isWebGLRenderTargetCube && (b = b[a.activeCubeFace], c = !0), S.copy(a.viewport), Bc.copy(a.scissor), ea = a.scissorTest) : (S.copy(fa).multiplyScalar(U), Bc.copy(ja).multiplyScalar(U), ea = sa);
      L !== b && (O.bindFramebuffer(36160, b), L = b);
      ba.viewport(S);
      ba.scissor(Bc);
      ba.setScissorTest(ea);
      c && (c = Da.get(a.texture), O.framebufferTexture2D(36160, 36064, 34069 + a.activeCubeFace, c.__webglTexture, a.activeMipMapLevel));
    };

    this.readRenderTargetPixels = function (a, b, c, d, e, f) {
      if (a && a.isWebGLRenderTarget) {
        var g = Da.get(a).__webglFramebuffer;

        if (g) {
          var h = !1;
          g !== L && (O.bindFramebuffer(36160, g), h = !0);

          try {
            var k = a.texture,
                m = k.format,
                q = k.type;
            1023 !== m && ia.convert(m) !== O.getParameter(35739) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === q || ia.convert(q) === O.getParameter(35738) || 1015 === q && (xa.isWebGL2 || la.get("OES_texture_float") || la.get("WEBGL_color_buffer_float")) || 1016 === q && (xa.isWebGL2 ? la.get("EXT_color_buffer_float") : la.get("EXT_color_buffer_half_float")) ? 36053 === O.checkFramebufferStatus(36160) ? 0 <= b && b <= a.width - d && 0 <= c && c <= a.height - e && O.readPixels(b, c, d, e, ia.convert(m), ia.convert(q), f) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          } finally {
            h && O.bindFramebuffer(36160, L);
          }
        }
      } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
    };

    this.copyFramebufferToTexture = function (a, b, c) {
      var d = b.image.width,
          e = b.image.height,
          f = ia.convert(b.format);
      this.setTexture2D(b, 0);
      O.copyTexImage2D(3553, c || 0, f, a.x, a.y, d, e, 0);
    };

    this.copyTextureToTexture = function (a, b, c, d) {
      var e = b.image.width,
          f = b.image.height,
          g = ia.convert(c.format),
          h = ia.convert(c.type);
      this.setTexture2D(c, 0);
      b.isDataTexture ? O.texSubImage2D(3553, d || 0, a.x, a.y, e, f, g, h, b.image.data) : O.texSubImage2D(3553, d || 0, a.x, a.y, g, h, b.image);
    };
  }

  function Pb(a, b) {
    this.name = "";
    this.color = new G(a);
    this.density = void 0 !== b ? b : 2.5E-4;
  }

  function Qb(a, b, c) {
    this.name = "";
    this.color = new G(a);
    this.near = void 0 !== b ? b : 1;
    this.far = void 0 !== c ? c : 1E3;
  }

  function vd() {
    D.call(this);
    this.type = "Scene";
    this.overrideMaterial = this.fog = this.background = null;
    this.autoUpdate = !0;
  }

  function sb(a, b) {
    this.array = a;
    this.stride = b;
    this.count = void 0 !== a ? a.length / b : 0;
    this.dynamic = !1;
    this.updateRange = {
      offset: 0,
      count: -1
    };
    this.version = 0;
  }

  function Dc(a, b, c, d) {
    this.data = a;
    this.itemSize = b;
    this.offset = c;
    this.normalized = !0 === d;
  }

  function hb(a) {
    L.call(this);
    this.type = "SpriteMaterial";
    this.color = new G(16777215);
    this.map = null;
    this.rotation = 0;
    this.sizeAttenuation = !0;
    this.lights = !1;
    this.transparent = !0;
    this.setValues(a);
  }

  function Ec(a) {
    D.call(this);
    this.type = "Sprite";

    if (void 0 === Rb) {
      Rb = new E();
      var b = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]);
      b = new sb(b, 5);
      Rb.setIndex([0, 1, 2, 0, 2, 3]);
      Rb.addAttribute("position", new Dc(b, 3, 0, !1));
      Rb.addAttribute("uv", new Dc(b, 2, 3, !1));
    }

    this.geometry = Rb;
    this.material = void 0 !== a ? a : new hb();
    this.center = new z(.5, .5);
  }

  function Fc() {
    D.call(this);
    this.type = "LOD";
    Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      }
    });
  }

  function Gc(a, b) {
    a = a || [];
    this.bones = a.slice(0);
    this.boneMatrices = new Float32Array(16 * this.bones.length);
    if (void 0 === b) this.calculateInverses();else if (this.bones.length === b.length) this.boneInverses = b.slice(0);else for (console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [], a = 0, b = this.bones.length; a < b; a++) {
      this.boneInverses.push(new P());
    }
  }

  function wd() {
    D.call(this);
    this.type = "Bone";
  }

  function xd(a, b) {
    pa.call(this, a, b);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new P();
    this.bindMatrixInverse = new P();
    a = this.initBones();
    a = new Gc(a);
    this.bind(a, this.matrixWorld);
    this.normalizeSkinWeights();
  }

  function T(a) {
    L.call(this);
    this.type = "LineBasicMaterial";
    this.color = new G(16777215);
    this.linewidth = 1;
    this.linejoin = this.linecap = "round";
    this.lights = !1;
    this.setValues(a);
  }

  function ma(a, b, c) {
    1 === c && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
    D.call(this);
    this.type = "Line";
    this.geometry = void 0 !== a ? a : new E();
    this.material = void 0 !== b ? b : new T({
      color: 16777215 * Math.random()
    });
  }

  function S(a, b) {
    ma.call(this, a, b);
    this.type = "LineSegments";
  }

  function yd(a, b) {
    ma.call(this, a, b);
    this.type = "LineLoop";
  }

  function Ha(a) {
    L.call(this);
    this.type = "PointsMaterial";
    this.color = new G(16777215);
    this.map = null;
    this.size = 1;
    this.sizeAttenuation = !0;
    this.lights = this.morphTargets = !1;
    this.setValues(a);
  }

  function Sb(a, b) {
    D.call(this);
    this.type = "Points";
    this.geometry = void 0 !== a ? a : new E();
    this.material = void 0 !== b ? b : new Ha({
      color: 16777215 * Math.random()
    });
  }

  function de(a, b, c, d, e, f, g, h, k) {
    W.call(this, a, b, c, d, e, f, g, h, k);
    this.generateMipmaps = !1;
  }

  function Tb(a, b, c, d, e, f, g, h, k, m, q, n) {
    W.call(this, null, f, g, h, k, m, d, e, q, n);
    this.image = {
      width: b,
      height: c
    };
    this.mipmaps = a;
    this.generateMipmaps = this.flipY = !1;
  }

  function Hc(a, b, c, d, e, f, g, h, k) {
    W.call(this, a, b, c, d, e, f, g, h, k);
    this.needsUpdate = !0;
  }

  function Ic(a, b, c, d, e, f, g, h, k, m) {
    m = void 0 !== m ? m : 1026;
    if (1026 !== m && 1027 !== m) throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    void 0 === c && 1026 === m && (c = 1012);
    void 0 === c && 1027 === m && (c = 1020);
    W.call(this, null, d, e, f, g, h, m, c, k);
    this.image = {
      width: a,
      height: b
    };
    this.magFilter = void 0 !== g ? g : 1003;
    this.minFilter = void 0 !== h ? h : 1003;
    this.generateMipmaps = this.flipY = !1;
  }

  function Ub(a) {
    E.call(this);
    this.type = "WireframeGeometry";
    var b = [],
        c,
        d,
        e,
        f = [0, 0],
        g = {},
        h = ["a", "b", "c"];

    if (a && a.isGeometry) {
      var k = a.faces;
      var m = 0;

      for (d = k.length; m < d; m++) {
        var q = k[m];

        for (c = 0; 3 > c; c++) {
          var n = q[h[c]];
          var r = q[h[(c + 1) % 3]];
          f[0] = Math.min(n, r);
          f[1] = Math.max(n, r);
          n = f[0] + "," + f[1];
          void 0 === g[n] && (g[n] = {
            index1: f[0],
            index2: f[1]
          });
        }
      }

      for (n in g) {
        m = g[n], h = a.vertices[m.index1], b.push(h.x, h.y, h.z), h = a.vertices[m.index2], b.push(h.x, h.y, h.z);
      }
    } else if (a && a.isBufferGeometry) if (h = new p(), null !== a.index) {
      k = a.attributes.position;
      q = a.index;
      var l = a.groups;
      0 === l.length && (l = [{
        start: 0,
        count: q.count,
        materialIndex: 0
      }]);
      a = 0;

      for (e = l.length; a < e; ++a) {
        for (m = l[a], c = m.start, d = m.count, m = c, d = c + d; m < d; m += 3) {
          for (c = 0; 3 > c; c++) {
            n = q.getX(m + c), r = q.getX(m + (c + 1) % 3), f[0] = Math.min(n, r), f[1] = Math.max(n, r), n = f[0] + "," + f[1], void 0 === g[n] && (g[n] = {
              index1: f[0],
              index2: f[1]
            });
          }
        }
      }

      for (n in g) {
        m = g[n], h.fromBufferAttribute(k, m.index1), b.push(h.x, h.y, h.z), h.fromBufferAttribute(k, m.index2), b.push(h.x, h.y, h.z);
      }
    } else for (k = a.attributes.position, m = 0, d = k.count / 3; m < d; m++) {
      for (c = 0; 3 > c; c++) {
        g = 3 * m + c, h.fromBufferAttribute(k, g), b.push(h.x, h.y, h.z), g = 3 * m + (c + 1) % 3, h.fromBufferAttribute(k, g), b.push(h.x, h.y, h.z);
      }
    }

    this.addAttribute("position", new C(b, 3));
  }

  function Jc(a, b, c) {
    I.call(this);
    this.type = "ParametricGeometry";
    this.parameters = {
      func: a,
      slices: b,
      stacks: c
    };
    this.fromBufferGeometry(new Vb(a, b, c));
    this.mergeVertices();
  }

  function Vb(a, b, c) {
    E.call(this);
    this.type = "ParametricBufferGeometry";
    this.parameters = {
      func: a,
      slices: b,
      stacks: c
    };
    var d = [],
        e = [],
        f = [],
        g = [],
        h = new p(),
        k = new p(),
        m = new p(),
        q = new p(),
        n = new p(),
        r,
        l;
    3 > a.length && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
    var t = b + 1;

    for (r = 0; r <= c; r++) {
      var u = r / c;

      for (l = 0; l <= b; l++) {
        var w = l / b;
        a(w, u, k);
        e.push(k.x, k.y, k.z);
        0 <= w - 1E-5 ? (a(w - 1E-5, u, m), q.subVectors(k, m)) : (a(w + 1E-5, u, m), q.subVectors(m, k));
        0 <= u - 1E-5 ? (a(w, u - 1E-5, m), n.subVectors(k, m)) : (a(w, u + 1E-5, m), n.subVectors(m, k));
        h.crossVectors(q, n).normalize();
        f.push(h.x, h.y, h.z);
        g.push(w, u);
      }
    }

    for (r = 0; r < c; r++) {
      for (l = 0; l < b; l++) {
        a = r * t + l + 1, h = (r + 1) * t + l + 1, k = (r + 1) * t + l, d.push(r * t + l, a, k), d.push(a, h, k);
      }
    }

    this.setIndex(d);
    this.addAttribute("position", new C(e, 3));
    this.addAttribute("normal", new C(f, 3));
    this.addAttribute("uv", new C(g, 2));
  }

  function Kc(a, b, c, d) {
    I.call(this);
    this.type = "PolyhedronGeometry";
    this.parameters = {
      vertices: a,
      indices: b,
      radius: c,
      detail: d
    };
    this.fromBufferGeometry(new ya(a, b, c, d));
    this.mergeVertices();
  }

  function ya(a, b, c, d) {
    function e(a) {
      h.push(a.x, a.y, a.z);
    }

    function f(b, c) {
      b *= 3;
      c.x = a[b + 0];
      c.y = a[b + 1];
      c.z = a[b + 2];
    }

    function g(a, b, c, d) {
      0 > d && 1 === a.x && (k[b] = a.x - 1);
      0 === c.x && 0 === c.z && (k[b] = d / 2 / Math.PI + .5);
    }

    E.call(this);
    this.type = "PolyhedronBufferGeometry";
    this.parameters = {
      vertices: a,
      indices: b,
      radius: c,
      detail: d
    };
    c = c || 1;
    d = d || 0;
    var h = [],
        k = [];

    (function (a) {
      for (var c = new p(), d = new p(), g = new p(), h = 0; h < b.length; h += 3) {
        f(b[h + 0], c);
        f(b[h + 1], d);
        f(b[h + 2], g);
        var k,
            m,
            l = c,
            A = d,
            v = g,
            H = Math.pow(2, a),
            y = [];

        for (m = 0; m <= H; m++) {
          y[m] = [];
          var N = l.clone().lerp(v, m / H),
              z = A.clone().lerp(v, m / H),
              B = H - m;

          for (k = 0; k <= B; k++) {
            y[m][k] = 0 === k && m === H ? N : N.clone().lerp(z, k / B);
          }
        }

        for (m = 0; m < H; m++) {
          for (k = 0; k < 2 * (H - m) - 1; k++) {
            l = Math.floor(k / 2), 0 === k % 2 ? (e(y[m][l + 1]), e(y[m + 1][l]), e(y[m][l])) : (e(y[m][l + 1]), e(y[m + 1][l + 1]), e(y[m + 1][l]));
          }
        }
      }
    })(d);

    (function (a) {
      for (var b = new p(), c = 0; c < h.length; c += 3) {
        b.x = h[c + 0], b.y = h[c + 1], b.z = h[c + 2], b.normalize().multiplyScalar(a), h[c + 0] = b.x, h[c + 1] = b.y, h[c + 2] = b.z;
      }
    })(c);

    (function () {
      for (var a = new p(), b = 0; b < h.length; b += 3) {
        a.x = h[b + 0], a.y = h[b + 1], a.z = h[b + 2], k.push(Math.atan2(a.z, -a.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + .5));
      }

      a = new p();
      b = new p();

      for (var c = new p(), d = new p(), e = new z(), f = new z(), l = new z(), w = 0, A = 0; w < h.length; w += 9, A += 6) {
        a.set(h[w + 0], h[w + 1], h[w + 2]);
        b.set(h[w + 3], h[w + 4], h[w + 5]);
        c.set(h[w + 6], h[w + 7], h[w + 8]);
        e.set(k[A + 0], k[A + 1]);
        f.set(k[A + 2], k[A + 3]);
        l.set(k[A + 4], k[A + 5]);
        d.copy(a).add(b).add(c).divideScalar(3);
        var v = Math.atan2(d.z, -d.x);
        g(e, A + 0, a, v);
        g(f, A + 2, b, v);
        g(l, A + 4, c, v);
      }

      for (a = 0; a < k.length; a += 6) {
        b = k[a + 0], c = k[a + 2], d = k[a + 4], e = Math.min(b, c, d), .9 < Math.max(b, c, d) && .1 > e && (.2 > b && (k[a + 0] += 1), .2 > c && (k[a + 2] += 1), .2 > d && (k[a + 4] += 1));
      }
    })();

    this.addAttribute("position", new C(h, 3));
    this.addAttribute("normal", new C(h.slice(), 3));
    this.addAttribute("uv", new C(k, 2));
    0 === d ? this.computeVertexNormals() : this.normalizeNormals();
  }

  function Lc(a, b) {
    I.call(this);
    this.type = "TetrahedronGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
    this.fromBufferGeometry(new Wb(a, b));
    this.mergeVertices();
  }

  function Wb(a, b) {
    ya.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], a, b);
    this.type = "TetrahedronBufferGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
  }

  function Mc(a, b) {
    I.call(this);
    this.type = "OctahedronGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
    this.fromBufferGeometry(new tb(a, b));
    this.mergeVertices();
  }

  function tb(a, b) {
    ya.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], a, b);
    this.type = "OctahedronBufferGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
  }

  function Nc(a, b) {
    I.call(this);
    this.type = "IcosahedronGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
    this.fromBufferGeometry(new Xb(a, b));
    this.mergeVertices();
  }

  function Xb(a, b) {
    var c = (1 + Math.sqrt(5)) / 2;
    ya.call(this, [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], a, b);
    this.type = "IcosahedronBufferGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
  }

  function Oc(a, b) {
    I.call(this);
    this.type = "DodecahedronGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
    this.fromBufferGeometry(new Yb(a, b));
    this.mergeVertices();
  }

  function Yb(a, b) {
    var c = (1 + Math.sqrt(5)) / 2,
        d = 1 / c;
    ya.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, 0, -c, 0, -d, c, 0, -d, -c, 0, d, c, 0, d], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], a, b);
    this.type = "DodecahedronBufferGeometry";
    this.parameters = {
      radius: a,
      detail: b
    };
  }

  function Pc(a, b, c, d, e, f) {
    I.call(this);
    this.type = "TubeGeometry";
    this.parameters = {
      path: a,
      tubularSegments: b,
      radius: c,
      radialSegments: d,
      closed: e
    };
    void 0 !== f && console.warn("THREE.TubeGeometry: taper has been removed.");
    a = new Zb(a, b, c, d, e);
    this.tangents = a.tangents;
    this.normals = a.normals;
    this.binormals = a.binormals;
    this.fromBufferGeometry(a);
    this.mergeVertices();
  }

  function Zb(a, b, c, d, e) {
    function f(e) {
      q = a.getPointAt(e / b, q);
      var f = g.normals[e];
      e = g.binormals[e];

      for (r = 0; r <= d; r++) {
        var m = r / d * Math.PI * 2,
            n = Math.sin(m);
        m = -Math.cos(m);
        k.x = m * f.x + n * e.x;
        k.y = m * f.y + n * e.y;
        k.z = m * f.z + n * e.z;
        k.normalize();
        t.push(k.x, k.y, k.z);
        h.x = q.x + c * k.x;
        h.y = q.y + c * k.y;
        h.z = q.z + c * k.z;
        l.push(h.x, h.y, h.z);
      }
    }

    E.call(this);
    this.type = "TubeBufferGeometry";
    this.parameters = {
      path: a,
      tubularSegments: b,
      radius: c,
      radialSegments: d,
      closed: e
    };
    b = b || 64;
    c = c || 1;
    d = d || 8;
    e = e || !1;
    var g = a.computeFrenetFrames(b, e);
    this.tangents = g.tangents;
    this.normals = g.normals;
    this.binormals = g.binormals;
    var h = new p(),
        k = new p(),
        m = new z(),
        q = new p(),
        n,
        r,
        l = [],
        t = [],
        u = [],
        w = [];

    for (n = 0; n < b; n++) {
      f(n);
    }

    f(!1 === e ? b : 0);

    for (n = 0; n <= b; n++) {
      for (r = 0; r <= d; r++) {
        m.x = n / b, m.y = r / d, u.push(m.x, m.y);
      }
    }

    (function () {
      for (r = 1; r <= b; r++) {
        for (n = 1; n <= d; n++) {
          var a = (d + 1) * r + (n - 1),
              c = (d + 1) * r + n,
              e = (d + 1) * (r - 1) + n;
          w.push((d + 1) * (r - 1) + (n - 1), a, e);
          w.push(a, c, e);
        }
      }
    })();

    this.setIndex(w);
    this.addAttribute("position", new C(l, 3));
    this.addAttribute("normal", new C(t, 3));
    this.addAttribute("uv", new C(u, 2));
  }

  function Qc(a, b, c, d, e, f, g) {
    I.call(this);
    this.type = "TorusKnotGeometry";
    this.parameters = {
      radius: a,
      tube: b,
      tubularSegments: c,
      radialSegments: d,
      p: e,
      q: f
    };
    void 0 !== g && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new $b(a, b, c, d, e, f));
    this.mergeVertices();
  }

  function $b(a, b, c, d, e, f) {
    function g(a, b, c, d, e) {
      var f = Math.sin(a);
      b = c / b * a;
      c = Math.cos(b);
      e.x = d * (2 + c) * .5 * Math.cos(a);
      e.y = d * (2 + c) * f * .5;
      e.z = d * Math.sin(b) * .5;
    }

    E.call(this);
    this.type = "TorusKnotBufferGeometry";
    this.parameters = {
      radius: a,
      tube: b,
      tubularSegments: c,
      radialSegments: d,
      p: e,
      q: f
    };
    a = a || 1;
    b = b || .4;
    c = Math.floor(c) || 64;
    d = Math.floor(d) || 8;
    e = e || 2;
    f = f || 3;
    var h = [],
        k = [],
        m = [],
        q = [],
        n,
        r = new p(),
        l = new p(),
        t = new p(),
        u = new p(),
        w = new p(),
        A = new p(),
        v = new p();

    for (n = 0; n <= c; ++n) {
      var H = n / c * e * Math.PI * 2;
      g(H, e, f, a, t);
      g(H + .01, e, f, a, u);
      A.subVectors(u, t);
      v.addVectors(u, t);
      w.crossVectors(A, v);
      v.crossVectors(w, A);
      w.normalize();
      v.normalize();

      for (H = 0; H <= d; ++H) {
        var y = H / d * Math.PI * 2,
            N = -b * Math.cos(y);
        y = b * Math.sin(y);
        r.x = t.x + (N * v.x + y * w.x);
        r.y = t.y + (N * v.y + y * w.y);
        r.z = t.z + (N * v.z + y * w.z);
        k.push(r.x, r.y, r.z);
        l.subVectors(r, t).normalize();
        m.push(l.x, l.y, l.z);
        q.push(n / c);
        q.push(H / d);
      }
    }

    for (H = 1; H <= c; H++) {
      for (n = 1; n <= d; n++) {
        a = (d + 1) * H + (n - 1), b = (d + 1) * H + n, e = (d + 1) * (H - 1) + n, h.push((d + 1) * (H - 1) + (n - 1), a, e), h.push(a, b, e);
      }
    }

    this.setIndex(h);
    this.addAttribute("position", new C(k, 3));
    this.addAttribute("normal", new C(m, 3));
    this.addAttribute("uv", new C(q, 2));
  }

  function Rc(a, b, c, d, e) {
    I.call(this);
    this.type = "TorusGeometry";
    this.parameters = {
      radius: a,
      tube: b,
      radialSegments: c,
      tubularSegments: d,
      arc: e
    };
    this.fromBufferGeometry(new ac(a, b, c, d, e));
    this.mergeVertices();
  }

  function ac(a, b, c, d, e) {
    E.call(this);
    this.type = "TorusBufferGeometry";
    this.parameters = {
      radius: a,
      tube: b,
      radialSegments: c,
      tubularSegments: d,
      arc: e
    };
    a = a || 1;
    b = b || .4;
    c = Math.floor(c) || 8;
    d = Math.floor(d) || 6;
    e = e || 2 * Math.PI;
    var f = [],
        g = [],
        h = [],
        k = [],
        m = new p(),
        q = new p(),
        n = new p(),
        r,
        l;

    for (r = 0; r <= c; r++) {
      for (l = 0; l <= d; l++) {
        var t = l / d * e,
            u = r / c * Math.PI * 2;
        q.x = (a + b * Math.cos(u)) * Math.cos(t);
        q.y = (a + b * Math.cos(u)) * Math.sin(t);
        q.z = b * Math.sin(u);
        g.push(q.x, q.y, q.z);
        m.x = a * Math.cos(t);
        m.y = a * Math.sin(t);
        n.subVectors(q, m).normalize();
        h.push(n.x, n.y, n.z);
        k.push(l / d);
        k.push(r / c);
      }
    }

    for (r = 1; r <= c; r++) {
      for (l = 1; l <= d; l++) {
        a = (d + 1) * (r - 1) + l - 1, b = (d + 1) * (r - 1) + l, e = (d + 1) * r + l, f.push((d + 1) * r + l - 1, a, e), f.push(a, b, e);
      }
    }

    this.setIndex(f);
    this.addAttribute("position", new C(g, 3));
    this.addAttribute("normal", new C(h, 3));
    this.addAttribute("uv", new C(k, 2));
  }

  function jf(a, b, c, d, e) {
    for (var f, g = 0, h = b, k = c - d; h < c; h += d) {
      g += (a[k] - a[h]) * (a[h + 1] + a[k + 1]), k = h;
    }

    if (e === 0 < g) for (e = b; e < c; e += d) {
      f = kf(e, a[e], a[e + 1], f);
    } else for (e = c - d; e >= b; e -= d) {
      f = kf(e, a[e], a[e + 1], f);
    }
    f && ub(f, f.next) && (Sc(f), f = f.next);
    return f;
  }

  function Tc(a, b) {
    if (!a) return a;
    b || (b = a);

    do {
      var c = !1;
      if (a.steiner || !ub(a, a.next) && 0 !== na(a.prev, a, a.next)) a = a.next;else {
        Sc(a);
        a = b = a.prev;
        if (a === a.next) break;
        c = !0;
      }
    } while (c || a !== b);

    return b;
  }

  function Uc(a, b, c, d, e, f, g) {
    if (a) {
      if (!g && f) {
        var h = a,
            k = h;

        do {
          null === k.z && (k.z = ee(k.x, k.y, d, e, f)), k.prevZ = k.prev, k = k.nextZ = k.next;
        } while (k !== h);

        k.prevZ.nextZ = null;
        k.prevZ = null;
        h = k;
        var m,
            q,
            n,
            r,
            l = 1;

        do {
          k = h;
          var t = h = null;

          for (q = 0; k;) {
            q++;
            var u = k;

            for (m = n = 0; m < l && (n++, u = u.nextZ, u); m++) {
              ;
            }

            for (r = l; 0 < n || 0 < r && u;) {
              0 !== n && (0 === r || !u || k.z <= u.z) ? (m = k, k = k.nextZ, n--) : (m = u, u = u.nextZ, r--), t ? t.nextZ = m : h = m, m.prevZ = t, t = m;
            }

            k = u;
          }

          t.nextZ = null;
          l *= 2;
        } while (1 < q);
      }

      for (h = a; a.prev !== a.next;) {
        k = a.prev;
        u = a.next;
        if (f) a: {
          t = a;
          r = d;
          var p = e,
              A = f;
          q = t.prev;
          n = t;
          l = t.next;
          if (0 <= na(q, n, l)) t = !1;else {
            var v = q.x > n.x ? q.x > l.x ? q.x : l.x : n.x > l.x ? n.x : l.x,
                H = q.y > n.y ? q.y > l.y ? q.y : l.y : n.y > l.y ? n.y : l.y;
            m = ee(q.x < n.x ? q.x < l.x ? q.x : l.x : n.x < l.x ? n.x : l.x, q.y < n.y ? q.y < l.y ? q.y : l.y : n.y < l.y ? n.y : l.y, r, p, A);
            r = ee(v, H, r, p, A);

            for (p = t.nextZ; p && p.z <= r;) {
              if (p !== t.prev && p !== t.next && zd(q.x, q.y, n.x, n.y, l.x, l.y, p.x, p.y) && 0 <= na(p.prev, p, p.next)) {
                t = !1;
                break a;
              }

              p = p.nextZ;
            }

            for (p = t.prevZ; p && p.z >= m;) {
              if (p !== t.prev && p !== t.next && zd(q.x, q.y, n.x, n.y, l.x, l.y, p.x, p.y) && 0 <= na(p.prev, p, p.next)) {
                t = !1;
                break a;
              }

              p = p.prevZ;
            }

            t = !0;
          }
        } else a: if (t = a, q = t.prev, n = t, l = t.next, 0 <= na(q, n, l)) t = !1;else {
          for (m = t.next.next; m !== t.prev;) {
            if (zd(q.x, q.y, n.x, n.y, l.x, l.y, m.x, m.y) && 0 <= na(m.prev, m, m.next)) {
              t = !1;
              break a;
            }

            m = m.next;
          }

          t = !0;
        }
        if (t) b.push(k.i / c), b.push(a.i / c), b.push(u.i / c), Sc(a), h = a = u.next;else if (a = u, a === h) {
          if (!g) Uc(Tc(a), b, c, d, e, f, 1);else if (1 === g) {
            g = b;
            h = c;
            k = a;

            do {
              u = k.prev, t = k.next.next, !ub(u, t) && lf(u, k, k.next, t) && Vc(u, t) && Vc(t, u) && (g.push(u.i / h), g.push(k.i / h), g.push(t.i / h), Sc(k), Sc(k.next), k = a = t), k = k.next;
            } while (k !== a);

            a = k;
            Uc(a, b, c, d, e, f, 2);
          } else if (2 === g) a: {
            g = a;

            do {
              for (h = g.next.next; h !== g.prev;) {
                if (k = g.i !== h.i) {
                  k = g;
                  u = h;

                  if (t = k.next.i !== u.i && k.prev.i !== u.i) {
                    b: {
                      t = k;

                      do {
                        if (t.i !== k.i && t.next.i !== k.i && t.i !== u.i && t.next.i !== u.i && lf(t, t.next, k, u)) {
                          t = !0;
                          break b;
                        }

                        t = t.next;
                      } while (t !== k);

                      t = !1;
                    }

                    t = !t;
                  }

                  if (t = t && Vc(k, u) && Vc(u, k)) {
                    t = k;
                    q = !1;
                    n = (k.x + u.x) / 2;
                    u = (k.y + u.y) / 2;

                    do {
                      t.y > u !== t.next.y > u && t.next.y !== t.y && n < (t.next.x - t.x) * (u - t.y) / (t.next.y - t.y) + t.x && (q = !q), t = t.next;
                    } while (t !== k);

                    t = q;
                  }

                  k = t;
                }

                if (k) {
                  a = mf(g, h);
                  g = Tc(g, g.next);
                  a = Tc(a, a.next);
                  Uc(g, b, c, d, e, f);
                  Uc(a, b, c, d, e, f);
                  break a;
                }

                h = h.next;
              }

              g = g.next;
            } while (g !== a);
          }
          break;
        }
      }
    }
  }

  function Ug(a, b) {
    return a.x - b.x;
  }

  function Vg(a, b) {
    var c = b,
        d = a.x,
        e = a.y,
        f = -Infinity;

    do {
      if (e <= c.y && e >= c.next.y && c.next.y !== c.y) {
        var g = c.x + (e - c.y) * (c.next.x - c.x) / (c.next.y - c.y);

        if (g <= d && g > f) {
          f = g;

          if (g === d) {
            if (e === c.y) return c;
            if (e === c.next.y) return c.next;
          }

          var h = c.x < c.next.x ? c : c.next;
        }
      }

      c = c.next;
    } while (c !== b);

    if (!h) return null;
    if (d === f) return h.prev;
    b = h;
    g = h.x;
    var k = h.y,
        m = Infinity;

    for (c = h.next; c !== b;) {
      if (d >= c.x && c.x >= g && d !== c.x && zd(e < k ? d : f, e, g, k, e < k ? f : d, e, c.x, c.y)) {
        var q = Math.abs(e - c.y) / (d - c.x);
        (q < m || q === m && c.x > h.x) && Vc(c, a) && (h = c, m = q);
      }

      c = c.next;
    }

    return h;
  }

  function ee(a, b, c, d, e) {
    a = 32767 * (a - c) * e;
    b = 32767 * (b - d) * e;
    a = (a | a << 8) & 16711935;
    a = (a | a << 4) & 252645135;
    a = (a | a << 2) & 858993459;
    b = (b | b << 8) & 16711935;
    b = (b | b << 4) & 252645135;
    b = (b | b << 2) & 858993459;
    return (a | a << 1) & 1431655765 | ((b | b << 1) & 1431655765) << 1;
  }

  function Wg(a) {
    var b = a,
        c = a;

    do {
      b.x < c.x && (c = b), b = b.next;
    } while (b !== a);

    return c;
  }

  function zd(a, b, c, d, e, f, g, h) {
    return 0 <= (e - g) * (b - h) - (a - g) * (f - h) && 0 <= (a - g) * (d - h) - (c - g) * (b - h) && 0 <= (c - g) * (f - h) - (e - g) * (d - h);
  }

  function na(a, b, c) {
    return (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
  }

  function ub(a, b) {
    return a.x === b.x && a.y === b.y;
  }

  function lf(a, b, c, d) {
    return ub(a, b) && ub(c, d) || ub(a, d) && ub(c, b) ? !0 : 0 < na(a, b, c) !== 0 < na(a, b, d) && 0 < na(c, d, a) !== 0 < na(c, d, b);
  }

  function Vc(a, b) {
    return 0 > na(a.prev, a, a.next) ? 0 <= na(a, b, a.next) && 0 <= na(a, a.prev, b) : 0 > na(a, b, a.prev) || 0 > na(a, a.next, b);
  }

  function mf(a, b) {
    var c = new fe(a.i, a.x, a.y),
        d = new fe(b.i, b.x, b.y),
        e = a.next,
        f = b.prev;
    a.next = b;
    b.prev = a;
    c.next = e;
    e.prev = c;
    d.next = c;
    c.prev = d;
    f.next = d;
    d.prev = f;
    return d;
  }

  function kf(a, b, c, d) {
    a = new fe(a, b, c);
    d ? (a.next = d.next, a.prev = d, d.next.prev = a, d.next = a) : (a.prev = a, a.next = a);
    return a;
  }

  function Sc(a) {
    a.next.prev = a.prev;
    a.prev.next = a.next;
    a.prevZ && (a.prevZ.nextZ = a.nextZ);
    a.nextZ && (a.nextZ.prevZ = a.prevZ);
  }

  function fe(a, b, c) {
    this.i = a;
    this.x = b;
    this.y = c;
    this.nextZ = this.prevZ = this.z = this.next = this.prev = null;
    this.steiner = !1;
  }

  function nf(a) {
    var b = a.length;
    2 < b && a[b - 1].equals(a[0]) && a.pop();
  }

  function of(a, b) {
    for (var c = 0; c < b.length; c++) {
      a.push(b[c].x), a.push(b[c].y);
    }
  }

  function vb(a, b) {
    I.call(this);
    this.type = "ExtrudeGeometry";
    this.parameters = {
      shapes: a,
      options: b
    };
    this.fromBufferGeometry(new Sa(a, b));
    this.mergeVertices();
  }

  function Sa(a, b) {
    function c(a) {
      function c(a, b, c) {
        b || console.error("THREE.ExtrudeGeometry: vec does not exist");
        return b.clone().multiplyScalar(c).add(a);
      }

      function g(a, b, c) {
        var d = a.x - b.x;
        var e = a.y - b.y;
        var f = c.x - a.x;
        var g = c.y - a.y,
            h = d * d + e * e;

        if (Math.abs(d * g - e * f) > Number.EPSILON) {
          var k = Math.sqrt(h),
              m = Math.sqrt(f * f + g * g);
          h = b.x - e / k;
          b = b.y + d / k;
          g = ((c.x - g / m - h) * g - (c.y + f / m - b) * f) / (d * g - e * f);
          f = h + d * g - a.x;
          d = b + e * g - a.y;
          e = f * f + d * d;
          if (2 >= e) return new z(f, d);
          e = Math.sqrt(e / 2);
        } else a = !1, d > Number.EPSILON ? f > Number.EPSILON && (a = !0) : d < -Number.EPSILON ? f < -Number.EPSILON && (a = !0) : Math.sign(e) === Math.sign(g) && (a = !0), a ? (f = -e, e = Math.sqrt(h)) : (f = d, d = e, e = Math.sqrt(h / 2));

        return new z(f / e, d / e);
      }

      function h(a, b) {
        for (M = a.length; 0 <= --M;) {
          var c = M;
          var f = M - 1;
          0 > f && (f = a.length - 1);
          var g,
              h = v + 2 * B;

          for (g = 0; g < h; g++) {
            var k = W * g,
                m = W * (g + 1),
                q = b + f + k,
                n = b + f + m;
            m = b + c + m;
            t(b + c + k);
            t(q);
            t(m);
            t(q);
            t(n);
            t(m);
            k = e.length / 3;
            k = D.generateSideWallUV(d, e, k - 6, k - 3, k - 2, k - 1);
            u(k[0]);
            u(k[1]);
            u(k[3]);
            u(k[1]);
            u(k[2]);
            u(k[3]);
          }
        }
      }

      function k(a, b, c) {
        w.push(a);
        w.push(b);
        w.push(c);
      }

      function l(a, b, c) {
        t(a);
        t(b);
        t(c);
        a = e.length / 3;
        a = D.generateTopUV(d, e, a - 3, a - 2, a - 1);
        u(a[0]);
        u(a[1]);
        u(a[2]);
      }

      function t(a) {
        e.push(w[3 * a]);
        e.push(w[3 * a + 1]);
        e.push(w[3 * a + 2]);
      }

      function u(a) {
        f.push(a.x);
        f.push(a.y);
      }

      var w = [],
          A = void 0 !== b.curveSegments ? b.curveSegments : 12,
          v = void 0 !== b.steps ? b.steps : 1,
          H = void 0 !== b.depth ? b.depth : 100,
          y = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0,
          N = void 0 !== b.bevelThickness ? b.bevelThickness : 6,
          X = void 0 !== b.bevelSize ? b.bevelSize : N - 2,
          B = void 0 !== b.bevelSegments ? b.bevelSegments : 3,
          C = b.extrudePath,
          D = void 0 !== b.UVGenerator ? b.UVGenerator : Xg;
      void 0 !== b.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), H = b.amount);
      var E = !1;

      if (C) {
        var Y = C.getSpacedPoints(v);
        E = !0;
        y = !1;
        var G = C.computeFrenetFrames(v, !1);
        var J = new p();
        var Q = new p();
        var I = new p();
      }

      y || (X = N = B = 0);
      var P;
      A = a.extractPoints(A);
      a = A.shape;
      var L = A.holes;

      if (!Za.isClockWise(a)) {
        a = a.reverse();
        var F = 0;

        for (P = L.length; F < P; F++) {
          var K = L[F];
          Za.isClockWise(K) && (L[F] = K.reverse());
        }
      }

      var R = Za.triangulateShape(a, L),
          T = a;
      F = 0;

      for (P = L.length; F < P; F++) {
        K = L[F], a = a.concat(K);
      }

      var S,
          W = a.length,
          V,
          Z = R.length;
      A = [];
      var M = 0;
      var U = T.length;
      var fa = U - 1;

      for (S = M + 1; M < U; M++, fa++, S++) {
        fa === U && (fa = 0), S === U && (S = 0), A[M] = g(T[M], T[fa], T[S]);
      }

      C = [];
      var ea = A.concat();
      F = 0;

      for (P = L.length; F < P; F++) {
        K = L[F];
        var ca = [];
        M = 0;
        U = K.length;
        fa = U - 1;

        for (S = M + 1; M < U; M++, fa++, S++) {
          fa === U && (fa = 0), S === U && (S = 0), ca[M] = g(K[M], K[fa], K[S]);
        }

        C.push(ca);
        ea = ea.concat(ca);
      }

      for (fa = 0; fa < B; fa++) {
        U = fa / B;
        var da = N * Math.cos(U * Math.PI / 2);
        S = X * Math.sin(U * Math.PI / 2);
        M = 0;

        for (U = T.length; M < U; M++) {
          var aa = c(T[M], A[M], S);
          k(aa.x, aa.y, -da);
        }

        F = 0;

        for (P = L.length; F < P; F++) {
          for (K = L[F], ca = C[F], M = 0, U = K.length; M < U; M++) {
            aa = c(K[M], ca[M], S), k(aa.x, aa.y, -da);
          }
        }
      }

      S = X;

      for (M = 0; M < W; M++) {
        aa = y ? c(a[M], ea[M], S) : a[M], E ? (Q.copy(G.normals[0]).multiplyScalar(aa.x), J.copy(G.binormals[0]).multiplyScalar(aa.y), I.copy(Y[0]).add(Q).add(J), k(I.x, I.y, I.z)) : k(aa.x, aa.y, 0);
      }

      for (U = 1; U <= v; U++) {
        for (M = 0; M < W; M++) {
          aa = y ? c(a[M], ea[M], S) : a[M], E ? (Q.copy(G.normals[U]).multiplyScalar(aa.x), J.copy(G.binormals[U]).multiplyScalar(aa.y), I.copy(Y[U]).add(Q).add(J), k(I.x, I.y, I.z)) : k(aa.x, aa.y, H / v * U);
        }
      }

      for (fa = B - 1; 0 <= fa; fa--) {
        U = fa / B;
        da = N * Math.cos(U * Math.PI / 2);
        S = X * Math.sin(U * Math.PI / 2);
        M = 0;

        for (U = T.length; M < U; M++) {
          aa = c(T[M], A[M], S), k(aa.x, aa.y, H + da);
        }

        F = 0;

        for (P = L.length; F < P; F++) {
          for (K = L[F], ca = C[F], M = 0, U = K.length; M < U; M++) {
            aa = c(K[M], ca[M], S), E ? k(aa.x, aa.y + Y[v - 1].y, Y[v - 1].x + da) : k(aa.x, aa.y, H + da);
          }
        }
      }

      (function () {
        var a = e.length / 3;

        if (y) {
          var b = 0 * W;

          for (M = 0; M < Z; M++) {
            V = R[M], l(V[2] + b, V[1] + b, V[0] + b);
          }

          b = W * (v + 2 * B);

          for (M = 0; M < Z; M++) {
            V = R[M], l(V[0] + b, V[1] + b, V[2] + b);
          }
        } else {
          for (M = 0; M < Z; M++) {
            V = R[M], l(V[2], V[1], V[0]);
          }

          for (M = 0; M < Z; M++) {
            V = R[M], l(V[0] + W * v, V[1] + W * v, V[2] + W * v);
          }
        }

        d.addGroup(a, e.length / 3 - a, 0);
      })();

      (function () {
        var a = e.length / 3,
            b = 0;
        h(T, b);
        b += T.length;
        F = 0;

        for (P = L.length; F < P; F++) {
          K = L[F], h(K, b), b += K.length;
        }

        d.addGroup(a, e.length / 3 - a, 1);
      })();
    }

    E.call(this);
    this.type = "ExtrudeBufferGeometry";
    this.parameters = {
      shapes: a,
      options: b
    };
    a = Array.isArray(a) ? a : [a];

    for (var d = this, e = [], f = [], g = 0, h = a.length; g < h; g++) {
      c(a[g]);
    }

    this.addAttribute("position", new C(e, 3));
    this.addAttribute("uv", new C(f, 2));
    this.computeVertexNormals();
  }

  function pf(a, b, c) {
    c.shapes = [];
    if (Array.isArray(a)) for (var d = 0, e = a.length; d < e; d++) {
      c.shapes.push(a[d].uuid);
    } else c.shapes.push(a.uuid);
    void 0 !== b.extrudePath && (c.options.extrudePath = b.extrudePath.toJSON());
    return c;
  }

  function Wc(a, b) {
    I.call(this);
    this.type = "TextGeometry";
    this.parameters = {
      text: a,
      parameters: b
    };
    this.fromBufferGeometry(new bc(a, b));
    this.mergeVertices();
  }

  function bc(a, b) {
    b = b || {};
    var c = b.font;
    if (!c || !c.isFont) return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new I();
    a = c.generateShapes(a, b.size);
    b.depth = void 0 !== b.height ? b.height : 50;
    void 0 === b.bevelThickness && (b.bevelThickness = 10);
    void 0 === b.bevelSize && (b.bevelSize = 8);
    void 0 === b.bevelEnabled && (b.bevelEnabled = !1);
    Sa.call(this, a, b);
    this.type = "TextBufferGeometry";
  }

  function Xc(a, b, c, d, e, f, g) {
    I.call(this);
    this.type = "SphereGeometry";
    this.parameters = {
      radius: a,
      widthSegments: b,
      heightSegments: c,
      phiStart: d,
      phiLength: e,
      thetaStart: f,
      thetaLength: g
    };
    this.fromBufferGeometry(new wb(a, b, c, d, e, f, g));
    this.mergeVertices();
  }

  function wb(a, b, c, d, e, f, g) {
    E.call(this);
    this.type = "SphereBufferGeometry";
    this.parameters = {
      radius: a,
      widthSegments: b,
      heightSegments: c,
      phiStart: d,
      phiLength: e,
      thetaStart: f,
      thetaLength: g
    };
    a = a || 1;
    b = Math.max(3, Math.floor(b) || 8);
    c = Math.max(2, Math.floor(c) || 6);
    d = void 0 !== d ? d : 0;
    e = void 0 !== e ? e : 2 * Math.PI;
    f = void 0 !== f ? f : 0;
    g = void 0 !== g ? g : Math.PI;
    var h = f + g,
        k,
        m,
        q = 0,
        n = [],
        l = new p(),
        x = new p(),
        t = [],
        u = [],
        w = [],
        A = [];

    for (m = 0; m <= c; m++) {
      var v = [],
          H = m / c;

      for (k = 0; k <= b; k++) {
        var y = k / b;
        l.x = -a * Math.cos(d + y * e) * Math.sin(f + H * g);
        l.y = a * Math.cos(f + H * g);
        l.z = a * Math.sin(d + y * e) * Math.sin(f + H * g);
        u.push(l.x, l.y, l.z);
        x.set(l.x, l.y, l.z).normalize();
        w.push(x.x, x.y, x.z);
        A.push(y, 1 - H);
        v.push(q++);
      }

      n.push(v);
    }

    for (m = 0; m < c; m++) {
      for (k = 0; k < b; k++) {
        a = n[m][k + 1], d = n[m][k], e = n[m + 1][k], g = n[m + 1][k + 1], (0 !== m || 0 < f) && t.push(a, d, g), (m !== c - 1 || h < Math.PI) && t.push(d, e, g);
      }
    }

    this.setIndex(t);
    this.addAttribute("position", new C(u, 3));
    this.addAttribute("normal", new C(w, 3));
    this.addAttribute("uv", new C(A, 2));
  }

  function Yc(a, b, c, d, e, f) {
    I.call(this);
    this.type = "RingGeometry";
    this.parameters = {
      innerRadius: a,
      outerRadius: b,
      thetaSegments: c,
      phiSegments: d,
      thetaStart: e,
      thetaLength: f
    };
    this.fromBufferGeometry(new cc(a, b, c, d, e, f));
    this.mergeVertices();
  }

  function cc(a, b, c, d, e, f) {
    E.call(this);
    this.type = "RingBufferGeometry";
    this.parameters = {
      innerRadius: a,
      outerRadius: b,
      thetaSegments: c,
      phiSegments: d,
      thetaStart: e,
      thetaLength: f
    };
    a = a || .5;
    b = b || 1;
    e = void 0 !== e ? e : 0;
    f = void 0 !== f ? f : 2 * Math.PI;
    c = void 0 !== c ? Math.max(3, c) : 8;
    d = void 0 !== d ? Math.max(1, d) : 1;
    var g = [],
        h = [],
        k = [],
        m = [],
        q = a,
        n = (b - a) / d,
        l = new p(),
        x = new z(),
        t,
        u;

    for (t = 0; t <= d; t++) {
      for (u = 0; u <= c; u++) {
        a = e + u / c * f, l.x = q * Math.cos(a), l.y = q * Math.sin(a), h.push(l.x, l.y, l.z), k.push(0, 0, 1), x.x = (l.x / b + 1) / 2, x.y = (l.y / b + 1) / 2, m.push(x.x, x.y);
      }

      q += n;
    }

    for (t = 0; t < d; t++) {
      for (b = t * (c + 1), u = 0; u < c; u++) {
        a = u + b, e = a + c + 1, f = a + c + 2, q = a + 1, g.push(a, e, q), g.push(e, f, q);
      }
    }

    this.setIndex(g);
    this.addAttribute("position", new C(h, 3));
    this.addAttribute("normal", new C(k, 3));
    this.addAttribute("uv", new C(m, 2));
  }

  function Zc(a, b, c, d) {
    I.call(this);
    this.type = "LatheGeometry";
    this.parameters = {
      points: a,
      segments: b,
      phiStart: c,
      phiLength: d
    };
    this.fromBufferGeometry(new dc(a, b, c, d));
    this.mergeVertices();
  }

  function dc(a, b, c, d) {
    E.call(this);
    this.type = "LatheBufferGeometry";
    this.parameters = {
      points: a,
      segments: b,
      phiStart: c,
      phiLength: d
    };
    b = Math.floor(b) || 12;
    c = c || 0;
    d = d || 2 * Math.PI;
    d = R.clamp(d, 0, 2 * Math.PI);
    var e = [],
        f = [],
        g = [],
        h = 1 / b,
        k = new p(),
        m = new z(),
        q;

    for (q = 0; q <= b; q++) {
      var n = c + q * h * d;
      var l = Math.sin(n),
          x = Math.cos(n);

      for (n = 0; n <= a.length - 1; n++) {
        k.x = a[n].x * l, k.y = a[n].y, k.z = a[n].x * x, f.push(k.x, k.y, k.z), m.x = q / b, m.y = n / (a.length - 1), g.push(m.x, m.y);
      }
    }

    for (q = 0; q < b; q++) {
      for (n = 0; n < a.length - 1; n++) {
        c = n + q * a.length, h = c + a.length, k = c + a.length + 1, m = c + 1, e.push(c, h, m), e.push(h, k, m);
      }
    }

    this.setIndex(e);
    this.addAttribute("position", new C(f, 3));
    this.addAttribute("uv", new C(g, 2));
    this.computeVertexNormals();
    if (d === 2 * Math.PI) for (d = this.attributes.normal.array, e = new p(), f = new p(), g = new p(), c = b * a.length * 3, n = q = 0; q < a.length; q++, n += 3) {
      e.x = d[n + 0], e.y = d[n + 1], e.z = d[n + 2], f.x = d[c + n + 0], f.y = d[c + n + 1], f.z = d[c + n + 2], g.addVectors(e, f).normalize(), d[n + 0] = d[c + n + 0] = g.x, d[n + 1] = d[c + n + 1] = g.y, d[n + 2] = d[c + n + 2] = g.z;
    }
  }

  function xb(a, b) {
    I.call(this);
    this.type = "ShapeGeometry";
    "object" === _typeof(b) && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), b = b.curveSegments);
    this.parameters = {
      shapes: a,
      curveSegments: b
    };
    this.fromBufferGeometry(new yb(a, b));
    this.mergeVertices();
  }

  function yb(a, b) {
    function c(a) {
      var c,
          h = e.length / 3;
      a = a.extractPoints(b);
      var m = a.shape,
          q = a.holes;
      if (!1 === Za.isClockWise(m)) for (m = m.reverse(), a = 0, c = q.length; a < c; a++) {
        var l = q[a];
        !0 === Za.isClockWise(l) && (q[a] = l.reverse());
      }
      var p = Za.triangulateShape(m, q);
      a = 0;

      for (c = q.length; a < c; a++) {
        l = q[a], m = m.concat(l);
      }

      a = 0;

      for (c = m.length; a < c; a++) {
        l = m[a], e.push(l.x, l.y, 0), f.push(0, 0, 1), g.push(l.x, l.y);
      }

      a = 0;

      for (c = p.length; a < c; a++) {
        m = p[a], d.push(m[0] + h, m[1] + h, m[2] + h), k += 3;
      }
    }

    E.call(this);
    this.type = "ShapeBufferGeometry";
    this.parameters = {
      shapes: a,
      curveSegments: b
    };
    b = b || 12;
    var d = [],
        e = [],
        f = [],
        g = [],
        h = 0,
        k = 0;
    if (!1 === Array.isArray(a)) c(a);else for (var m = 0; m < a.length; m++) {
      c(a[m]), this.addGroup(h, k, m), h += k, k = 0;
    }
    this.setIndex(d);
    this.addAttribute("position", new C(e, 3));
    this.addAttribute("normal", new C(f, 3));
    this.addAttribute("uv", new C(g, 2));
  }

  function qf(a, b) {
    b.shapes = [];
    if (Array.isArray(a)) for (var c = 0, d = a.length; c < d; c++) {
      b.shapes.push(a[c].uuid);
    } else b.shapes.push(a.uuid);
    return b;
  }

  function ec(a, b) {
    E.call(this);
    this.type = "EdgesGeometry";
    this.parameters = {
      thresholdAngle: b
    };
    var c = [];
    b = Math.cos(R.DEG2RAD * (void 0 !== b ? b : 1));
    var d = [0, 0],
        e = {},
        f = ["a", "b", "c"];

    if (a.isBufferGeometry) {
      var g = new I();
      g.fromBufferGeometry(a);
    } else g = a.clone();

    g.mergeVertices();
    g.computeFaceNormals();
    a = g.vertices;
    g = g.faces;

    for (var h = 0, k = g.length; h < k; h++) {
      for (var m = g[h], q = 0; 3 > q; q++) {
        var n = m[f[q]];
        var l = m[f[(q + 1) % 3]];
        d[0] = Math.min(n, l);
        d[1] = Math.max(n, l);
        n = d[0] + "," + d[1];
        void 0 === e[n] ? e[n] = {
          index1: d[0],
          index2: d[1],
          face1: h,
          face2: void 0
        } : e[n].face2 = h;
      }
    }

    for (n in e) {
      if (d = e[n], void 0 === d.face2 || g[d.face1].normal.dot(g[d.face2].normal) <= b) f = a[d.index1], c.push(f.x, f.y, f.z), f = a[d.index2], c.push(f.x, f.y, f.z);
    }

    this.addAttribute("position", new C(c, 3));
  }

  function zb(a, b, c, d, e, f, g, h) {
    I.call(this);
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop: a,
      radiusBottom: b,
      height: c,
      radialSegments: d,
      heightSegments: e,
      openEnded: f,
      thetaStart: g,
      thetaLength: h
    };
    this.fromBufferGeometry(new $a(a, b, c, d, e, f, g, h));
    this.mergeVertices();
  }

  function $a(a, b, c, d, e, f, g, h) {
    function k(c) {
      var e,
          f = new z(),
          k = new p(),
          r = 0,
          u = !0 === c ? a : b,
          v = !0 === c ? 1 : -1;
      var C = t;

      for (e = 1; e <= d; e++) {
        n.push(0, w * v, 0), l.push(0, v, 0), x.push(.5, .5), t++;
      }

      var D = t;

      for (e = 0; e <= d; e++) {
        var E = e / d * h + g,
            F = Math.cos(E);
        E = Math.sin(E);
        k.x = u * E;
        k.y = w * v;
        k.z = u * F;
        n.push(k.x, k.y, k.z);
        l.push(0, v, 0);
        f.x = .5 * F + .5;
        f.y = .5 * E * v + .5;
        x.push(f.x, f.y);
        t++;
      }

      for (e = 0; e < d; e++) {
        f = C + e, k = D + e, !0 === c ? q.push(k, k + 1, f) : q.push(k + 1, k, f), r += 3;
      }

      m.addGroup(A, r, !0 === c ? 1 : 2);
      A += r;
    }

    E.call(this);
    this.type = "CylinderBufferGeometry";
    this.parameters = {
      radiusTop: a,
      radiusBottom: b,
      height: c,
      radialSegments: d,
      heightSegments: e,
      openEnded: f,
      thetaStart: g,
      thetaLength: h
    };
    var m = this;
    a = void 0 !== a ? a : 1;
    b = void 0 !== b ? b : 1;
    c = c || 1;
    d = Math.floor(d) || 8;
    e = Math.floor(e) || 1;
    f = void 0 !== f ? f : !1;
    g = void 0 !== g ? g : 0;
    h = void 0 !== h ? h : 2 * Math.PI;
    var q = [],
        n = [],
        l = [],
        x = [],
        t = 0,
        u = [],
        w = c / 2,
        A = 0;

    (function () {
      var f,
          k,
          r = new p(),
          N = new p(),
          z = 0,
          B = (b - a) / c;

      for (k = 0; k <= e; k++) {
        var C = [],
            E = k / e,
            D = E * (b - a) + a;

        for (f = 0; f <= d; f++) {
          var F = f / d,
              G = F * h + g,
              J = Math.sin(G);
          G = Math.cos(G);
          N.x = D * J;
          N.y = -E * c + w;
          N.z = D * G;
          n.push(N.x, N.y, N.z);
          r.set(J, B, G).normalize();
          l.push(r.x, r.y, r.z);
          x.push(F, 1 - E);
          C.push(t++);
        }

        u.push(C);
      }

      for (f = 0; f < d; f++) {
        for (k = 0; k < e; k++) {
          r = u[k + 1][f], N = u[k + 1][f + 1], B = u[k][f + 1], q.push(u[k][f], r, B), q.push(r, N, B), z += 6;
        }
      }

      m.addGroup(A, z, 0);
      A += z;
    })();

    !1 === f && (0 < a && k(!0), 0 < b && k(!1));
    this.setIndex(q);
    this.addAttribute("position", new C(n, 3));
    this.addAttribute("normal", new C(l, 3));
    this.addAttribute("uv", new C(x, 2));
  }

  function $c(a, b, c, d, e, f, g) {
    zb.call(this, 0, a, b, c, d, e, f, g);
    this.type = "ConeGeometry";
    this.parameters = {
      radius: a,
      height: b,
      radialSegments: c,
      heightSegments: d,
      openEnded: e,
      thetaStart: f,
      thetaLength: g
    };
  }

  function ad(a, b, c, d, e, f, g) {
    $a.call(this, 0, a, b, c, d, e, f, g);
    this.type = "ConeBufferGeometry";
    this.parameters = {
      radius: a,
      height: b,
      radialSegments: c,
      heightSegments: d,
      openEnded: e,
      thetaStart: f,
      thetaLength: g
    };
  }

  function bd(a, b, c, d) {
    I.call(this);
    this.type = "CircleGeometry";
    this.parameters = {
      radius: a,
      segments: b,
      thetaStart: c,
      thetaLength: d
    };
    this.fromBufferGeometry(new fc(a, b, c, d));
    this.mergeVertices();
  }

  function fc(a, b, c, d) {
    E.call(this);
    this.type = "CircleBufferGeometry";
    this.parameters = {
      radius: a,
      segments: b,
      thetaStart: c,
      thetaLength: d
    };
    a = a || 1;
    b = void 0 !== b ? Math.max(3, b) : 8;
    c = void 0 !== c ? c : 0;
    d = void 0 !== d ? d : 2 * Math.PI;
    var e = [],
        f = [],
        g = [],
        h = [],
        k,
        m = new p(),
        q = new z();
    f.push(0, 0, 0);
    g.push(0, 0, 1);
    h.push(.5, .5);
    var n = 0;

    for (k = 3; n <= b; n++, k += 3) {
      var l = c + n / b * d;
      m.x = a * Math.cos(l);
      m.y = a * Math.sin(l);
      f.push(m.x, m.y, m.z);
      g.push(0, 0, 1);
      q.x = (f[k] / a + 1) / 2;
      q.y = (f[k + 1] / a + 1) / 2;
      h.push(q.x, q.y);
    }

    for (k = 1; k <= b; k++) {
      e.push(k, k + 1, 0);
    }

    this.setIndex(e);
    this.addAttribute("position", new C(f, 3));
    this.addAttribute("normal", new C(g, 3));
    this.addAttribute("uv", new C(h, 2));
  }

  function Ab(a) {
    L.call(this);
    this.type = "ShadowMaterial";
    this.color = new G(0);
    this.transparent = !0;
    this.setValues(a);
  }

  function gc(a) {
    ka.call(this, a);
    this.type = "RawShaderMaterial";
  }

  function Ta(a) {
    L.call(this);
    this.defines = {
      STANDARD: ""
    };
    this.type = "MeshStandardMaterial";
    this.color = new G(16777215);
    this.metalness = this.roughness = .5;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new G(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new z(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;
    this.envMapIntensity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(a);
  }

  function Bb(a) {
    Ta.call(this);
    this.defines = {
      PHYSICAL: ""
    };
    this.type = "MeshPhysicalMaterial";
    this.reflectivity = .5;
    this.clearCoatRoughness = this.clearCoat = 0;
    this.setValues(a);
  }

  function Ia(a) {
    L.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new G(16777215);
    this.specular = new G(1118481);
    this.shininess = 30;
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new G(0);
    this.emissiveIntensity = 1;
    this.bumpMap = this.emissiveMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new z(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(a);
  }

  function Cb(a) {
    Ia.call(this);
    this.defines = {
      TOON: ""
    };
    this.type = "MeshToonMaterial";
    this.gradientMap = null;
    this.setValues(a);
  }

  function Db(a) {
    L.call(this);
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new z(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphNormals = this.morphTargets = this.skinning = this.lights = this.fog = !1;
    this.setValues(a);
  }

  function Eb(a) {
    L.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new G(16777215);
    this.lightMap = this.map = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new G(0);
    this.emissiveIntensity = 1;
    this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;
    this.combine = 0;
    this.reflectivity = 1;
    this.refractionRatio = .98;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(a);
  }

  function Fb(a) {
    L.call(this);
    this.defines = {
      MATCAP: ""
    };
    this.type = "MeshMatcapMaterial";
    this.color = new G(16777215);
    this.bumpMap = this.map = this.matcap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = 0;
    this.normalScale = new z(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.lights = this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(a);

    if (null === this.matcap) {
      a = document.createElement("canvas");
      a.width = 1;
      a.height = 1;
      var b = a.getContext("2d");
      b.fillStyle = "#fff";
      b.fillRect(0, 0, 1, 1);
      this.matcap = new THREE.CanvasTexture(a);
    }
  }

  function Gb(a) {
    T.call(this);
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(a);
  }

  function Ca(a, b, c, d) {
    this.parameterPositions = a;
    this._cachedIndex = 0;
    this.resultBuffer = void 0 !== d ? d : new b.constructor(c);
    this.sampleValues = b;
    this.valueSize = c;
  }

  function Ad(a, b, c, d) {
    Ca.call(this, a, b, c, d);
    this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
  }

  function cd(a, b, c, d) {
    Ca.call(this, a, b, c, d);
  }

  function Bd(a, b, c, d) {
    Ca.call(this, a, b, c, d);
  }

  function qa(a, b, c, d) {
    if (void 0 === a) throw Error("THREE.KeyframeTrack: track name is undefined");
    if (void 0 === b || 0 === b.length) throw Error("THREE.KeyframeTrack: no keyframes in track named " + a);
    this.name = a;
    this.times = ra.convertArray(b, this.TimeBufferType);
    this.values = ra.convertArray(c, this.ValueBufferType);
    this.setInterpolation(d || this.DefaultInterpolation);
  }

  function Cd(a, b, c) {
    qa.call(this, a, b, c);
  }

  function Dd(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }

  function hc(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }

  function Ed(a, b, c, d) {
    Ca.call(this, a, b, c, d);
  }

  function dd(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }

  function Fd(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }

  function ic(a, b, c, d) {
    qa.call(this, a, b, c, d);
  }

  function za(a, b, c) {
    this.name = a;
    this.tracks = c;
    this.duration = void 0 !== b ? b : -1;
    this.uuid = R.generateUUID();
    0 > this.duration && this.resetDuration();
  }

  function Yg(a) {
    switch (a.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return hc;

      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return ic;

      case "color":
        return Dd;

      case "quaternion":
        return dd;

      case "bool":
      case "boolean":
        return Cd;

      case "string":
        return Fd;
    }

    throw Error("THREE.KeyframeTrack: Unsupported typeName: " + a);
  }

  function Zg(a) {
    if (void 0 === a.type) throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
    var b = Yg(a.type);

    if (void 0 === a.times) {
      var c = [],
          d = [];
      ra.flattenJSON(a.keys, c, d, "value");
      a.times = c;
      a.values = d;
    }

    return void 0 !== b.parse ? b.parse(a) : new b(a.name, a.times, a.values, a.interpolation);
  }

  function ge(a, b, c) {
    var d = this,
        e = !1,
        f = 0,
        g = 0,
        h = void 0;
    this.onStart = void 0;
    this.onLoad = a;
    this.onProgress = b;
    this.onError = c;

    this.itemStart = function (a) {
      g++;
      if (!1 === e && void 0 !== d.onStart) d.onStart(a, f, g);
      e = !0;
    };

    this.itemEnd = function (a) {
      f++;
      if (void 0 !== d.onProgress) d.onProgress(a, f, g);
      if (f === g && (e = !1, void 0 !== d.onLoad)) d.onLoad();
    };

    this.itemError = function (a) {
      if (void 0 !== d.onError) d.onError(a);
    };

    this.resolveURL = function (a) {
      return h ? h(a) : a;
    };

    this.setURLModifier = function (a) {
      h = a;
      return this;
    };
  }

  function Fa(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function rf(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function sf(a) {
    this.manager = void 0 !== a ? a : ta;
    this._parser = null;
  }

  function he(a) {
    this.manager = void 0 !== a ? a : ta;
    this._parser = null;
  }

  function ed(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function ie(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function Gd(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function Q() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }

  function wa(a, b, c, d, e, f, g, h) {
    Q.call(this);
    this.type = "EllipseCurve";
    this.aX = a || 0;
    this.aY = b || 0;
    this.xRadius = c || 1;
    this.yRadius = d || 1;
    this.aStartAngle = e || 0;
    this.aEndAngle = f || 2 * Math.PI;
    this.aClockwise = g || !1;
    this.aRotation = h || 0;
  }

  function jc(a, b, c, d, e, f) {
    wa.call(this, a, b, c, c, d, e, f);
    this.type = "ArcCurve";
  }

  function je() {
    var a = 0,
        b = 0,
        c = 0,
        d = 0;
    return {
      initCatmullRom: function initCatmullRom(e, f, g, h, k) {
        e = k * (g - e);
        h = k * (h - f);
        a = f;
        b = e;
        c = -3 * f + 3 * g - 2 * e - h;
        d = 2 * f - 2 * g + e + h;
      },
      initNonuniformCatmullRom: function initNonuniformCatmullRom(e, f, g, h, k, m, q) {
        e = ((f - e) / k - (g - e) / (k + m) + (g - f) / m) * m;
        h = ((g - f) / m - (h - f) / (m + q) + (h - g) / q) * m;
        a = f;
        b = e;
        c = -3 * f + 3 * g - 2 * e - h;
        d = 2 * f - 2 * g + e + h;
      },
      calc: function calc(e) {
        var f = e * e;
        return a + b * e + c * f + d * f * e;
      }
    };
  }

  function ua(a, b, c, d) {
    Q.call(this);
    this.type = "CatmullRomCurve3";
    this.points = a || [];
    this.closed = b || !1;
    this.curveType = c || "centripetal";
    this.tension = d || .5;
  }

  function tf(a, b, c, d, e) {
    b = .5 * (d - b);
    e = .5 * (e - c);
    var f = a * a;
    return (2 * c - 2 * d + b + e) * a * f + (-3 * c + 3 * d - 2 * b - e) * f + b * a + c;
  }

  function fd(a, b, c, d) {
    var e = 1 - a;
    return e * e * b + 2 * (1 - a) * a * c + a * a * d;
  }

  function gd(a, b, c, d, e) {
    var f = 1 - a,
        g = 1 - a;
    return f * f * f * b + 3 * g * g * a * c + 3 * (1 - a) * a * a * d + a * a * a * e;
  }

  function Ja(a, b, c, d) {
    Q.call(this);
    this.type = "CubicBezierCurve";
    this.v0 = a || new z();
    this.v1 = b || new z();
    this.v2 = c || new z();
    this.v3 = d || new z();
  }

  function Ua(a, b, c, d) {
    Q.call(this);
    this.type = "CubicBezierCurve3";
    this.v0 = a || new p();
    this.v1 = b || new p();
    this.v2 = c || new p();
    this.v3 = d || new p();
  }

  function Aa(a, b) {
    Q.call(this);
    this.type = "LineCurve";
    this.v1 = a || new z();
    this.v2 = b || new z();
  }

  function Ka(a, b) {
    Q.call(this);
    this.type = "LineCurve3";
    this.v1 = a || new p();
    this.v2 = b || new p();
  }

  function La(a, b, c) {
    Q.call(this);
    this.type = "QuadraticBezierCurve";
    this.v0 = a || new z();
    this.v1 = b || new z();
    this.v2 = c || new z();
  }

  function Va(a, b, c) {
    Q.call(this);
    this.type = "QuadraticBezierCurve3";
    this.v0 = a || new p();
    this.v1 = b || new p();
    this.v2 = c || new p();
  }

  function Ma(a) {
    Q.call(this);
    this.type = "SplineCurve";
    this.points = a || [];
  }

  function ab() {
    Q.call(this);
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = !1;
  }

  function Na(a) {
    ab.call(this);
    this.type = "Path";
    this.currentPoint = new z();
    a && this.setFromPoints(a);
  }

  function ib(a) {
    Na.call(this, a);
    this.uuid = R.generateUUID();
    this.type = "Shape";
    this.holes = [];
  }

  function ca(a, b) {
    D.call(this);
    this.type = "Light";
    this.color = new G(a);
    this.intensity = void 0 !== b ? b : 1;
    this.receiveShadow = void 0;
  }

  function Hd(a, b, c) {
    ca.call(this, a, c);
    this.type = "HemisphereLight";
    this.castShadow = void 0;
    this.position.copy(D.DefaultUp);
    this.updateMatrix();
    this.groundColor = new G(b);
  }

  function Hb(a) {
    this.camera = a;
    this.bias = 0;
    this.radius = 1;
    this.mapSize = new z(512, 512);
    this.map = null;
    this.matrix = new P();
  }

  function Id() {
    Hb.call(this, new V(50, 1, .5, 500));
  }

  function Jd(a, b, c, d, e, f) {
    ca.call(this, a, b);
    this.type = "SpotLight";
    this.position.copy(D.DefaultUp);
    this.updateMatrix();
    this.target = new D();
    Object.defineProperty(this, "power", {
      get: function get() {
        return this.intensity * Math.PI;
      },
      set: function set(a) {
        this.intensity = a / Math.PI;
      }
    });
    this.distance = void 0 !== c ? c : 0;
    this.angle = void 0 !== d ? d : Math.PI / 3;
    this.penumbra = void 0 !== e ? e : 0;
    this.decay = void 0 !== f ? f : 1;
    this.shadow = new Id();
  }

  function Kd(a, b, c, d) {
    ca.call(this, a, b);
    this.type = "PointLight";
    Object.defineProperty(this, "power", {
      get: function get() {
        return 4 * this.intensity * Math.PI;
      },
      set: function set(a) {
        this.intensity = a / (4 * Math.PI);
      }
    });
    this.distance = void 0 !== c ? c : 0;
    this.decay = void 0 !== d ? d : 1;
    this.shadow = new Hb(new V(90, 1, .5, 500));
  }

  function hd(a, b, c, d, e, f) {
    Ra.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = void 0 !== a ? a : -1;
    this.right = void 0 !== b ? b : 1;
    this.top = void 0 !== c ? c : 1;
    this.bottom = void 0 !== d ? d : -1;
    this.near = void 0 !== e ? e : .1;
    this.far = void 0 !== f ? f : 2E3;
    this.updateProjectionMatrix();
  }

  function Ld() {
    Hb.call(this, new hd(-5, 5, 5, -5, .5, 500));
  }

  function Md(a, b) {
    ca.call(this, a, b);
    this.type = "DirectionalLight";
    this.position.copy(D.DefaultUp);
    this.updateMatrix();
    this.target = new D();
    this.shadow = new Ld();
  }

  function Nd(a, b) {
    ca.call(this, a, b);
    this.type = "AmbientLight";
    this.castShadow = void 0;
  }

  function Od(a, b, c, d) {
    ca.call(this, a, b);
    this.type = "RectAreaLight";
    this.width = void 0 !== c ? c : 10;
    this.height = void 0 !== d ? d : 10;
  }

  function Pd(a) {
    this.manager = void 0 !== a ? a : ta;
    this.textures = {};
  }

  function ke(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function kc() {}

  function Qd(a) {
    "boolean" === typeof a && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), a = void 0);
    this.manager = void 0 !== a ? a : ta;
    this.withCredentials = !1;
  }

  function le(a) {
    this.manager = void 0 !== a ? a : ta;
    this.resourcePath = "";
  }

  function me(a) {
    "undefined" === typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    "undefined" === typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    this.manager = void 0 !== a ? a : ta;
    this.options = void 0;
  }

  function ne() {
    this.type = "ShapePath";
    this.color = new G();
    this.subPaths = [];
    this.currentPath = null;
  }

  function oe(a) {
    this.type = "Font";
    this.data = a;
  }

  function uf(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function pe(a) {
    this.manager = void 0 !== a ? a : ta;
  }

  function vf() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = .064;
    this.cameraL = new V();
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = !1;
    this.cameraR = new V();
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = !1;
  }

  function id(a, b, c, d) {
    D.call(this);
    this.type = "CubeCamera";
    var e = new V(90, 1, a, b);
    e.up.set(0, -1, 0);
    e.lookAt(new p(1, 0, 0));
    this.add(e);
    var f = new V(90, 1, a, b);
    f.up.set(0, -1, 0);
    f.lookAt(new p(-1, 0, 0));
    this.add(f);
    var g = new V(90, 1, a, b);
    g.up.set(0, 0, 1);
    g.lookAt(new p(0, 1, 0));
    this.add(g);
    var h = new V(90, 1, a, b);
    h.up.set(0, 0, -1);
    h.lookAt(new p(0, -1, 0));
    this.add(h);
    var k = new V(90, 1, a, b);
    k.up.set(0, -1, 0);
    k.lookAt(new p(0, 0, 1));
    this.add(k);
    var m = new V(90, 1, a, b);
    m.up.set(0, -1, 0);
    m.lookAt(new p(0, 0, -1));
    this.add(m);
    d = d || {
      format: 1022,
      magFilter: 1006,
      minFilter: 1006
    };
    this.renderTarget = new Jb(c, c, d);
    this.renderTarget.texture.name = "CubeCamera";

    this.update = function (a, b) {
      null === this.parent && this.updateMatrixWorld();
      var c = this.renderTarget,
          d = c.texture.generateMipmaps;
      c.texture.generateMipmaps = !1;
      c.activeCubeFace = 0;
      a.render(b, e, c);
      c.activeCubeFace = 1;
      a.render(b, f, c);
      c.activeCubeFace = 2;
      a.render(b, g, c);
      c.activeCubeFace = 3;
      a.render(b, h, c);
      c.activeCubeFace = 4;
      a.render(b, k, c);
      c.texture.generateMipmaps = d;
      c.activeCubeFace = 5;
      a.render(b, m, c);
      a.setRenderTarget(null);
    };

    this.clear = function (a, b, c, d) {
      for (var e = this.renderTarget, f = 0; 6 > f; f++) {
        e.activeCubeFace = f, a.setRenderTarget(e), a.clear(b, c, d);
      }

      a.setRenderTarget(null);
    };
  }

  function qe(a) {
    this.autoStart = void 0 !== a ? a : !0;
    this.elapsedTime = this.oldTime = this.startTime = 0;
    this.running = !1;
  }

  function re() {
    D.call(this);
    this.type = "AudioListener";
    this.context = se.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
    this.timeDelta = 0;
  }

  function lc(a) {
    D.call(this);
    this.type = "Audio";
    this.listener = a;
    this.context = a.context;
    this.gain = this.context.createGain();
    this.gain.connect(a.getInput());
    this.autoplay = !1;
    this.buffer = null;
    this.loop = !1;
    this.offset = this.startTime = 0;
    this.playbackRate = 1;
    this.isPlaying = !1;
    this.hasPlaybackControl = !0;
    this.sourceType = "empty";
    this.filters = [];
  }

  function te(a) {
    lc.call(this, a);
    this.panner = this.context.createPanner();
    this.panner.connect(this.gain);
  }

  function ue(a, b) {
    this.analyser = a.context.createAnalyser();
    this.analyser.fftSize = void 0 !== b ? b : 2048;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    a.getOutput().connect(this.analyser);
  }

  function ve(a, b, c) {
    this.binding = a;
    this.valueSize = c;
    a = Float64Array;

    switch (b) {
      case "quaternion":
        b = this._slerp;
        break;

      case "string":
      case "bool":
        a = Array;
        b = this._select;
        break;

      default:
        b = this._lerp;
    }

    this.buffer = new a(4 * c);
    this._mixBufferRegion = b;
    this.referenceCount = this.useCount = this.cumulativeWeight = 0;
  }

  function wf(a, b, c) {
    c = c || oa.parseTrackName(b);
    this._targetGroup = a;
    this._bindings = a.subscribe_(b, c);
  }

  function oa(a, b, c) {
    this.path = b;
    this.parsedPath = c || oa.parseTrackName(b);
    this.node = oa.findNode(a, this.parsedPath.nodeName) || a;
    this.rootNode = a;
  }

  function xf() {
    this.uuid = R.generateUUID();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    var a = {};
    this._indicesByUUID = a;

    for (var b = 0, c = arguments.length; b !== c; ++b) {
      a[arguments[b].uuid] = b;
    }

    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    var d = this;
    this.stats = {
      objects: {
        get total() {
          return d._objects.length;
        },

        get inUse() {
          return this.total - d.nCachedObjects_;
        }

      },

      get bindingsPerObject() {
        return d._bindings.length;
      }

    };
  }

  function yf(a, b, c) {
    this._mixer = a;
    this._clip = b;
    this._localRoot = c || null;
    a = b.tracks;
    b = a.length;
    c = Array(b);

    for (var d = {
      endingStart: 2400,
      endingEnd: 2400
    }, e = 0; e !== b; ++e) {
      var f = a[e].createInterpolant(null);
      c[e] = f;
      f.settings = d;
    }

    this._interpolantSettings = d;
    this._interpolants = c;
    this._propertyBindings = Array(b);
    this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;
    this.loop = 2201;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;
    this.repetitions = Infinity;
    this.paused = !1;
    this.enabled = !0;
    this.clampWhenFinished = !1;
    this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
  }

  function we(a) {
    this._root = a;

    this._initMemoryManager();

    this.time = this._accuIndex = 0;
    this.timeScale = 1;
  }

  function Rd(a, b) {
    "string" === typeof a && (console.warn("THREE.Uniform: Type parameter is no longer needed."), a = b);
    this.value = a;
  }

  function xe() {
    E.call(this);
    this.type = "InstancedBufferGeometry";
    this.maxInstancedCount = void 0;
  }

  function ye(a, b, c) {
    sb.call(this, a, b);
    this.meshPerAttribute = c || 1;
  }

  function ze(a, b, c, d) {
    "number" === typeof c && (d = c, c = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));
    F.call(this, a, b, c);
    this.meshPerAttribute = d || 1;
  }

  function zf(a, b, c, d) {
    this.ray = new rb(a, b);
    this.near = c || 0;
    this.far = d || Infinity;
    this.params = {
      Mesh: {},
      Line: {},
      LOD: {},
      Points: {
        threshold: 1
      },
      Sprite: {}
    };
    Object.defineProperties(this.params, {
      PointCloud: {
        get: function get() {
          console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
          return this.Points;
        }
      }
    });
  }

  function Af(a, b) {
    return a.distance - b.distance;
  }

  function Ae(a, b, c, d) {
    if (!1 !== a.visible && (a.raycast(b, c), !0 === d)) {
      a = a.children;
      d = 0;

      for (var e = a.length; d < e; d++) {
        Ae(a[d], b, c, !0);
      }
    }
  }

  function Bf(a, b, c) {
    this.radius = void 0 !== a ? a : 1;
    this.phi = void 0 !== b ? b : 0;
    this.theta = void 0 !== c ? c : 0;
    return this;
  }

  function Cf(a, b, c) {
    this.radius = void 0 !== a ? a : 1;
    this.theta = void 0 !== b ? b : 0;
    this.y = void 0 !== c ? c : 0;
    return this;
  }

  function Be(a, b) {
    this.min = void 0 !== a ? a : new z(Infinity, Infinity);
    this.max = void 0 !== b ? b : new z(-Infinity, -Infinity);
  }

  function Ce(a, b) {
    this.start = void 0 !== a ? a : new p();
    this.end = void 0 !== b ? b : new p();
  }

  function jd(a) {
    D.call(this);
    this.material = a;

    this.render = function () {};
  }

  function kd(a, b, c, d) {
    this.object = a;
    this.size = void 0 !== b ? b : 1;
    a = void 0 !== c ? c : 16711680;
    d = void 0 !== d ? d : 1;
    b = 0;
    (c = this.object.geometry) && c.isGeometry ? b = 3 * c.faces.length : c && c.isBufferGeometry && (b = c.attributes.normal.count);
    c = new E();
    b = new C(6 * b, 3);
    c.addAttribute("position", b);
    S.call(this, c, new T({
      color: a,
      linewidth: d
    }));
    this.matrixAutoUpdate = !1;
    this.update();
  }

  function mc(a, b) {
    D.call(this);
    this.light = a;
    this.light.updateMatrixWorld();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = b;
    a = new E();
    b = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];

    for (var c = 0, d = 1; 32 > c; c++, d++) {
      var e = c / 32 * Math.PI * 2,
          f = d / 32 * Math.PI * 2;
      b.push(Math.cos(e), Math.sin(e), 1, Math.cos(f), Math.sin(f), 1);
    }

    a.addAttribute("position", new C(b, 3));
    b = new T({
      fog: !1
    });
    this.cone = new S(a, b);
    this.add(this.cone);
    this.update();
  }

  function Df(a) {
    var b = [];
    a && a.isBone && b.push(a);

    for (var c = 0; c < a.children.length; c++) {
      b.push.apply(b, Df(a.children[c]));
    }

    return b;
  }

  function nc(a) {
    for (var b = Df(a), c = new E(), d = [], e = [], f = new G(0, 0, 1), g = new G(0, 1, 0), h = 0; h < b.length; h++) {
      var k = b[h];
      k.parent && k.parent.isBone && (d.push(0, 0, 0), d.push(0, 0, 0), e.push(f.r, f.g, f.b), e.push(g.r, g.g, g.b));
    }

    c.addAttribute("position", new C(d, 3));
    c.addAttribute("color", new C(e, 3));
    d = new T({
      vertexColors: 2,
      depthTest: !1,
      depthWrite: !1,
      transparent: !0
    });
    S.call(this, c, d);
    this.root = a;
    this.bones = b;
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
  }

  function oc(a, b, c) {
    this.light = a;
    this.light.updateMatrixWorld();
    this.color = c;
    a = new wb(b, 4, 2);
    b = new Ea({
      wireframe: !0,
      fog: !1
    });
    pa.call(this, a, b);
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.update();
  }

  function pc(a, b) {
    D.call(this);
    this.light = a;
    this.light.updateMatrixWorld();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = b;
    a = new T({
      fog: !1
    });
    b = new E();
    b.addAttribute("position", new F(new Float32Array(15), 3));
    this.line = new ma(b, a);
    this.add(this.line);
    this.update();
  }

  function qc(a, b, c) {
    D.call(this);
    this.light = a;
    this.light.updateMatrixWorld();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = c;
    a = new tb(b);
    a.rotateY(.5 * Math.PI);
    this.material = new Ea({
      wireframe: !0,
      fog: !1
    });
    void 0 === this.color && (this.material.vertexColors = 2);
    b = a.getAttribute("position");
    b = new Float32Array(3 * b.count);
    a.addAttribute("color", new F(b, 3));
    this.add(new pa(a, this.material));
    this.update();
  }

  function ld(a, b, c, d) {
    a = a || 10;
    b = b || 10;
    c = new G(void 0 !== c ? c : 4473924);
    d = new G(void 0 !== d ? d : 8947848);
    var e = b / 2,
        f = a / b,
        g = a / 2;
    a = [];

    for (var h = [], k = 0, m = 0, q = -g; k <= b; k++, q += f) {
      a.push(-g, 0, q, g, 0, q);
      a.push(q, 0, -g, q, 0, g);
      var n = k === e ? c : d;
      n.toArray(h, m);
      m += 3;
      n.toArray(h, m);
      m += 3;
      n.toArray(h, m);
      m += 3;
      n.toArray(h, m);
      m += 3;
    }

    b = new E();
    b.addAttribute("position", new C(a, 3));
    b.addAttribute("color", new C(h, 3));
    c = new T({
      vertexColors: 2
    });
    S.call(this, b, c);
  }

  function Sd(a, b, c, d, e, f) {
    a = a || 10;
    b = b || 16;
    c = c || 8;
    d = d || 64;
    e = new G(void 0 !== e ? e : 4473924);
    f = new G(void 0 !== f ? f : 8947848);
    var g = [],
        h = [],
        k;

    for (k = 0; k <= b; k++) {
      var m = k / b * 2 * Math.PI;
      var q = Math.sin(m) * a;
      m = Math.cos(m) * a;
      g.push(0, 0, 0);
      g.push(q, 0, m);
      var n = k & 1 ? e : f;
      h.push(n.r, n.g, n.b);
      h.push(n.r, n.g, n.b);
    }

    for (k = 0; k <= c; k++) {
      n = k & 1 ? e : f;
      var l = a - a / c * k;

      for (b = 0; b < d; b++) {
        m = b / d * 2 * Math.PI, q = Math.sin(m) * l, m = Math.cos(m) * l, g.push(q, 0, m), h.push(n.r, n.g, n.b), m = (b + 1) / d * 2 * Math.PI, q = Math.sin(m) * l, m = Math.cos(m) * l, g.push(q, 0, m), h.push(n.r, n.g, n.b);
      }
    }

    a = new E();
    a.addAttribute("position", new C(g, 3));
    a.addAttribute("color", new C(h, 3));
    g = new T({
      vertexColors: 2
    });
    S.call(this, a, g);
  }

  function md(a, b, c, d) {
    this.object = a;
    this.size = void 0 !== b ? b : 1;
    a = void 0 !== c ? c : 16776960;
    d = void 0 !== d ? d : 1;
    b = 0;
    (c = this.object.geometry) && c.isGeometry ? b = c.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
    c = new E();
    b = new C(6 * b, 3);
    c.addAttribute("position", b);
    S.call(this, c, new T({
      color: a,
      linewidth: d
    }));
    this.matrixAutoUpdate = !1;
    this.update();
  }

  function rc(a, b, c) {
    D.call(this);
    this.light = a;
    this.light.updateMatrixWorld();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.color = c;
    void 0 === b && (b = 1);
    a = new E();
    a.addAttribute("position", new C([-b, b, 0, b, b, 0, b, -b, 0, -b, -b, 0, -b, b, 0], 3));
    b = new T({
      fog: !1
    });
    this.lightPlane = new ma(a, b);
    this.add(this.lightPlane);
    a = new E();
    a.addAttribute("position", new C([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new ma(a, b);
    this.add(this.targetLine);
    this.update();
  }

  function nd(a) {
    function b(a, b, d) {
      c(a, d);
      c(b, d);
    }

    function c(a, b) {
      f.push(0, 0, 0);
      g.push(b.r, b.g, b.b);
      void 0 === h[a] && (h[a] = []);
      h[a].push(f.length / 3 - 1);
    }

    var d = new E(),
        e = new T({
      color: 16777215,
      vertexColors: 1
    }),
        f = [],
        g = [],
        h = {},
        k = new G(16755200),
        m = new G(16711680),
        q = new G(43775),
        l = new G(16777215),
        r = new G(3355443);
    b("n1", "n2", k);
    b("n2", "n4", k);
    b("n4", "n3", k);
    b("n3", "n1", k);
    b("f1", "f2", k);
    b("f2", "f4", k);
    b("f4", "f3", k);
    b("f3", "f1", k);
    b("n1", "f1", k);
    b("n2", "f2", k);
    b("n3", "f3", k);
    b("n4", "f4", k);
    b("p", "n1", m);
    b("p", "n2", m);
    b("p", "n3", m);
    b("p", "n4", m);
    b("u1", "u2", q);
    b("u2", "u3", q);
    b("u3", "u1", q);
    b("c", "t", l);
    b("p", "c", r);
    b("cn1", "cn2", r);
    b("cn3", "cn4", r);
    b("cf1", "cf2", r);
    b("cf3", "cf4", r);
    d.addAttribute("position", new C(f, 3));
    d.addAttribute("color", new C(g, 3));
    S.call(this, d, e);
    this.camera = a;
    this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.pointMap = h;
    this.update();
  }

  function bb(a, b) {
    this.object = a;
    void 0 === b && (b = 16776960);
    a = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var c = new Float32Array(24),
        d = new E();
    d.setIndex(new F(a, 1));
    d.addAttribute("position", new F(c, 3));
    S.call(this, d, new T({
      color: b
    }));
    this.matrixAutoUpdate = !1;
    this.update();
  }

  function od(a, b) {
    this.type = "Box3Helper";
    this.box = a;
    a = void 0 !== b ? b : 16776960;
    b = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var c = new E();
    c.setIndex(new F(b, 1));
    c.addAttribute("position", new C([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3));
    S.call(this, c, new T({
      color: a
    }));
    this.geometry.computeBoundingSphere();
  }

  function pd(a, b, c) {
    this.type = "PlaneHelper";
    this.plane = a;
    this.size = void 0 === b ? 1 : b;
    a = void 0 !== c ? c : 16776960;
    b = new E();
    b.addAttribute("position", new C([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3));
    b.computeBoundingSphere();
    ma.call(this, b, new T({
      color: a
    }));
    b = new E();
    b.addAttribute("position", new C([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3));
    b.computeBoundingSphere();
    this.add(new pa(b, new Ea({
      color: a,
      opacity: .2,
      transparent: !0,
      depthWrite: !1
    })));
  }

  function cb(a, b, c, d, e, f) {
    D.call(this);
    void 0 === a && (a = new THREE.Vector3(0, 0, 1));
    void 0 === b && (b = new THREE.Vector3(0, 0, 0));
    void 0 === c && (c = 1);
    void 0 === d && (d = 16776960);
    void 0 === e && (e = .2 * c);
    void 0 === f && (f = .2 * e);
    void 0 === Td && (Td = new E(), Td.addAttribute("position", new C([0, 0, 0, 0, 1, 0], 3)), De = new $a(0, .5, 1, 5, 1), De.translate(0, -.5, 0));
    this.position.copy(b);
    this.line = new ma(Td, new T({
      color: d
    }));
    this.line.matrixAutoUpdate = !1;
    this.add(this.line);
    this.cone = new pa(De, new Ea({
      color: d
    }));
    this.cone.matrixAutoUpdate = !1;
    this.add(this.cone);
    this.setDirection(a);
    this.setLength(c, e, f);
  }

  function qd(a) {
    a = a || 1;
    var b = [0, 0, 0, a, 0, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, a];
    a = new E();
    a.addAttribute("position", new C(b, 3));
    a.addAttribute("color", new C([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));
    b = new T({
      vertexColors: 2
    });
    S.call(this, a, b);
  }

  function Ef(a) {
    console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    ua.call(this, a);
    this.type = "catmullrom";
    this.closed = !0;
  }

  function Ff(a) {
    console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
    ua.call(this, a);
    this.type = "catmullrom";
  }

  function Ee(a) {
    console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
    ua.call(this, a);
    this.type = "catmullrom";
  }

  void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));
  void 0 === Number.isInteger && (Number.isInteger = function (a) {
    return "number" === typeof a && isFinite(a) && Math.floor(a) === a;
  });
  void 0 === Math.sign && (Math.sign = function (a) {
    return 0 > a ? -1 : 0 < a ? 1 : +a;
  });
  !1 === "name" in Function.prototype && Object.defineProperty(Function.prototype, "name", {
    get: function get() {
      return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
    }
  });
  void 0 === Object.assign && function () {
    Object.assign = function (a) {
      if (void 0 === a || null === a) throw new TypeError("Cannot convert undefined or null to object");

      for (var b = Object(a), c = 1; c < arguments.length; c++) {
        var d = arguments[c];
        if (void 0 !== d && null !== d) for (var e in d) {
          Object.prototype.hasOwnProperty.call(d, e) && (b[e] = d[e]);
        }
      }

      return b;
    };
  }();
  Object.assign(ia.prototype, {
    addEventListener: function addEventListener(a, b) {
      void 0 === this._listeners && (this._listeners = {});
      var c = this._listeners;
      void 0 === c[a] && (c[a] = []);
      -1 === c[a].indexOf(b) && c[a].push(b);
    },
    hasEventListener: function hasEventListener(a, b) {
      if (void 0 === this._listeners) return !1;
      var c = this._listeners;
      return void 0 !== c[a] && -1 !== c[a].indexOf(b);
    },
    removeEventListener: function removeEventListener(a, b) {
      void 0 !== this._listeners && (a = this._listeners[a], void 0 !== a && (b = a.indexOf(b), -1 !== b && a.splice(b, 1)));
    },
    dispatchEvent: function dispatchEvent(a) {
      if (void 0 !== this._listeners) {
        var b = this._listeners[a.type];

        if (void 0 !== b) {
          a.target = this;
          b = b.slice(0);

          for (var c = 0, d = b.length; c < d; c++) {
            b[c].call(this, a);
          }
        }
      }
    }
  });
  var R = {
    DEG2RAD: Math.PI / 180,
    RAD2DEG: 180 / Math.PI,
    generateUUID: function () {
      for (var a = [], b = 0; 256 > b; b++) {
        a[b] = (16 > b ? "0" : "") + b.toString(16);
      }

      return function () {
        var b = 4294967295 * Math.random() | 0,
            d = 4294967295 * Math.random() | 0,
            e = 4294967295 * Math.random() | 0,
            f = 4294967295 * Math.random() | 0;
        return (a[b & 255] + a[b >> 8 & 255] + a[b >> 16 & 255] + a[b >> 24 & 255] + "-" + a[d & 255] + a[d >> 8 & 255] + "-" + a[d >> 16 & 15 | 64] + a[d >> 24 & 255] + "-" + a[e & 63 | 128] + a[e >> 8 & 255] + "-" + a[e >> 16 & 255] + a[e >> 24 & 255] + a[f & 255] + a[f >> 8 & 255] + a[f >> 16 & 255] + a[f >> 24 & 255]).toUpperCase();
      };
    }(),
    clamp: function clamp(a, b, c) {
      return Math.max(b, Math.min(c, a));
    },
    euclideanModulo: function euclideanModulo(a, b) {
      return (a % b + b) % b;
    },
    mapLinear: function mapLinear(a, b, c, d, e) {
      return d + (a - b) * (e - d) / (c - b);
    },
    lerp: function lerp(a, b, c) {
      return (1 - c) * a + c * b;
    },
    smoothstep: function smoothstep(a, b, c) {
      if (a <= b) return 0;
      if (a >= c) return 1;
      a = (a - b) / (c - b);
      return a * a * (3 - 2 * a);
    },
    smootherstep: function smootherstep(a, b, c) {
      if (a <= b) return 0;
      if (a >= c) return 1;
      a = (a - b) / (c - b);
      return a * a * a * (a * (6 * a - 15) + 10);
    },
    randInt: function randInt(a, b) {
      return a + Math.floor(Math.random() * (b - a + 1));
    },
    randFloat: function randFloat(a, b) {
      return a + Math.random() * (b - a);
    },
    randFloatSpread: function randFloatSpread(a) {
      return a * (.5 - Math.random());
    },
    degToRad: function degToRad(a) {
      return a * R.DEG2RAD;
    },
    radToDeg: function radToDeg(a) {
      return a * R.RAD2DEG;
    },
    isPowerOfTwo: function isPowerOfTwo(a) {
      return 0 === (a & a - 1) && 0 !== a;
    },
    ceilPowerOfTwo: function ceilPowerOfTwo(a) {
      return Math.pow(2, Math.ceil(Math.log(a) / Math.LN2));
    },
    floorPowerOfTwo: function floorPowerOfTwo(a) {
      return Math.pow(2, Math.floor(Math.log(a) / Math.LN2));
    }
  };
  Object.defineProperties(z.prototype, {
    width: {
      get: function get() {
        return this.x;
      },
      set: function set(a) {
        this.x = a;
      }
    },
    height: {
      get: function get() {
        return this.y;
      },
      set: function set(a) {
        this.y = a;
      }
    }
  });
  Object.assign(z.prototype, {
    isVector2: !0,
    set: function set(a, b) {
      this.x = a;
      this.y = b;
      return this;
    },
    setScalar: function setScalar(a) {
      this.y = this.x = a;
      return this;
    },
    setX: function setX(a) {
      this.x = a;
      return this;
    },
    setY: function setY(a) {
      this.y = a;
      return this;
    },
    setComponent: function setComponent(a, b) {
      switch (a) {
        case 0:
          this.x = b;
          break;

        case 1:
          this.y = b;
          break;

        default:
          throw Error("index is out of range: " + a);
      }

      return this;
    },
    getComponent: function getComponent(a) {
      switch (a) {
        case 0:
          return this.x;

        case 1:
          return this.y;

        default:
          throw Error("index is out of range: " + a);
      }
    },
    clone: function clone() {
      return new this.constructor(this.x, this.y);
    },
    copy: function copy(a) {
      this.x = a.x;
      this.y = a.y;
      return this;
    },
    add: function add(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
      this.x += a.x;
      this.y += a.y;
      return this;
    },
    addScalar: function addScalar(a) {
      this.x += a;
      this.y += a;
      return this;
    },
    addVectors: function addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    },
    addScaledVector: function addScaledVector(a, b) {
      this.x += a.x * b;
      this.y += a.y * b;
      return this;
    },
    sub: function sub(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
      this.x -= a.x;
      this.y -= a.y;
      return this;
    },
    subScalar: function subScalar(a) {
      this.x -= a;
      this.y -= a;
      return this;
    },
    subVectors: function subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    },
    multiply: function multiply(a) {
      this.x *= a.x;
      this.y *= a.y;
      return this;
    },
    multiplyScalar: function multiplyScalar(a) {
      this.x *= a;
      this.y *= a;
      return this;
    },
    divide: function divide(a) {
      this.x /= a.x;
      this.y /= a.y;
      return this;
    },
    divideScalar: function divideScalar(a) {
      return this.multiplyScalar(1 / a);
    },
    applyMatrix3: function applyMatrix3(a) {
      var b = this.x,
          c = this.y;
      a = a.elements;
      this.x = a[0] * b + a[3] * c + a[6];
      this.y = a[1] * b + a[4] * c + a[7];
      return this;
    },
    min: function min(a) {
      this.x = Math.min(this.x, a.x);
      this.y = Math.min(this.y, a.y);
      return this;
    },
    max: function max(a) {
      this.x = Math.max(this.x, a.x);
      this.y = Math.max(this.y, a.y);
      return this;
    },
    clamp: function clamp(a, b) {
      this.x = Math.max(a.x, Math.min(b.x, this.x));
      this.y = Math.max(a.y, Math.min(b.y, this.y));
      return this;
    },
    clampScalar: function () {
      var a = new z(),
          b = new z();
      return function (c, d) {
        a.set(c, c);
        b.set(d, d);
        return this.clamp(a, b);
      };
    }(),
    clampLength: function clampLength(a, b) {
      var c = this.length();
      return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
    },
    floor: function floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    },
    ceil: function ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    },
    round: function round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    },
    roundToZero: function roundToZero() {
      this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
      return this;
    },
    negate: function negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    },
    dot: function dot(a) {
      return this.x * a.x + this.y * a.y;
    },
    cross: function cross(a) {
      return this.x * a.y - this.y * a.x;
    },
    lengthSq: function lengthSq() {
      return this.x * this.x + this.y * this.y;
    },
    length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    manhattanLength: function manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    },
    normalize: function normalize() {
      return this.divideScalar(this.length() || 1);
    },
    angle: function angle() {
      var a = Math.atan2(this.y, this.x);
      0 > a && (a += 2 * Math.PI);
      return a;
    },
    distanceTo: function distanceTo(a) {
      return Math.sqrt(this.distanceToSquared(a));
    },
    distanceToSquared: function distanceToSquared(a) {
      var b = this.x - a.x;
      a = this.y - a.y;
      return b * b + a * a;
    },
    manhattanDistanceTo: function manhattanDistanceTo(a) {
      return Math.abs(this.x - a.x) + Math.abs(this.y - a.y);
    },
    setLength: function setLength(a) {
      return this.normalize().multiplyScalar(a);
    },
    lerp: function lerp(a, b) {
      this.x += (a.x - this.x) * b;
      this.y += (a.y - this.y) * b;
      return this;
    },
    lerpVectors: function lerpVectors(a, b, c) {
      return this.subVectors(b, a).multiplyScalar(c).add(a);
    },
    equals: function equals(a) {
      return a.x === this.x && a.y === this.y;
    },
    fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);
      this.x = a[b];
      this.y = a[b + 1];
      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      a[b] = this.x;
      a[b + 1] = this.y;
      return a;
    },
    fromBufferAttribute: function fromBufferAttribute(a, b, c) {
      void 0 !== c && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
      this.x = a.getX(b);
      this.y = a.getY(b);
      return this;
    },
    rotateAround: function rotateAround(a, b) {
      var c = Math.cos(b);
      b = Math.sin(b);
      var d = this.x - a.x,
          e = this.y - a.y;
      this.x = d * c - e * b + a.x;
      this.y = d * b + e * c + a.y;
      return this;
    }
  });
  Object.assign(P.prototype, {
    isMatrix4: !0,
    set: function set(a, b, c, d, e, f, g, h, k, m, q, l, r, p, t, u) {
      var n = this.elements;
      n[0] = a;
      n[4] = b;
      n[8] = c;
      n[12] = d;
      n[1] = e;
      n[5] = f;
      n[9] = g;
      n[13] = h;
      n[2] = k;
      n[6] = m;
      n[10] = q;
      n[14] = l;
      n[3] = r;
      n[7] = p;
      n[11] = t;
      n[15] = u;
      return this;
    },
    identity: function identity() {
      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    },
    clone: function clone() {
      return new P().fromArray(this.elements);
    },
    copy: function copy(a) {
      var b = this.elements;
      a = a.elements;
      b[0] = a[0];
      b[1] = a[1];
      b[2] = a[2];
      b[3] = a[3];
      b[4] = a[4];
      b[5] = a[5];
      b[6] = a[6];
      b[7] = a[7];
      b[8] = a[8];
      b[9] = a[9];
      b[10] = a[10];
      b[11] = a[11];
      b[12] = a[12];
      b[13] = a[13];
      b[14] = a[14];
      b[15] = a[15];
      return this;
    },
    copyPosition: function copyPosition(a) {
      var b = this.elements;
      a = a.elements;
      b[12] = a[12];
      b[13] = a[13];
      b[14] = a[14];
      return this;
    },
    extractBasis: function extractBasis(a, b, c) {
      a.setFromMatrixColumn(this, 0);
      b.setFromMatrixColumn(this, 1);
      c.setFromMatrixColumn(this, 2);
      return this;
    },
    makeBasis: function makeBasis(a, b, c) {
      this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);
      return this;
    },
    extractRotation: function () {
      var a = new p();
      return function (b) {
        var c = this.elements,
            d = b.elements,
            e = 1 / a.setFromMatrixColumn(b, 0).length(),
            f = 1 / a.setFromMatrixColumn(b, 1).length();
        b = 1 / a.setFromMatrixColumn(b, 2).length();
        c[0] = d[0] * e;
        c[1] = d[1] * e;
        c[2] = d[2] * e;
        c[3] = 0;
        c[4] = d[4] * f;
        c[5] = d[5] * f;
        c[6] = d[6] * f;
        c[7] = 0;
        c[8] = d[8] * b;
        c[9] = d[9] * b;
        c[10] = d[10] * b;
        c[11] = 0;
        c[12] = 0;
        c[13] = 0;
        c[14] = 0;
        c[15] = 1;
        return this;
      };
    }(),
    makeRotationFromEuler: function makeRotationFromEuler(a) {
      a && a.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
      var b = this.elements,
          c = a.x,
          d = a.y,
          e = a.z,
          f = Math.cos(c);
      c = Math.sin(c);
      var g = Math.cos(d);
      d = Math.sin(d);
      var h = Math.cos(e);
      e = Math.sin(e);

      if ("XYZ" === a.order) {
        a = f * h;
        var k = f * e,
            m = c * h,
            q = c * e;
        b[0] = g * h;
        b[4] = -g * e;
        b[8] = d;
        b[1] = k + m * d;
        b[5] = a - q * d;
        b[9] = -c * g;
        b[2] = q - a * d;
        b[6] = m + k * d;
        b[10] = f * g;
      } else "YXZ" === a.order ? (a = g * h, k = g * e, m = d * h, q = d * e, b[0] = a + q * c, b[4] = m * c - k, b[8] = f * d, b[1] = f * e, b[5] = f * h, b[9] = -c, b[2] = k * c - m, b[6] = q + a * c, b[10] = f * g) : "ZXY" === a.order ? (a = g * h, k = g * e, m = d * h, q = d * e, b[0] = a - q * c, b[4] = -f * e, b[8] = m + k * c, b[1] = k + m * c, b[5] = f * h, b[9] = q - a * c, b[2] = -f * d, b[6] = c, b[10] = f * g) : "ZYX" === a.order ? (a = f * h, k = f * e, m = c * h, q = c * e, b[0] = g * h, b[4] = m * d - k, b[8] = a * d + q, b[1] = g * e, b[5] = q * d + a, b[9] = k * d - m, b[2] = -d, b[6] = c * g, b[10] = f * g) : "YZX" === a.order ? (a = f * g, k = f * d, m = c * g, q = c * d, b[0] = g * h, b[4] = q - a * e, b[8] = m * e + k, b[1] = e, b[5] = f * h, b[9] = -c * h, b[2] = -d * h, b[6] = k * e + m, b[10] = a - q * e) : "XZY" === a.order && (a = f * g, k = f * d, m = c * g, q = c * d, b[0] = g * h, b[4] = -e, b[8] = d * h, b[1] = a * e + q, b[5] = f * h, b[9] = k * e - m, b[2] = m * e - k, b[6] = c * h, b[10] = q * e + a);

      b[3] = 0;
      b[7] = 0;
      b[11] = 0;
      b[12] = 0;
      b[13] = 0;
      b[14] = 0;
      b[15] = 1;
      return this;
    },
    makeRotationFromQuaternion: function () {
      var a = new p(0, 0, 0),
          b = new p(1, 1, 1);
      return function (c) {
        return this.compose(a, c, b);
      };
    }(),
    lookAt: function () {
      var a = new p(),
          b = new p(),
          c = new p();
      return function (d, e, f) {
        var g = this.elements;
        c.subVectors(d, e);
        0 === c.lengthSq() && (c.z = 1);
        c.normalize();
        a.crossVectors(f, c);
        0 === a.lengthSq() && (1 === Math.abs(f.z) ? c.x += 1E-4 : c.z += 1E-4, c.normalize(), a.crossVectors(f, c));
        a.normalize();
        b.crossVectors(c, a);
        g[0] = a.x;
        g[4] = b.x;
        g[8] = c.x;
        g[1] = a.y;
        g[5] = b.y;
        g[9] = c.y;
        g[2] = a.z;
        g[6] = b.z;
        g[10] = c.z;
        return this;
      };
    }(),
    multiply: function multiply(a, b) {
      return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
    },
    premultiply: function premultiply(a) {
      return this.multiplyMatrices(a, this);
    },
    multiplyMatrices: function multiplyMatrices(a, b) {
      var c = a.elements,
          d = b.elements;
      b = this.elements;
      a = c[0];
      var e = c[4],
          f = c[8],
          g = c[12],
          h = c[1],
          k = c[5],
          m = c[9],
          q = c[13],
          n = c[2],
          l = c[6],
          p = c[10],
          t = c[14],
          u = c[3],
          w = c[7],
          A = c[11];
      c = c[15];
      var v = d[0],
          H = d[4],
          y = d[8],
          N = d[12],
          z = d[1],
          B = d[5],
          C = d[9],
          E = d[13],
          D = d[2],
          F = d[6],
          G = d[10],
          J = d[14],
          L = d[3],
          I = d[7],
          K = d[11];
      d = d[15];
      b[0] = a * v + e * z + f * D + g * L;
      b[4] = a * H + e * B + f * F + g * I;
      b[8] = a * y + e * C + f * G + g * K;
      b[12] = a * N + e * E + f * J + g * d;
      b[1] = h * v + k * z + m * D + q * L;
      b[5] = h * H + k * B + m * F + q * I;
      b[9] = h * y + k * C + m * G + q * K;
      b[13] = h * N + k * E + m * J + q * d;
      b[2] = n * v + l * z + p * D + t * L;
      b[6] = n * H + l * B + p * F + t * I;
      b[10] = n * y + l * C + p * G + t * K;
      b[14] = n * N + l * E + p * J + t * d;
      b[3] = u * v + w * z + A * D + c * L;
      b[7] = u * H + w * B + A * F + c * I;
      b[11] = u * y + w * C + A * G + c * K;
      b[15] = u * N + w * E + A * J + c * d;
      return this;
    },
    multiplyScalar: function multiplyScalar(a) {
      var b = this.elements;
      b[0] *= a;
      b[4] *= a;
      b[8] *= a;
      b[12] *= a;
      b[1] *= a;
      b[5] *= a;
      b[9] *= a;
      b[13] *= a;
      b[2] *= a;
      b[6] *= a;
      b[10] *= a;
      b[14] *= a;
      b[3] *= a;
      b[7] *= a;
      b[11] *= a;
      b[15] *= a;
      return this;
    },
    applyToBufferAttribute: function () {
      var a = new p();
      return function (b) {
        for (var c = 0, d = b.count; c < d; c++) {
          a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix4(this), b.setXYZ(c, a.x, a.y, a.z);
        }

        return b;
      };
    }(),
    determinant: function determinant() {
      var a = this.elements,
          b = a[0],
          c = a[4],
          d = a[8],
          e = a[12],
          f = a[1],
          g = a[5],
          h = a[9],
          k = a[13],
          m = a[2],
          q = a[6],
          l = a[10],
          r = a[14];
      return a[3] * (+e * h * q - d * k * q - e * g * l + c * k * l + d * g * r - c * h * r) + a[7] * (+b * h * r - b * k * l + e * f * l - d * f * r + d * k * m - e * h * m) + a[11] * (+b * k * q - b * g * r - e * f * q + c * f * r + e * g * m - c * k * m) + a[15] * (-d * g * m - b * h * q + b * g * l + d * f * q - c * f * l + c * h * m);
    },
    transpose: function transpose() {
      var a = this.elements;
      var b = a[1];
      a[1] = a[4];
      a[4] = b;
      b = a[2];
      a[2] = a[8];
      a[8] = b;
      b = a[6];
      a[6] = a[9];
      a[9] = b;
      b = a[3];
      a[3] = a[12];
      a[12] = b;
      b = a[7];
      a[7] = a[13];
      a[13] = b;
      b = a[11];
      a[11] = a[14];
      a[14] = b;
      return this;
    },
    setPosition: function setPosition(a) {
      var b = this.elements;
      b[12] = a.x;
      b[13] = a.y;
      b[14] = a.z;
      return this;
    },
    getInverse: function getInverse(a, b) {
      var c = this.elements,
          d = a.elements;
      a = d[0];
      var e = d[1],
          f = d[2],
          g = d[3],
          h = d[4],
          k = d[5],
          m = d[6],
          q = d[7],
          l = d[8],
          r = d[9],
          p = d[10],
          t = d[11],
          u = d[12],
          w = d[13],
          A = d[14];
      d = d[15];
      var v = r * A * q - w * p * q + w * m * t - k * A * t - r * m * d + k * p * d,
          z = u * p * q - l * A * q - u * m * t + h * A * t + l * m * d - h * p * d,
          y = l * w * q - u * r * q + u * k * t - h * w * t - l * k * d + h * r * d,
          N = u * r * m - l * w * m - u * k * p + h * w * p + l * k * A - h * r * A,
          C = a * v + e * z + f * y + g * N;

      if (0 === C) {
        if (!0 === b) throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
        console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
        return this.identity();
      }

      b = 1 / C;
      c[0] = v * b;
      c[1] = (w * p * g - r * A * g - w * f * t + e * A * t + r * f * d - e * p * d) * b;
      c[2] = (k * A * g - w * m * g + w * f * q - e * A * q - k * f * d + e * m * d) * b;
      c[3] = (r * m * g - k * p * g - r * f * q + e * p * q + k * f * t - e * m * t) * b;
      c[4] = z * b;
      c[5] = (l * A * g - u * p * g + u * f * t - a * A * t - l * f * d + a * p * d) * b;
      c[6] = (u * m * g - h * A * g - u * f * q + a * A * q + h * f * d - a * m * d) * b;
      c[7] = (h * p * g - l * m * g + l * f * q - a * p * q - h * f * t + a * m * t) * b;
      c[8] = y * b;
      c[9] = (u * r * g - l * w * g - u * e * t + a * w * t + l * e * d - a * r * d) * b;
      c[10] = (h * w * g - u * k * g + u * e * q - a * w * q - h * e * d + a * k * d) * b;
      c[11] = (l * k * g - h * r * g - l * e * q + a * r * q + h * e * t - a * k * t) * b;
      c[12] = N * b;
      c[13] = (l * w * f - u * r * f + u * e * p - a * w * p - l * e * A + a * r * A) * b;
      c[14] = (u * k * f - h * w * f - u * e * m + a * w * m + h * e * A - a * k * A) * b;
      c[15] = (h * r * f - l * k * f + l * e * m - a * r * m - h * e * p + a * k * p) * b;
      return this;
    },
    scale: function scale(a) {
      var b = this.elements,
          c = a.x,
          d = a.y;
      a = a.z;
      b[0] *= c;
      b[4] *= d;
      b[8] *= a;
      b[1] *= c;
      b[5] *= d;
      b[9] *= a;
      b[2] *= c;
      b[6] *= d;
      b[10] *= a;
      b[3] *= c;
      b[7] *= d;
      b[11] *= a;
      return this;
    },
    getMaxScaleOnAxis: function getMaxScaleOnAxis() {
      var a = this.elements;
      return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
    },
    makeTranslation: function makeTranslation(a, b, c) {
      this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);
      return this;
    },
    makeRotationX: function makeRotationX(a) {
      var b = Math.cos(a);
      a = Math.sin(a);
      this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);
      return this;
    },
    makeRotationY: function makeRotationY(a) {
      var b = Math.cos(a);
      a = Math.sin(a);
      this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);
      return this;
    },
    makeRotationZ: function makeRotationZ(a) {
      var b = Math.cos(a);
      a = Math.sin(a);
      this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    },
    makeRotationAxis: function makeRotationAxis(a, b) {
      var c = Math.cos(b);
      b = Math.sin(b);
      var d = 1 - c,
          e = a.x,
          f = a.y;
      a = a.z;
      var g = d * e,
          h = d * f;
      this.set(g * e + c, g * f - b * a, g * a + b * f, 0, g * f + b * a, h * f + c, h * a - b * e, 0, g * a - b * f, h * a + b * e, d * a * a + c, 0, 0, 0, 0, 1);
      return this;
    },
    makeScale: function makeScale(a, b, c) {
      this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);
      return this;
    },
    makeShear: function makeShear(a, b, c) {
      this.set(1, b, c, 0, a, 1, c, 0, a, b, 1, 0, 0, 0, 0, 1);
      return this;
    },
    compose: function compose(a, b, c) {
      var d = this.elements,
          e = b._x,
          f = b._y,
          g = b._z,
          h = b._w,
          k = e + e,
          m = f + f,
          l = g + g;
      b = e * k;
      var n = e * m;
      e *= l;
      var r = f * m;
      f *= l;
      g *= l;
      k *= h;
      m *= h;
      h *= l;
      l = c.x;
      var p = c.y;
      c = c.z;
      d[0] = (1 - (r + g)) * l;
      d[1] = (n + h) * l;
      d[2] = (e - m) * l;
      d[3] = 0;
      d[4] = (n - h) * p;
      d[5] = (1 - (b + g)) * p;
      d[6] = (f + k) * p;
      d[7] = 0;
      d[8] = (e + m) * c;
      d[9] = (f - k) * c;
      d[10] = (1 - (b + r)) * c;
      d[11] = 0;
      d[12] = a.x;
      d[13] = a.y;
      d[14] = a.z;
      d[15] = 1;
      return this;
    },
    decompose: function () {
      var a = new p(),
          b = new P();
      return function (c, d, e) {
        var f = this.elements,
            g = a.set(f[0], f[1], f[2]).length(),
            h = a.set(f[4], f[5], f[6]).length(),
            k = a.set(f[8], f[9], f[10]).length();
        0 > this.determinant() && (g = -g);
        c.x = f[12];
        c.y = f[13];
        c.z = f[14];
        b.copy(this);
        c = 1 / g;
        f = 1 / h;
        var m = 1 / k;
        b.elements[0] *= c;
        b.elements[1] *= c;
        b.elements[2] *= c;
        b.elements[4] *= f;
        b.elements[5] *= f;
        b.elements[6] *= f;
        b.elements[8] *= m;
        b.elements[9] *= m;
        b.elements[10] *= m;
        d.setFromRotationMatrix(b);
        e.x = g;
        e.y = h;
        e.z = k;
        return this;
      };
    }(),
    makePerspective: function makePerspective(a, b, c, d, e, f) {
      void 0 === f && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
      var g = this.elements;
      g[0] = 2 * e / (b - a);
      g[4] = 0;
      g[8] = (b + a) / (b - a);
      g[12] = 0;
      g[1] = 0;
      g[5] = 2 * e / (c - d);
      g[9] = (c + d) / (c - d);
      g[13] = 0;
      g[2] = 0;
      g[6] = 0;
      g[10] = -(f + e) / (f - e);
      g[14] = -2 * f * e / (f - e);
      g[3] = 0;
      g[7] = 0;
      g[11] = -1;
      g[15] = 0;
      return this;
    },
    makeOrthographic: function makeOrthographic(a, b, c, d, e, f) {
      var g = this.elements,
          h = 1 / (b - a),
          k = 1 / (c - d),
          m = 1 / (f - e);
      g[0] = 2 * h;
      g[4] = 0;
      g[8] = 0;
      g[12] = -((b + a) * h);
      g[1] = 0;
      g[5] = 2 * k;
      g[9] = 0;
      g[13] = -((c + d) * k);
      g[2] = 0;
      g[6] = 0;
      g[10] = -2 * m;
      g[14] = -((f + e) * m);
      g[3] = 0;
      g[7] = 0;
      g[11] = 0;
      g[15] = 1;
      return this;
    },
    equals: function equals(a) {
      var b = this.elements;
      a = a.elements;

      for (var c = 0; 16 > c; c++) {
        if (b[c] !== a[c]) return !1;
      }

      return !0;
    },
    fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);

      for (var c = 0; 16 > c; c++) {
        this.elements[c] = a[c + b];
      }

      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      var c = this.elements;
      a[b] = c[0];
      a[b + 1] = c[1];
      a[b + 2] = c[2];
      a[b + 3] = c[3];
      a[b + 4] = c[4];
      a[b + 5] = c[5];
      a[b + 6] = c[6];
      a[b + 7] = c[7];
      a[b + 8] = c[8];
      a[b + 9] = c[9];
      a[b + 10] = c[10];
      a[b + 11] = c[11];
      a[b + 12] = c[12];
      a[b + 13] = c[13];
      a[b + 14] = c[14];
      a[b + 15] = c[15];
      return a;
    }
  });
  Object.assign(ja, {
    slerp: function slerp(a, b, c, d) {
      return c.copy(a).slerp(b, d);
    },
    slerpFlat: function slerpFlat(a, b, c, d, e, f, g) {
      var h = c[d + 0],
          k = c[d + 1],
          m = c[d + 2];
      c = c[d + 3];
      d = e[f + 0];
      var l = e[f + 1],
          n = e[f + 2];
      e = e[f + 3];

      if (c !== e || h !== d || k !== l || m !== n) {
        f = 1 - g;
        var r = h * d + k * l + m * n + c * e,
            p = 0 <= r ? 1 : -1,
            t = 1 - r * r;
        t > Number.EPSILON && (t = Math.sqrt(t), r = Math.atan2(t, r * p), f = Math.sin(f * r) / t, g = Math.sin(g * r) / t);
        p *= g;
        h = h * f + d * p;
        k = k * f + l * p;
        m = m * f + n * p;
        c = c * f + e * p;
        f === 1 - g && (g = 1 / Math.sqrt(h * h + k * k + m * m + c * c), h *= g, k *= g, m *= g, c *= g);
      }

      a[b] = h;
      a[b + 1] = k;
      a[b + 2] = m;
      a[b + 3] = c;
    }
  });
  Object.defineProperties(ja.prototype, {
    x: {
      get: function get() {
        return this._x;
      },
      set: function set(a) {
        this._x = a;
        this.onChangeCallback();
      }
    },
    y: {
      get: function get() {
        return this._y;
      },
      set: function set(a) {
        this._y = a;
        this.onChangeCallback();
      }
    },
    z: {
      get: function get() {
        return this._z;
      },
      set: function set(a) {
        this._z = a;
        this.onChangeCallback();
      }
    },
    w: {
      get: function get() {
        return this._w;
      },
      set: function set(a) {
        this._w = a;
        this.onChangeCallback();
      }
    }
  });
  Object.assign(ja.prototype, {
    isQuaternion: !0,
    set: function set(a, b, c, d) {
      this._x = a;
      this._y = b;
      this._z = c;
      this._w = d;
      this.onChangeCallback();
      return this;
    },
    clone: function clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    },
    copy: function copy(a) {
      this._x = a.x;
      this._y = a.y;
      this._z = a.z;
      this._w = a.w;
      this.onChangeCallback();
      return this;
    },
    setFromEuler: function setFromEuler(a, b) {
      if (!a || !a.isEuler) throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
      var c = a._x,
          d = a._y,
          e = a._z;
      a = a.order;
      var f = Math.cos,
          g = Math.sin,
          h = f(c / 2),
          k = f(d / 2);
      f = f(e / 2);
      c = g(c / 2);
      d = g(d / 2);
      e = g(e / 2);
      "XYZ" === a ? (this._x = c * k * f + h * d * e, this._y = h * d * f - c * k * e, this._z = h * k * e + c * d * f, this._w = h * k * f - c * d * e) : "YXZ" === a ? (this._x = c * k * f + h * d * e, this._y = h * d * f - c * k * e, this._z = h * k * e - c * d * f, this._w = h * k * f + c * d * e) : "ZXY" === a ? (this._x = c * k * f - h * d * e, this._y = h * d * f + c * k * e, this._z = h * k * e + c * d * f, this._w = h * k * f - c * d * e) : "ZYX" === a ? (this._x = c * k * f - h * d * e, this._y = h * d * f + c * k * e, this._z = h * k * e - c * d * f, this._w = h * k * f + c * d * e) : "YZX" === a ? (this._x = c * k * f + h * d * e, this._y = h * d * f + c * k * e, this._z = h * k * e - c * d * f, this._w = h * k * f - c * d * e) : "XZY" === a && (this._x = c * k * f - h * d * e, this._y = h * d * f - c * k * e, this._z = h * k * e + c * d * f, this._w = h * k * f + c * d * e);
      if (!1 !== b) this.onChangeCallback();
      return this;
    },
    setFromAxisAngle: function setFromAxisAngle(a, b) {
      b /= 2;
      var c = Math.sin(b);
      this._x = a.x * c;
      this._y = a.y * c;
      this._z = a.z * c;
      this._w = Math.cos(b);
      this.onChangeCallback();
      return this;
    },
    setFromRotationMatrix: function setFromRotationMatrix(a) {
      var b = a.elements,
          c = b[0];
      a = b[4];
      var d = b[8],
          e = b[1],
          f = b[5],
          g = b[9],
          h = b[2],
          k = b[6];
      b = b[10];
      var m = c + f + b;
      0 < m ? (c = .5 / Math.sqrt(m + 1), this._w = .25 / c, this._x = (k - g) * c, this._y = (d - h) * c, this._z = (e - a) * c) : c > f && c > b ? (c = 2 * Math.sqrt(1 + c - f - b), this._w = (k - g) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (d + h) / c) : f > b ? (c = 2 * Math.sqrt(1 + f - c - b), this._w = (d - h) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (g + k) / c) : (c = 2 * Math.sqrt(1 + b - c - f), this._w = (e - a) / c, this._x = (d + h) / c, this._y = (g + k) / c, this._z = .25 * c);
      this.onChangeCallback();
      return this;
    },
    setFromUnitVectors: function () {
      var a = new p(),
          b;
      return function (c, d) {
        void 0 === a && (a = new p());
        b = c.dot(d) + 1;
        1E-6 > b ? (b = 0, Math.abs(c.x) > Math.abs(c.z) ? a.set(-c.y, c.x, 0) : a.set(0, -c.z, c.y)) : a.crossVectors(c, d);
        this._x = a.x;
        this._y = a.y;
        this._z = a.z;
        this._w = b;
        return this.normalize();
      };
    }(),
    angleTo: function angleTo(a) {
      return 2 * Math.acos(Math.abs(R.clamp(this.dot(a), -1, 1)));
    },
    rotateTowards: function rotateTowards(a, b) {
      var c = this.angleTo(a);
      if (0 === c) return this;
      this.slerp(a, Math.min(1, b / c));
      return this;
    },
    inverse: function inverse() {
      return this.conjugate();
    },
    conjugate: function conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this.onChangeCallback();
      return this;
    },
    dot: function dot(a) {
      return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
    },
    lengthSq: function lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    },
    length: function length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    },
    normalize: function normalize() {
      var a = this.length();
      0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);
      this.onChangeCallback();
      return this;
    },
    multiply: function multiply(a, b) {
      return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
    },
    premultiply: function premultiply(a) {
      return this.multiplyQuaternions(a, this);
    },
    multiplyQuaternions: function multiplyQuaternions(a, b) {
      var c = a._x,
          d = a._y,
          e = a._z;
      a = a._w;
      var f = b._x,
          g = b._y,
          h = b._z;
      b = b._w;
      this._x = c * b + a * f + d * h - e * g;
      this._y = d * b + a * g + e * f - c * h;
      this._z = e * b + a * h + c * g - d * f;
      this._w = a * b - c * f - d * g - e * h;
      this.onChangeCallback();
      return this;
    },
    slerp: function slerp(a, b) {
      if (0 === b) return this;
      if (1 === b) return this.copy(a);
      var c = this._x,
          d = this._y,
          e = this._z,
          f = this._w,
          g = f * a._w + c * a._x + d * a._y + e * a._z;
      0 > g ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, g = -g) : this.copy(a);
      if (1 <= g) return this._w = f, this._x = c, this._y = d, this._z = e, this;
      a = 1 - g * g;
      if (a <= Number.EPSILON) return g = 1 - b, this._w = g * f + b * this._w, this._x = g * c + b * this._x, this._y = g * d + b * this._y, this._z = g * e + b * this._z, this.normalize();
      a = Math.sqrt(a);
      var h = Math.atan2(a, g);
      g = Math.sin((1 - b) * h) / a;
      b = Math.sin(b * h) / a;
      this._w = f * g + this._w * b;
      this._x = c * g + this._x * b;
      this._y = d * g + this._y * b;
      this._z = e * g + this._z * b;
      this.onChangeCallback();
      return this;
    },
    equals: function equals(a) {
      return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
    },
    fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);
      this._x = a[b];
      this._y = a[b + 1];
      this._z = a[b + 2];
      this._w = a[b + 3];
      this.onChangeCallback();
      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      a[b] = this._x;
      a[b + 1] = this._y;
      a[b + 2] = this._z;
      a[b + 3] = this._w;
      return a;
    },
    onChange: function onChange(a) {
      this.onChangeCallback = a;
      return this;
    },
    onChangeCallback: function onChangeCallback() {}
  });
  Object.assign(p.prototype, {
    isVector3: !0,
    set: function set(a, b, c) {
      this.x = a;
      this.y = b;
      this.z = c;
      return this;
    },
    setScalar: function setScalar(a) {
      this.z = this.y = this.x = a;
      return this;
    },
    setX: function setX(a) {
      this.x = a;
      return this;
    },
    setY: function setY(a) {
      this.y = a;
      return this;
    },
    setZ: function setZ(a) {
      this.z = a;
      return this;
    },
    setComponent: function setComponent(a, b) {
      switch (a) {
        case 0:
          this.x = b;
          break;

        case 1:
          this.y = b;
          break;

        case 2:
          this.z = b;
          break;

        default:
          throw Error("index is out of range: " + a);
      }

      return this;
    },
    getComponent: function getComponent(a) {
      switch (a) {
        case 0:
          return this.x;

        case 1:
          return this.y;

        case 2:
          return this.z;

        default:
          throw Error("index is out of range: " + a);
      }
    },
    clone: function clone() {
      return new this.constructor(this.x, this.y, this.z);
    },
    copy: function copy(a) {
      this.x = a.x;
      this.y = a.y;
      this.z = a.z;
      return this;
    },
    add: function add(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
      this.x += a.x;
      this.y += a.y;
      this.z += a.z;
      return this;
    },
    addScalar: function addScalar(a) {
      this.x += a;
      this.y += a;
      this.z += a;
      return this;
    },
    addVectors: function addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    },
    addScaledVector: function addScaledVector(a, b) {
      this.x += a.x * b;
      this.y += a.y * b;
      this.z += a.z * b;
      return this;
    },
    sub: function sub(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
      this.x -= a.x;
      this.y -= a.y;
      this.z -= a.z;
      return this;
    },
    subScalar: function subScalar(a) {
      this.x -= a;
      this.y -= a;
      this.z -= a;
      return this;
    },
    subVectors: function subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    },
    multiply: function multiply(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);
      this.x *= a.x;
      this.y *= a.y;
      this.z *= a.z;
      return this;
    },
    multiplyScalar: function multiplyScalar(a) {
      this.x *= a;
      this.y *= a;
      this.z *= a;
      return this;
    },
    multiplyVectors: function multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    },
    applyEuler: function () {
      var a = new ja();
      return function (b) {
        b && b.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
        return this.applyQuaternion(a.setFromEuler(b));
      };
    }(),
    applyAxisAngle: function () {
      var a = new ja();
      return function (b, c) {
        return this.applyQuaternion(a.setFromAxisAngle(b, c));
      };
    }(),
    applyMatrix3: function applyMatrix3(a) {
      var b = this.x,
          c = this.y,
          d = this.z;
      a = a.elements;
      this.x = a[0] * b + a[3] * c + a[6] * d;
      this.y = a[1] * b + a[4] * c + a[7] * d;
      this.z = a[2] * b + a[5] * c + a[8] * d;
      return this;
    },
    applyMatrix4: function applyMatrix4(a) {
      var b = this.x,
          c = this.y,
          d = this.z;
      a = a.elements;
      var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);
      this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;
      this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;
      this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;
      return this;
    },
    applyQuaternion: function applyQuaternion(a) {
      var b = this.x,
          c = this.y,
          d = this.z,
          e = a.x,
          f = a.y,
          g = a.z;
      a = a.w;
      var h = a * b + f * d - g * c,
          k = a * c + g * b - e * d,
          m = a * d + e * c - f * b;
      b = -e * b - f * c - g * d;
      this.x = h * a + b * -e + k * -g - m * -f;
      this.y = k * a + b * -f + m * -e - h * -g;
      this.z = m * a + b * -g + h * -f - k * -e;
      return this;
    },
    project: function project(a) {
      return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix);
    },
    unproject: function () {
      var a = new P();
      return function (b) {
        return this.applyMatrix4(a.getInverse(b.projectionMatrix)).applyMatrix4(b.matrixWorld);
      };
    }(),
    transformDirection: function transformDirection(a) {
      var b = this.x,
          c = this.y,
          d = this.z;
      a = a.elements;
      this.x = a[0] * b + a[4] * c + a[8] * d;
      this.y = a[1] * b + a[5] * c + a[9] * d;
      this.z = a[2] * b + a[6] * c + a[10] * d;
      return this.normalize();
    },
    divide: function divide(a) {
      this.x /= a.x;
      this.y /= a.y;
      this.z /= a.z;
      return this;
    },
    divideScalar: function divideScalar(a) {
      return this.multiplyScalar(1 / a);
    },
    min: function min(a) {
      this.x = Math.min(this.x, a.x);
      this.y = Math.min(this.y, a.y);
      this.z = Math.min(this.z, a.z);
      return this;
    },
    max: function max(a) {
      this.x = Math.max(this.x, a.x);
      this.y = Math.max(this.y, a.y);
      this.z = Math.max(this.z, a.z);
      return this;
    },
    clamp: function clamp(a, b) {
      this.x = Math.max(a.x, Math.min(b.x, this.x));
      this.y = Math.max(a.y, Math.min(b.y, this.y));
      this.z = Math.max(a.z, Math.min(b.z, this.z));
      return this;
    },
    clampScalar: function () {
      var a = new p(),
          b = new p();
      return function (c, d) {
        a.set(c, c, c);
        b.set(d, d, d);
        return this.clamp(a, b);
      };
    }(),
    clampLength: function clampLength(a, b) {
      var c = this.length();
      return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
    },
    floor: function floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    },
    ceil: function ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    },
    round: function round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    },
    roundToZero: function roundToZero() {
      this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
      return this;
    },
    negate: function negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    },
    dot: function dot(a) {
      return this.x * a.x + this.y * a.y + this.z * a.z;
    },
    lengthSq: function lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    manhattanLength: function manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    },
    normalize: function normalize() {
      return this.divideScalar(this.length() || 1);
    },
    setLength: function setLength(a) {
      return this.normalize().multiplyScalar(a);
    },
    lerp: function lerp(a, b) {
      this.x += (a.x - this.x) * b;
      this.y += (a.y - this.y) * b;
      this.z += (a.z - this.z) * b;
      return this;
    },
    lerpVectors: function lerpVectors(a, b, c) {
      return this.subVectors(b, a).multiplyScalar(c).add(a);
    },
    cross: function cross(a, b) {
      return void 0 !== b ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b)) : this.crossVectors(this, a);
    },
    crossVectors: function crossVectors(a, b) {
      var c = a.x,
          d = a.y;
      a = a.z;
      var e = b.x,
          f = b.y;
      b = b.z;
      this.x = d * b - a * f;
      this.y = a * e - c * b;
      this.z = c * f - d * e;
      return this;
    },
    projectOnVector: function projectOnVector(a) {
      var b = a.dot(this) / a.lengthSq();
      return this.copy(a).multiplyScalar(b);
    },
    projectOnPlane: function () {
      var a = new p();
      return function (b) {
        a.copy(this).projectOnVector(b);
        return this.sub(a);
      };
    }(),
    reflect: function () {
      var a = new p();
      return function (b) {
        return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
      };
    }(),
    angleTo: function angleTo(a) {
      a = this.dot(a) / Math.sqrt(this.lengthSq() * a.lengthSq());
      return Math.acos(R.clamp(a, -1, 1));
    },
    distanceTo: function distanceTo(a) {
      return Math.sqrt(this.distanceToSquared(a));
    },
    distanceToSquared: function distanceToSquared(a) {
      var b = this.x - a.x,
          c = this.y - a.y;
      a = this.z - a.z;
      return b * b + c * c + a * a;
    },
    manhattanDistanceTo: function manhattanDistanceTo(a) {
      return Math.abs(this.x - a.x) + Math.abs(this.y - a.y) + Math.abs(this.z - a.z);
    },
    setFromSpherical: function setFromSpherical(a) {
      return this.setFromSphericalCoords(a.radius, a.phi, a.theta);
    },
    setFromSphericalCoords: function setFromSphericalCoords(a, b, c) {
      var d = Math.sin(b) * a;
      this.x = d * Math.sin(c);
      this.y = Math.cos(b) * a;
      this.z = d * Math.cos(c);
      return this;
    },
    setFromCylindrical: function setFromCylindrical(a) {
      return this.setFromCylindricalCoords(a.radius, a.theta, a.y);
    },
    setFromCylindricalCoords: function setFromCylindricalCoords(a, b, c) {
      this.x = a * Math.sin(b);
      this.y = c;
      this.z = a * Math.cos(b);
      return this;
    },
    setFromMatrixPosition: function setFromMatrixPosition(a) {
      a = a.elements;
      this.x = a[12];
      this.y = a[13];
      this.z = a[14];
      return this;
    },
    setFromMatrixScale: function setFromMatrixScale(a) {
      var b = this.setFromMatrixColumn(a, 0).length(),
          c = this.setFromMatrixColumn(a, 1).length();
      a = this.setFromMatrixColumn(a, 2).length();
      this.x = b;
      this.y = c;
      this.z = a;
      return this;
    },
    setFromMatrixColumn: function setFromMatrixColumn(a, b) {
      return this.fromArray(a.elements, 4 * b);
    },
    equals: function equals(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z;
    },
    fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);
      this.x = a[b];
      this.y = a[b + 1];
      this.z = a[b + 2];
      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      a[b] = this.x;
      a[b + 1] = this.y;
      a[b + 2] = this.z;
      return a;
    },
    fromBufferAttribute: function fromBufferAttribute(a, b, c) {
      void 0 !== c && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
      this.x = a.getX(b);
      this.y = a.getY(b);
      this.z = a.getZ(b);
      return this;
    }
  });
  Object.assign(da.prototype, {
    isMatrix3: !0,
    set: function set(a, b, c, d, e, f, g, h, k) {
      var m = this.elements;
      m[0] = a;
      m[1] = d;
      m[2] = g;
      m[3] = b;
      m[4] = e;
      m[5] = h;
      m[6] = c;
      m[7] = f;
      m[8] = k;
      return this;
    },
    identity: function identity() {
      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
      return this;
    },
    clone: function clone() {
      return new this.constructor().fromArray(this.elements);
    },
    copy: function copy(a) {
      var b = this.elements;
      a = a.elements;
      b[0] = a[0];
      b[1] = a[1];
      b[2] = a[2];
      b[3] = a[3];
      b[4] = a[4];
      b[5] = a[5];
      b[6] = a[6];
      b[7] = a[7];
      b[8] = a[8];
      return this;
    },
    setFromMatrix4: function setFromMatrix4(a) {
      a = a.elements;
      this.set(a[0], a[4], a[8], a[1], a[5], a[9], a[2], a[6], a[10]);
      return this;
    },
    applyToBufferAttribute: function () {
      var a = new p();
      return function (b) {
        for (var c = 0, d = b.count; c < d; c++) {
          a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix3(this), b.setXYZ(c, a.x, a.y, a.z);
        }

        return b;
      };
    }(),
    multiply: function multiply(a) {
      return this.multiplyMatrices(this, a);
    },
    premultiply: function premultiply(a) {
      return this.multiplyMatrices(a, this);
    },
    multiplyMatrices: function multiplyMatrices(a, b) {
      var c = a.elements,
          d = b.elements;
      b = this.elements;
      a = c[0];
      var e = c[3],
          f = c[6],
          g = c[1],
          h = c[4],
          k = c[7],
          m = c[2],
          l = c[5];
      c = c[8];
      var n = d[0],
          r = d[3],
          p = d[6],
          t = d[1],
          u = d[4],
          w = d[7],
          A = d[2],
          v = d[5];
      d = d[8];
      b[0] = a * n + e * t + f * A;
      b[3] = a * r + e * u + f * v;
      b[6] = a * p + e * w + f * d;
      b[1] = g * n + h * t + k * A;
      b[4] = g * r + h * u + k * v;
      b[7] = g * p + h * w + k * d;
      b[2] = m * n + l * t + c * A;
      b[5] = m * r + l * u + c * v;
      b[8] = m * p + l * w + c * d;
      return this;
    },
    multiplyScalar: function multiplyScalar(a) {
      var b = this.elements;
      b[0] *= a;
      b[3] *= a;
      b[6] *= a;
      b[1] *= a;
      b[4] *= a;
      b[7] *= a;
      b[2] *= a;
      b[5] *= a;
      b[8] *= a;
      return this;
    },
    determinant: function determinant() {
      var a = this.elements,
          b = a[0],
          c = a[1],
          d = a[2],
          e = a[3],
          f = a[4],
          g = a[5],
          h = a[6],
          k = a[7];
      a = a[8];
      return b * f * a - b * g * k - c * e * a + c * g * h + d * e * k - d * f * h;
    },
    getInverse: function getInverse(a, b) {
      a && a.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
      var c = a.elements;
      a = this.elements;
      var d = c[0],
          e = c[1],
          f = c[2],
          g = c[3],
          h = c[4],
          k = c[5],
          m = c[6],
          l = c[7];
      c = c[8];
      var n = c * h - k * l,
          r = k * m - c * g,
          p = l * g - h * m,
          t = d * n + e * r + f * p;

      if (0 === t) {
        if (!0 === b) throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
        console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
        return this.identity();
      }

      b = 1 / t;
      a[0] = n * b;
      a[1] = (f * l - c * e) * b;
      a[2] = (k * e - f * h) * b;
      a[3] = r * b;
      a[4] = (c * d - f * m) * b;
      a[5] = (f * g - k * d) * b;
      a[6] = p * b;
      a[7] = (e * m - l * d) * b;
      a[8] = (h * d - e * g) * b;
      return this;
    },
    transpose: function transpose() {
      var a = this.elements;
      var b = a[1];
      a[1] = a[3];
      a[3] = b;
      b = a[2];
      a[2] = a[6];
      a[6] = b;
      b = a[5];
      a[5] = a[7];
      a[7] = b;
      return this;
    },
    getNormalMatrix: function getNormalMatrix(a) {
      return this.setFromMatrix4(a).getInverse(this).transpose();
    },
    transposeIntoArray: function transposeIntoArray(a) {
      var b = this.elements;
      a[0] = b[0];
      a[1] = b[3];
      a[2] = b[6];
      a[3] = b[1];
      a[4] = b[4];
      a[5] = b[7];
      a[6] = b[2];
      a[7] = b[5];
      a[8] = b[8];
      return this;
    },
    setUvTransform: function setUvTransform(a, b, c, d, e, f, g) {
      var h = Math.cos(e);
      e = Math.sin(e);
      this.set(c * h, c * e, -c * (h * f + e * g) + f + a, -d * e, d * h, -d * (-e * f + h * g) + g + b, 0, 0, 1);
    },
    scale: function scale(a, b) {
      var c = this.elements;
      c[0] *= a;
      c[3] *= a;
      c[6] *= a;
      c[1] *= b;
      c[4] *= b;
      c[7] *= b;
      return this;
    },
    rotate: function rotate(a) {
      var b = Math.cos(a);
      a = Math.sin(a);
      var c = this.elements,
          d = c[0],
          e = c[3],
          f = c[6],
          g = c[1],
          h = c[4],
          k = c[7];
      c[0] = b * d + a * g;
      c[3] = b * e + a * h;
      c[6] = b * f + a * k;
      c[1] = -a * d + b * g;
      c[4] = -a * e + b * h;
      c[7] = -a * f + b * k;
      return this;
    },
    translate: function translate(a, b) {
      var c = this.elements;
      c[0] += a * c[2];
      c[3] += a * c[5];
      c[6] += a * c[8];
      c[1] += b * c[2];
      c[4] += b * c[5];
      c[7] += b * c[8];
      return this;
    },
    equals: function equals(a) {
      var b = this.elements;
      a = a.elements;

      for (var c = 0; 9 > c; c++) {
        if (b[c] !== a[c]) return !1;
      }

      return !0;
    },
    fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);

      for (var c = 0; 9 > c; c++) {
        this.elements[c] = a[c + b];
      }

      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      var c = this.elements;
      a[b] = c[0];
      a[b + 1] = c[1];
      a[b + 2] = c[2];
      a[b + 3] = c[3];
      a[b + 4] = c[4];
      a[b + 5] = c[5];
      a[b + 6] = c[6];
      a[b + 7] = c[7];
      a[b + 8] = c[8];
      return a;
    }
  });
  var jb = {
    getDataURL: function getDataURL(a) {
      if ("undefined" == typeof HTMLCanvasElement) return a.src;
      if (a instanceof HTMLCanvasElement) var b = a;else {
        b = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
        b.width = a.width;
        b.height = a.height;
        var c = b.getContext("2d");
        a instanceof ImageData ? c.putImageData(a, 0, 0) : c.drawImage(a, 0, 0, a.width, a.height);
      }
      return 2048 < b.width || 2048 < b.height ? b.toDataURL("image/jpeg", .6) : b.toDataURL("image/png");
    }
  },
      Kf = 0;
  W.DEFAULT_IMAGE = void 0;
  W.DEFAULT_MAPPING = 300;
  W.prototype = Object.assign(Object.create(ia.prototype), {
    constructor: W,
    isTexture: !0,
    updateMatrix: function updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.name = a.name;
      this.image = a.image;
      this.mipmaps = a.mipmaps.slice(0);
      this.mapping = a.mapping;
      this.wrapS = a.wrapS;
      this.wrapT = a.wrapT;
      this.magFilter = a.magFilter;
      this.minFilter = a.minFilter;
      this.anisotropy = a.anisotropy;
      this.format = a.format;
      this.type = a.type;
      this.offset.copy(a.offset);
      this.repeat.copy(a.repeat);
      this.center.copy(a.center);
      this.rotation = a.rotation;
      this.matrixAutoUpdate = a.matrixAutoUpdate;
      this.matrix.copy(a.matrix);
      this.generateMipmaps = a.generateMipmaps;
      this.premultiplyAlpha = a.premultiplyAlpha;
      this.flipY = a.flipY;
      this.unpackAlignment = a.unpackAlignment;
      this.encoding = a.encoding;
      return this;
    },
    toJSON: function toJSON(a) {
      var b = void 0 === a || "string" === typeof a;
      if (!b && void 0 !== a.textures[this.uuid]) return a.textures[this.uuid];
      var c = {
        metadata: {
          version: 4.5,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY
      };

      if (void 0 !== this.image) {
        var d = this.image;
        void 0 === d.uuid && (d.uuid = R.generateUUID());

        if (!b && void 0 === a.images[d.uuid]) {
          if (Array.isArray(d)) {
            var e = [];

            for (var f = 0, g = d.length; f < g; f++) {
              e.push(jb.getDataURL(d[f]));
            }
          } else e = jb.getDataURL(d);

          a.images[d.uuid] = {
            uuid: d.uuid,
            url: e
          };
        }

        c.image = d.uuid;
      }

      b || (a.textures[this.uuid] = c);
      return c;
    },
    dispose: function dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    },
    transformUv: function transformUv(a) {
      if (300 !== this.mapping) return a;
      a.applyMatrix3(this.matrix);
      if (0 > a.x || 1 < a.x) switch (this.wrapS) {
        case 1E3:
          a.x -= Math.floor(a.x);
          break;

        case 1001:
          a.x = 0 > a.x ? 0 : 1;
          break;

        case 1002:
          a.x = 1 === Math.abs(Math.floor(a.x) % 2) ? Math.ceil(a.x) - a.x : a.x - Math.floor(a.x);
      }
      if (0 > a.y || 1 < a.y) switch (this.wrapT) {
        case 1E3:
          a.y -= Math.floor(a.y);
          break;

        case 1001:
          a.y = 0 > a.y ? 0 : 1;
          break;

        case 1002:
          a.y = 1 === Math.abs(Math.floor(a.y) % 2) ? Math.ceil(a.y) - a.y : a.y - Math.floor(a.y);
      }
      this.flipY && (a.y = 1 - a.y);
      return a;
    }
  });
  Object.defineProperty(W.prototype, "needsUpdate", {
    set: function set(a) {
      !0 === a && this.version++;
    }
  });
  Object.assign(Z.prototype, {
    isVector4: !0,
    set: function set(a, b, c, d) {
      this.x = a;
      this.y = b;
      this.z = c;
      this.w = d;
      return this;
    },
    setScalar: function setScalar(a) {
      this.w = this.z = this.y = this.x = a;
      return this;
    },
    setX: function setX(a) {
      this.x = a;
      return this;
    },
    setY: function setY(a) {
      this.y = a;
      return this;
    },
    setZ: function setZ(a) {
      this.z = a;
      return this;
    },
    setW: function setW(a) {
      this.w = a;
      return this;
    },
    setComponent: function setComponent(a, b) {
      switch (a) {
        case 0:
          this.x = b;
          break;

        case 1:
          this.y = b;
          break;

        case 2:
          this.z = b;
          break;

        case 3:
          this.w = b;
          break;

        default:
          throw Error("index is out of range: " + a);
      }

      return this;
    },
    getComponent: function getComponent(a) {
      switch (a) {
        case 0:
          return this.x;

        case 1:
          return this.y;

        case 2:
          return this.z;

        case 3:
          return this.w;

        default:
          throw Error("index is out of range: " + a);
      }
    },
    clone: function clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    },
    copy: function copy(a) {
      this.x = a.x;
      this.y = a.y;
      this.z = a.z;
      this.w = void 0 !== a.w ? a.w : 1;
      return this;
    },
    add: function add(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
      this.x += a.x;
      this.y += a.y;
      this.z += a.z;
      this.w += a.w;
      return this;
    },
    addScalar: function addScalar(a) {
      this.x += a;
      this.y += a;
      this.z += a;
      this.w += a;
      return this;
    },
    addVectors: function addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    },
    addScaledVector: function addScaledVector(a, b) {
      this.x += a.x * b;
      this.y += a.y * b;
      this.z += a.z * b;
      this.w += a.w * b;
      return this;
    },
    sub: function sub(a, b) {
      if (void 0 !== b) return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
      this.x -= a.x;
      this.y -= a.y;
      this.z -= a.z;
      this.w -= a.w;
      return this;
    },
    subScalar: function subScalar(a) {
      this.x -= a;
      this.y -= a;
      this.z -= a;
      this.w -= a;
      return this;
    },
    subVectors: function subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    },
    multiplyScalar: function multiplyScalar(a) {
      this.x *= a;
      this.y *= a;
      this.z *= a;
      this.w *= a;
      return this;
    },
    applyMatrix4: function applyMatrix4(a) {
      var b = this.x,
          c = this.y,
          d = this.z,
          e = this.w;
      a = a.elements;
      this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;
      this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;
      this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;
      this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;
      return this;
    },
    divideScalar: function divideScalar(a) {
      return this.multiplyScalar(1 / a);
    },
    setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(a) {
      this.w = 2 * Math.acos(a.w);
      var b = Math.sqrt(1 - a.w * a.w);
      1E-4 > b ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / b, this.y = a.y / b, this.z = a.z / b);
      return this;
    },
    setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(a) {
      a = a.elements;
      var b = a[0];
      var c = a[4];
      var d = a[8],
          e = a[1],
          f = a[5],
          g = a[9];
      var h = a[2];
      var k = a[6];
      var m = a[10];

      if (.01 > Math.abs(c - e) && .01 > Math.abs(d - h) && .01 > Math.abs(g - k)) {
        if (.1 > Math.abs(c + e) && .1 > Math.abs(d + h) && .1 > Math.abs(g + k) && .1 > Math.abs(b + f + m - 3)) return this.set(1, 0, 0, 0), this;
        a = Math.PI;
        b = (b + 1) / 2;
        f = (f + 1) / 2;
        m = (m + 1) / 2;
        c = (c + e) / 4;
        d = (d + h) / 4;
        g = (g + k) / 4;
        b > f && b > m ? .01 > b ? (k = 0, c = h = .707106781) : (k = Math.sqrt(b), h = c / k, c = d / k) : f > m ? .01 > f ? (k = .707106781, h = 0, c = .707106781) : (h = Math.sqrt(f), k = c / h, c = g / h) : .01 > m ? (h = k = .707106781, c = 0) : (c = Math.sqrt(m), k = d / c, h = g / c);
        this.set(k, h, c, a);
        return this;
      }

      a = Math.sqrt((k - g) * (k - g) + (d - h) * (d - h) + (e - c) * (e - c));
      .001 > Math.abs(a) && (a = 1);
      this.x = (k - g) / a;
      this.y = (d - h) / a;
      this.z = (e - c) / a;
      this.w = Math.acos((b + f + m - 1) / 2);
      return this;
    },
    min: function min(a) {
      this.x = Math.min(this.x, a.x);
      this.y = Math.min(this.y, a.y);
      this.z = Math.min(this.z, a.z);
      this.w = Math.min(this.w, a.w);
      return this;
    },
    max: function max(a) {
      this.x = Math.max(this.x, a.x);
      this.y = Math.max(this.y, a.y);
      this.z = Math.max(this.z, a.z);
      this.w = Math.max(this.w, a.w);
      return this;
    },
    clamp: function clamp(a, b) {
      this.x = Math.max(a.x, Math.min(b.x, this.x));
      this.y = Math.max(a.y, Math.min(b.y, this.y));
      this.z = Math.max(a.z, Math.min(b.z, this.z));
      this.w = Math.max(a.w, Math.min(b.w, this.w));
      return this;
    },
    clampScalar: function () {
      var a, b;
      return function (c, d) {
        void 0 === a && (a = new Z(), b = new Z());
        a.set(c, c, c, c);
        b.set(d, d, d, d);
        return this.clamp(a, b);
      };
    }(),
    clampLength: function clampLength(a, b) {
      var c = this.length();
      return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
    },
    floor: function floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    },
    ceil: function ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    },
    round: function round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    },
    roundToZero: function roundToZero() {
      this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
      this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
      return this;
    },
    negate: function negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    },
    dot: function dot(a) {
      return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
    },
    lengthSq: function lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    },
    length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    },
    manhattanLength: function manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    },
    normalize: function normalize() {
      return this.divideScalar(this.length() || 1);
    },
    setLength: function setLength(a) {
      return this.normalize().multiplyScalar(a);
    },
    lerp: function lerp(a, b) {
      this.x += (a.x - this.x) * b;
      this.y += (a.y - this.y) * b;
      this.z += (a.z - this.z) * b;
      this.w += (a.w - this.w) * b;
      return this;
    },
    lerpVectors: function lerpVectors(a, b, c) {
      return this.subVectors(b, a).multiplyScalar(c).add(a);
    },
    equals: function equals(a) {
      return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
    },
    fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);
      this.x = a[b];
      this.y = a[b + 1];
      this.z = a[b + 2];
      this.w = a[b + 3];
      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      a[b] = this.x;
      a[b + 1] = this.y;
      a[b + 2] = this.z;
      a[b + 3] = this.w;
      return a;
    },
    fromBufferAttribute: function fromBufferAttribute(a, b, c) {
      void 0 !== c && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
      this.x = a.getX(b);
      this.y = a.getY(b);
      this.z = a.getZ(b);
      this.w = a.getW(b);
      return this;
    }
  });
  kb.prototype = Object.assign(Object.create(ia.prototype), {
    constructor: kb,
    isWebGLRenderTarget: !0,
    setSize: function setSize(a, b) {
      if (this.width !== a || this.height !== b) this.width = a, this.height = b, this.dispose();
      this.viewport.set(0, 0, a, b);
      this.scissor.set(0, 0, a, b);
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.width = a.width;
      this.height = a.height;
      this.viewport.copy(a.viewport);
      this.texture = a.texture.clone();
      this.depthBuffer = a.depthBuffer;
      this.stencilBuffer = a.stencilBuffer;
      this.depthTexture = a.depthTexture;
      return this;
    },
    dispose: function dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
  });
  Jb.prototype = Object.create(kb.prototype);
  Jb.prototype.constructor = Jb;
  Jb.prototype.isWebGLRenderTargetCube = !0;
  lb.prototype = Object.create(W.prototype);
  lb.prototype.constructor = lb;
  lb.prototype.isDataTexture = !0;
  Object.assign(Wa.prototype, {
    isBox3: !0,
    set: function set(a, b) {
      this.min.copy(a);
      this.max.copy(b);
      return this;
    },
    setFromArray: function setFromArray(a) {
      for (var b = Infinity, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = -Infinity, h = 0, k = a.length; h < k; h += 3) {
        var m = a[h],
            l = a[h + 1],
            n = a[h + 2];
        m < b && (b = m);
        l < c && (c = l);
        n < d && (d = n);
        m > e && (e = m);
        l > f && (f = l);
        n > g && (g = n);
      }

      this.min.set(b, c, d);
      this.max.set(e, f, g);
      return this;
    },
    setFromBufferAttribute: function setFromBufferAttribute(a) {
      for (var b = Infinity, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = -Infinity, h = 0, k = a.count; h < k; h++) {
        var m = a.getX(h),
            l = a.getY(h),
            n = a.getZ(h);
        m < b && (b = m);
        l < c && (c = l);
        n < d && (d = n);
        m > e && (e = m);
        l > f && (f = l);
        n > g && (g = n);
      }

      this.min.set(b, c, d);
      this.max.set(e, f, g);
      return this;
    },
    setFromPoints: function setFromPoints(a) {
      this.makeEmpty();

      for (var b = 0, c = a.length; b < c; b++) {
        this.expandByPoint(a[b]);
      }

      return this;
    },
    setFromCenterAndSize: function () {
      var a = new p();
      return function (b, c) {
        c = a.copy(c).multiplyScalar(.5);
        this.min.copy(b).sub(c);
        this.max.copy(b).add(c);
        return this;
      };
    }(),
    setFromObject: function setFromObject(a) {
      this.makeEmpty();
      return this.expandByObject(a);
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.min.copy(a.min);
      this.max.copy(a.max);
      return this;
    },
    makeEmpty: function makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    },
    isEmpty: function isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    },
    getCenter: function getCenter(a) {
      void 0 === a && (console.warn("THREE.Box3: .getCenter() target is now required"), a = new p());
      return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
    },
    getSize: function getSize(a) {
      void 0 === a && (console.warn("THREE.Box3: .getSize() target is now required"), a = new p());
      return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
    },
    expandByPoint: function expandByPoint(a) {
      this.min.min(a);
      this.max.max(a);
      return this;
    },
    expandByVector: function expandByVector(a) {
      this.min.sub(a);
      this.max.add(a);
      return this;
    },
    expandByScalar: function expandByScalar(a) {
      this.min.addScalar(-a);
      this.max.addScalar(a);
      return this;
    },
    expandByObject: function () {
      function a(a) {
        var f = a.geometry;
        if (void 0 !== f) if (f.isGeometry) for (f = f.vertices, c = 0, d = f.length; c < d; c++) {
          e.copy(f[c]), e.applyMatrix4(a.matrixWorld), b.expandByPoint(e);
        } else if (f.isBufferGeometry && (f = f.attributes.position, void 0 !== f)) for (c = 0, d = f.count; c < d; c++) {
          e.fromBufferAttribute(f, c).applyMatrix4(a.matrixWorld), b.expandByPoint(e);
        }
      }

      var b,
          c,
          d,
          e = new p();
      return function (c) {
        b = this;
        c.updateMatrixWorld(!0);
        c.traverse(a);
        return this;
      };
    }(),
    containsPoint: function containsPoint(a) {
      return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
    },
    containsBox: function containsBox(a) {
      return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z;
    },
    getParameter: function getParameter(a, b) {
      void 0 === b && (console.warn("THREE.Box3: .getParameter() target is now required"), b = new p());
      return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
    },
    intersectsBox: function intersectsBox(a) {
      return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
    },
    intersectsSphere: function () {
      var a = new p();
      return function (b) {
        this.clampPoint(b.center, a);
        return a.distanceToSquared(b.center) <= b.radius * b.radius;
      };
    }(),
    intersectsPlane: function intersectsPlane(a) {
      if (0 < a.normal.x) {
        var b = a.normal.x * this.min.x;
        var c = a.normal.x * this.max.x;
      } else b = a.normal.x * this.max.x, c = a.normal.x * this.min.x;

      0 < a.normal.y ? (b += a.normal.y * this.min.y, c += a.normal.y * this.max.y) : (b += a.normal.y * this.max.y, c += a.normal.y * this.min.y);
      0 < a.normal.z ? (b += a.normal.z * this.min.z, c += a.normal.z * this.max.z) : (b += a.normal.z * this.max.z, c += a.normal.z * this.min.z);
      return b <= -a.constant && c >= -a.constant;
    },
    intersectsTriangle: function () {
      function a(a) {
        var e;
        var f = 0;

        for (e = a.length - 3; f <= e; f += 3) {
          h.fromArray(a, f);
          var g = m.x * Math.abs(h.x) + m.y * Math.abs(h.y) + m.z * Math.abs(h.z),
              k = b.dot(h),
              l = c.dot(h),
              q = d.dot(h);
          if (Math.max(-Math.max(k, l, q), Math.min(k, l, q)) > g) return !1;
        }

        return !0;
      }

      var b = new p(),
          c = new p(),
          d = new p(),
          e = new p(),
          f = new p(),
          g = new p(),
          h = new p(),
          k = new p(),
          m = new p(),
          l = new p();
      return function (h) {
        if (this.isEmpty()) return !1;
        this.getCenter(k);
        m.subVectors(this.max, k);
        b.subVectors(h.a, k);
        c.subVectors(h.b, k);
        d.subVectors(h.c, k);
        e.subVectors(c, b);
        f.subVectors(d, c);
        g.subVectors(b, d);
        h = [0, -e.z, e.y, 0, -f.z, f.y, 0, -g.z, g.y, e.z, 0, -e.x, f.z, 0, -f.x, g.z, 0, -g.x, -e.y, e.x, 0, -f.y, f.x, 0, -g.y, g.x, 0];
        if (!a(h)) return !1;
        h = [1, 0, 0, 0, 1, 0, 0, 0, 1];
        if (!a(h)) return !1;
        l.crossVectors(e, f);
        h = [l.x, l.y, l.z];
        return a(h);
      };
    }(),
    clampPoint: function clampPoint(a, b) {
      void 0 === b && (console.warn("THREE.Box3: .clampPoint() target is now required"), b = new p());
      return b.copy(a).clamp(this.min, this.max);
    },
    distanceToPoint: function () {
      var a = new p();
      return function (b) {
        return a.copy(b).clamp(this.min, this.max).sub(b).length();
      };
    }(),
    getBoundingSphere: function () {
      var a = new p();
      return function (b) {
        void 0 === b && (console.warn("THREE.Box3: .getBoundingSphere() target is now required"), b = new Ga());
        this.getCenter(b.center);
        b.radius = .5 * this.getSize(a).length();
        return b;
      };
    }(),
    intersect: function intersect(a) {
      this.min.max(a.min);
      this.max.min(a.max);
      this.isEmpty() && this.makeEmpty();
      return this;
    },
    union: function union(a) {
      this.min.min(a.min);
      this.max.max(a.max);
      return this;
    },
    applyMatrix4: function () {
      var a = [new p(), new p(), new p(), new p(), new p(), new p(), new p(), new p()];
      return function (b) {
        if (this.isEmpty()) return this;
        a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);
        a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);
        a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);
        a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);
        a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);
        a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);
        a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);
        a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);
        this.setFromPoints(a);
        return this;
      };
    }(),
    translate: function translate(a) {
      this.min.add(a);
      this.max.add(a);
      return this;
    },
    equals: function equals(a) {
      return a.min.equals(this.min) && a.max.equals(this.max);
    }
  });
  Object.assign(Ga.prototype, {
    set: function set(a, b) {
      this.center.copy(a);
      this.radius = b;
      return this;
    },
    setFromPoints: function () {
      var a = new Wa();
      return function (b, c) {
        var d = this.center;
        void 0 !== c ? d.copy(c) : a.setFromPoints(b).getCenter(d);

        for (var e = c = 0, f = b.length; e < f; e++) {
          c = Math.max(c, d.distanceToSquared(b[e]));
        }

        this.radius = Math.sqrt(c);
        return this;
      };
    }(),
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.center.copy(a.center);
      this.radius = a.radius;
      return this;
    },
    empty: function empty() {
      return 0 >= this.radius;
    },
    containsPoint: function containsPoint(a) {
      return a.distanceToSquared(this.center) <= this.radius * this.radius;
    },
    distanceToPoint: function distanceToPoint(a) {
      return a.distanceTo(this.center) - this.radius;
    },
    intersectsSphere: function intersectsSphere(a) {
      var b = this.radius + a.radius;
      return a.center.distanceToSquared(this.center) <= b * b;
    },
    intersectsBox: function intersectsBox(a) {
      return a.intersectsSphere(this);
    },
    intersectsPlane: function intersectsPlane(a) {
      return Math.abs(a.distanceToPoint(this.center)) <= this.radius;
    },
    clampPoint: function clampPoint(a, b) {
      var c = this.center.distanceToSquared(a);
      void 0 === b && (console.warn("THREE.Sphere: .clampPoint() target is now required"), b = new p());
      b.copy(a);
      c > this.radius * this.radius && (b.sub(this.center).normalize(), b.multiplyScalar(this.radius).add(this.center));
      return b;
    },
    getBoundingBox: function getBoundingBox(a) {
      void 0 === a && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), a = new Wa());
      a.set(this.center, this.center);
      a.expandByScalar(this.radius);
      return a;
    },
    applyMatrix4: function applyMatrix4(a) {
      this.center.applyMatrix4(a);
      this.radius *= a.getMaxScaleOnAxis();
      return this;
    },
    translate: function translate(a) {
      this.center.add(a);
      return this;
    },
    equals: function equals(a) {
      return a.center.equals(this.center) && a.radius === this.radius;
    }
  });
  Object.assign(Pa.prototype, {
    set: function set(a, b) {
      this.normal.copy(a);
      this.constant = b;
      return this;
    },
    setComponents: function setComponents(a, b, c, d) {
      this.normal.set(a, b, c);
      this.constant = d;
      return this;
    },
    setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(a, b) {
      this.normal.copy(a);
      this.constant = -b.dot(this.normal);
      return this;
    },
    setFromCoplanarPoints: function () {
      var a = new p(),
          b = new p();
      return function (c, d, e) {
        d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();
        this.setFromNormalAndCoplanarPoint(d, c);
        return this;
      };
    }(),
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.normal.copy(a.normal);
      this.constant = a.constant;
      return this;
    },
    normalize: function normalize() {
      var a = 1 / this.normal.length();
      this.normal.multiplyScalar(a);
      this.constant *= a;
      return this;
    },
    negate: function negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    },
    distanceToPoint: function distanceToPoint(a) {
      return this.normal.dot(a) + this.constant;
    },
    distanceToSphere: function distanceToSphere(a) {
      return this.distanceToPoint(a.center) - a.radius;
    },
    projectPoint: function projectPoint(a, b) {
      void 0 === b && (console.warn("THREE.Plane: .projectPoint() target is now required"), b = new p());
      return b.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a);
    },
    intersectLine: function () {
      var a = new p();
      return function (b, c) {
        void 0 === c && (console.warn("THREE.Plane: .intersectLine() target is now required"), c = new p());
        var d = b.delta(a),
            e = this.normal.dot(d);

        if (0 === e) {
          if (0 === this.distanceToPoint(b.start)) return c.copy(b.start);
        } else if (e = -(b.start.dot(this.normal) + this.constant) / e, !(0 > e || 1 < e)) return c.copy(d).multiplyScalar(e).add(b.start);
      };
    }(),
    intersectsLine: function intersectsLine(a) {
      var b = this.distanceToPoint(a.start);
      a = this.distanceToPoint(a.end);
      return 0 > b && 0 < a || 0 > a && 0 < b;
    },
    intersectsBox: function intersectsBox(a) {
      return a.intersectsPlane(this);
    },
    intersectsSphere: function intersectsSphere(a) {
      return a.intersectsPlane(this);
    },
    coplanarPoint: function coplanarPoint(a) {
      void 0 === a && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), a = new p());
      return a.copy(this.normal).multiplyScalar(-this.constant);
    },
    applyMatrix4: function () {
      var a = new p(),
          b = new da();
      return function (c, d) {
        d = d || b.getNormalMatrix(c);
        c = this.coplanarPoint(a).applyMatrix4(c);
        d = this.normal.applyMatrix3(d).normalize();
        this.constant = -c.dot(d);
        return this;
      };
    }(),
    translate: function translate(a) {
      this.constant -= a.dot(this.normal);
      return this;
    },
    equals: function equals(a) {
      return a.normal.equals(this.normal) && a.constant === this.constant;
    }
  });
  Object.assign(rd.prototype, {
    set: function set(a, b, c, d, e, f) {
      var g = this.planes;
      g[0].copy(a);
      g[1].copy(b);
      g[2].copy(c);
      g[3].copy(d);
      g[4].copy(e);
      g[5].copy(f);
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      for (var b = this.planes, c = 0; 6 > c; c++) {
        b[c].copy(a.planes[c]);
      }

      return this;
    },
    setFromMatrix: function setFromMatrix(a) {
      var b = this.planes,
          c = a.elements;
      a = c[0];
      var d = c[1],
          e = c[2],
          f = c[3],
          g = c[4],
          h = c[5],
          k = c[6],
          m = c[7],
          l = c[8],
          n = c[9],
          r = c[10],
          p = c[11],
          t = c[12],
          u = c[13],
          w = c[14];
      c = c[15];
      b[0].setComponents(f - a, m - g, p - l, c - t).normalize();
      b[1].setComponents(f + a, m + g, p + l, c + t).normalize();
      b[2].setComponents(f + d, m + h, p + n, c + u).normalize();
      b[3].setComponents(f - d, m - h, p - n, c - u).normalize();
      b[4].setComponents(f - e, m - k, p - r, c - w).normalize();
      b[5].setComponents(f + e, m + k, p + r, c + w).normalize();
      return this;
    },
    intersectsObject: function () {
      var a = new Ga();
      return function (b) {
        var c = b.geometry;
        null === c.boundingSphere && c.computeBoundingSphere();
        a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);
        return this.intersectsSphere(a);
      };
    }(),
    intersectsSprite: function () {
      var a = new Ga();
      return function (b) {
        a.center.set(0, 0, 0);
        a.radius = .7071067811865476;
        a.applyMatrix4(b.matrixWorld);
        return this.intersectsSphere(a);
      };
    }(),
    intersectsSphere: function intersectsSphere(a) {
      var b = this.planes,
          c = a.center;
      a = -a.radius;

      for (var d = 0; 6 > d; d++) {
        if (b[d].distanceToPoint(c) < a) return !1;
      }

      return !0;
    },
    intersectsBox: function () {
      var a = new p();
      return function (b) {
        for (var c = this.planes, d = 0; 6 > d; d++) {
          var e = c[d];
          a.x = 0 < e.normal.x ? b.max.x : b.min.x;
          a.y = 0 < e.normal.y ? b.max.y : b.min.y;
          a.z = 0 < e.normal.z ? b.max.z : b.min.z;
          if (0 > e.distanceToPoint(a)) return !1;
        }

        return !0;
      };
    }(),
    containsPoint: function containsPoint(a) {
      for (var b = this.planes, c = 0; 6 > c; c++) {
        if (0 > b[c].distanceToPoint(a)) return !1;
      }

      return !0;
    }
  });
  var K = {
    alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",
    alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",
    alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",
    aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",
    aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
    begin_vertex: "\nvec3 transformed = vec3( position );\n",
    beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n",
    bsdfs: "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",
    bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",
    clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n",
    clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",
    clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif\n",
    clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",
    color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
    color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",
    color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
    color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",
    common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",
    cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",
    defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",
    displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",
    displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",
    emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",
    emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",
    encodings_fragment: "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",
    encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}\n",
    envmap_fragment: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
    envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",
    envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",
    envmap_physical_pars_fragment: "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
    envmap_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",
    fog_vertex: "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif\n",
    fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif\n",
    fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",
    fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",
    gradientmap_pars_fragment: "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",
    lightmap_fragment: "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",
    lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
    lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",
    lights_pars_begin: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n",
    lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",
    lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",
    lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",
    lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",
    lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n",
    lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n",
    lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",
    logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
    logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif\n",
    logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif\n",
    logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",
    map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",
    map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",
    map_particle_fragment: "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",
    map_particle_pars_fragment: "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",
    metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",
    metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
    morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",
    morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
    morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",
    normal_fragment_begin: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n",
    normal_fragment_maps: "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",
    normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n",
    packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
    premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",
    project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",
    dithering_fragment: "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",
    dithering_pars_fragment: "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",
    roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",
    roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
    shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
    shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",
    shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",
    shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",
    skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
    skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",
    skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",
    skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",
    specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
    specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
    tonemapping_fragment: "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",
    tonemapping_pars_fragment: "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",
    uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",
    uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",
    uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
    uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
    uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
    uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",
    worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",
    background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n}\n",
    background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position, 1.0 );\n\tgl_Position.z = 1.0;\n}\n",
    cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",
    cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",
    depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",
    depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
    distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",
    distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",
    equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",
    equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
    linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",
    meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\tvec4 matcapColor = texture2D( matcap, uv );\n\tmatcapColor = matcapTexelToLinear( matcapColor );\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}\n",
    meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",
    normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",
    points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n",
    shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",
    shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n"
  },
      va = {
    merge: function merge(a) {
      for (var b = {}, c = 0; c < a.length; c++) {
        var d = this.clone(a[c]),
            e;

        for (e in d) {
          b[e] = d[e];
        }
      }

      return b;
    },
    clone: function clone(a) {
      var b = {},
          c;

      for (c in a) {
        b[c] = {};

        for (var d in a[c]) {
          var e = a[c][d];
          e && (e.isColor || e.isMatrix3 || e.isMatrix4 || e.isVector2 || e.isVector3 || e.isVector4 || e.isTexture) ? b[c][d] = e.clone() : Array.isArray(e) ? b[c][d] = e.slice() : b[c][d] = e;
        }
      }

      return b;
    }
  },
      $g = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  Object.assign(G.prototype, {
    isColor: !0,
    r: 1,
    g: 1,
    b: 1,
    set: function set(a) {
      a && a.isColor ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);
      return this;
    },
    setScalar: function setScalar(a) {
      this.b = this.g = this.r = a;
      return this;
    },
    setHex: function setHex(a) {
      a = Math.floor(a);
      this.r = (a >> 16 & 255) / 255;
      this.g = (a >> 8 & 255) / 255;
      this.b = (a & 255) / 255;
      return this;
    },
    setRGB: function setRGB(a, b, c) {
      this.r = a;
      this.g = b;
      this.b = c;
      return this;
    },
    setHSL: function () {
      function a(a, c, d) {
        0 > d && (d += 1);
        1 < d && --d;
        return d < 1 / 6 ? a + 6 * (c - a) * d : .5 > d ? c : d < 2 / 3 ? a + 6 * (c - a) * (2 / 3 - d) : a;
      }

      return function (b, c, d) {
        b = R.euclideanModulo(b, 1);
        c = R.clamp(c, 0, 1);
        d = R.clamp(d, 0, 1);
        0 === c ? this.r = this.g = this.b = d : (c = .5 >= d ? d * (1 + c) : d + c - d * c, d = 2 * d - c, this.r = a(d, c, b + 1 / 3), this.g = a(d, c, b), this.b = a(d, c, b - 1 / 3));
        return this;
      };
    }(),
    setStyle: function setStyle(a) {
      function b(b) {
        void 0 !== b && 1 > parseFloat(b) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
      }

      var c;

      if (c = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
        var d = c[2];

        switch (c[1]) {
          case "rgb":
          case "rgba":
            if (c = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(255, parseInt(c[1], 10)) / 255, this.g = Math.min(255, parseInt(c[2], 10)) / 255, this.b = Math.min(255, parseInt(c[3], 10)) / 255, b(c[5]), this;
            if (c = /^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(100, parseInt(c[1], 10)) / 100, this.g = Math.min(100, parseInt(c[2], 10)) / 100, this.b = Math.min(100, parseInt(c[3], 10)) / 100, b(c[5]), this;
            break;

          case "hsl":
          case "hsla":
            if (c = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) {
              d = parseFloat(c[1]) / 360;
              var e = parseInt(c[2], 10) / 100,
                  f = parseInt(c[3], 10) / 100;
              b(c[5]);
              return this.setHSL(d, e, f);
            }

        }
      } else if (c = /^#([A-Fa-f0-9]+)$/.exec(a)) {
        c = c[1];
        d = c.length;
        if (3 === d) return this.r = parseInt(c.charAt(0) + c.charAt(0), 16) / 255, this.g = parseInt(c.charAt(1) + c.charAt(1), 16) / 255, this.b = parseInt(c.charAt(2) + c.charAt(2), 16) / 255, this;
        if (6 === d) return this.r = parseInt(c.charAt(0) + c.charAt(1), 16) / 255, this.g = parseInt(c.charAt(2) + c.charAt(3), 16) / 255, this.b = parseInt(c.charAt(4) + c.charAt(5), 16) / 255, this;
      }

      a && 0 < a.length && (c = $g[a], void 0 !== c ? this.setHex(c) : console.warn("THREE.Color: Unknown color " + a));
      return this;
    },
    clone: function clone() {
      return new this.constructor(this.r, this.g, this.b);
    },
    copy: function copy(a) {
      this.r = a.r;
      this.g = a.g;
      this.b = a.b;
      return this;
    },
    copyGammaToLinear: function copyGammaToLinear(a, b) {
      void 0 === b && (b = 2);
      this.r = Math.pow(a.r, b);
      this.g = Math.pow(a.g, b);
      this.b = Math.pow(a.b, b);
      return this;
    },
    copyLinearToGamma: function copyLinearToGamma(a, b) {
      void 0 === b && (b = 2);
      b = 0 < b ? 1 / b : 1;
      this.r = Math.pow(a.r, b);
      this.g = Math.pow(a.g, b);
      this.b = Math.pow(a.b, b);
      return this;
    },
    convertGammaToLinear: function convertGammaToLinear(a) {
      this.copyGammaToLinear(this, a);
      return this;
    },
    convertLinearToGamma: function convertLinearToGamma(a) {
      this.copyLinearToGamma(this, a);
      return this;
    },
    copySRGBToLinear: function () {
      function a(a) {
        return .04045 > a ? .0773993808 * a : Math.pow(.9478672986 * a + .0521327014, 2.4);
      }

      return function (b) {
        this.r = a(b.r);
        this.g = a(b.g);
        this.b = a(b.b);
        return this;
      };
    }(),
    copyLinearToSRGB: function () {
      function a(a) {
        return .0031308 > a ? 12.92 * a : 1.055 * Math.pow(a, .41666) - .055;
      }

      return function (b) {
        this.r = a(b.r);
        this.g = a(b.g);
        this.b = a(b.b);
        return this;
      };
    }(),
    convertSRGBToLinear: function convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    },
    convertLinearToSRGB: function convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    },
    getHex: function getHex() {
      return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
    },
    getHexString: function getHexString() {
      return ("000000" + this.getHex().toString(16)).slice(-6);
    },
    getHSL: function getHSL(a) {
      void 0 === a && (console.warn("THREE.Color: .getHSL() target is now required"), a = {
        h: 0,
        s: 0,
        l: 0
      });
      var b = this.r,
          c = this.g,
          d = this.b,
          e = Math.max(b, c, d),
          f = Math.min(b, c, d),
          g,
          h = (f + e) / 2;
      if (f === e) f = g = 0;else {
        var k = e - f;
        f = .5 >= h ? k / (e + f) : k / (2 - e - f);

        switch (e) {
          case b:
            g = (c - d) / k + (c < d ? 6 : 0);
            break;

          case c:
            g = (d - b) / k + 2;
            break;

          case d:
            g = (b - c) / k + 4;
        }

        g /= 6;
      }
      a.h = g;
      a.s = f;
      a.l = h;
      return a;
    },
    getStyle: function getStyle() {
      return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
    },
    offsetHSL: function () {
      var a = {};
      return function (b, c, d) {
        this.getHSL(a);
        a.h += b;
        a.s += c;
        a.l += d;
        this.setHSL(a.h, a.s, a.l);
        return this;
      };
    }(),
    add: function add(a) {
      this.r += a.r;
      this.g += a.g;
      this.b += a.b;
      return this;
    },
    addColors: function addColors(a, b) {
      this.r = a.r + b.r;
      this.g = a.g + b.g;
      this.b = a.b + b.b;
      return this;
    },
    addScalar: function addScalar(a) {
      this.r += a;
      this.g += a;
      this.b += a;
      return this;
    },
    sub: function sub(a) {
      this.r = Math.max(0, this.r - a.r);
      this.g = Math.max(0, this.g - a.g);
      this.b = Math.max(0, this.b - a.b);
      return this;
    },
    multiply: function multiply(a) {
      this.r *= a.r;
      this.g *= a.g;
      this.b *= a.b;
      return this;
    },
    multiplyScalar: function multiplyScalar(a) {
      this.r *= a;
      this.g *= a;
      this.b *= a;
      return this;
    },
    lerp: function lerp(a, b) {
      this.r += (a.r - this.r) * b;
      this.g += (a.g - this.g) * b;
      this.b += (a.b - this.b) * b;
      return this;
    },
    lerpHSL: function () {
      var a = {
        h: 0,
        s: 0,
        l: 0
      },
          b = {
        h: 0,
        s: 0,
        l: 0
      };
      return function (c, d) {
        this.getHSL(a);
        c.getHSL(b);
        c = R.lerp(a.h, b.h, d);
        var e = R.lerp(a.s, b.s, d);
        d = R.lerp(a.l, b.l, d);
        this.setHSL(c, e, d);
        return this;
      };
    }(),
    equals: function equals(a) {
      return a.r === this.r && a.g === this.g && a.b === this.b;
    },
    fromArray: function fromArray(a, b) {
      void 0 === b && (b = 0);
      this.r = a[b];
      this.g = a[b + 1];
      this.b = a[b + 2];
      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      a[b] = this.r;
      a[b + 1] = this.g;
      a[b + 2] = this.b;
      return a;
    },
    toJSON: function toJSON() {
      return this.getHex();
    }
  });
  var J = {
    common: {
      diffuse: {
        value: new G(15658734)
      },
      opacity: {
        value: 1
      },
      map: {
        value: null
      },
      uvTransform: {
        value: new da()
      },
      alphaMap: {
        value: null
      }
    },
    specularmap: {
      specularMap: {
        value: null
      }
    },
    envmap: {
      envMap: {
        value: null
      },
      flipEnvMap: {
        value: -1
      },
      reflectivity: {
        value: 1
      },
      refractionRatio: {
        value: .98
      },
      maxMipLevel: {
        value: 0
      }
    },
    aomap: {
      aoMap: {
        value: null
      },
      aoMapIntensity: {
        value: 1
      }
    },
    lightmap: {
      lightMap: {
        value: null
      },
      lightMapIntensity: {
        value: 1
      }
    },
    emissivemap: {
      emissiveMap: {
        value: null
      }
    },
    bumpmap: {
      bumpMap: {
        value: null
      },
      bumpScale: {
        value: 1
      }
    },
    normalmap: {
      normalMap: {
        value: null
      },
      normalScale: {
        value: new z(1, 1)
      }
    },
    displacementmap: {
      displacementMap: {
        value: null
      },
      displacementScale: {
        value: 1
      },
      displacementBias: {
        value: 0
      }
    },
    roughnessmap: {
      roughnessMap: {
        value: null
      }
    },
    metalnessmap: {
      metalnessMap: {
        value: null
      }
    },
    gradientmap: {
      gradientMap: {
        value: null
      }
    },
    fog: {
      fogDensity: {
        value: 2.5E-4
      },
      fogNear: {
        value: 1
      },
      fogFar: {
        value: 2E3
      },
      fogColor: {
        value: new G(16777215)
      }
    },
    lights: {
      ambientLightColor: {
        value: []
      },
      directionalLights: {
        value: [],
        properties: {
          direction: {},
          color: {},
          shadow: {},
          shadowBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        }
      },
      directionalShadowMap: {
        value: []
      },
      directionalShadowMatrix: {
        value: []
      },
      spotLights: {
        value: [],
        properties: {
          color: {},
          position: {},
          direction: {},
          distance: {},
          coneCos: {},
          penumbraCos: {},
          decay: {},
          shadow: {},
          shadowBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        }
      },
      spotShadowMap: {
        value: []
      },
      spotShadowMatrix: {
        value: []
      },
      pointLights: {
        value: [],
        properties: {
          color: {},
          position: {},
          decay: {},
          distance: {},
          shadow: {},
          shadowBias: {},
          shadowRadius: {},
          shadowMapSize: {},
          shadowCameraNear: {},
          shadowCameraFar: {}
        }
      },
      pointShadowMap: {
        value: []
      },
      pointShadowMatrix: {
        value: []
      },
      hemisphereLights: {
        value: [],
        properties: {
          direction: {},
          skyColor: {},
          groundColor: {}
        }
      },
      rectAreaLights: {
        value: [],
        properties: {
          color: {},
          position: {},
          width: {},
          height: {}
        }
      }
    },
    points: {
      diffuse: {
        value: new G(15658734)
      },
      opacity: {
        value: 1
      },
      size: {
        value: 1
      },
      scale: {
        value: 1
      },
      map: {
        value: null
      },
      uvTransform: {
        value: new da()
      }
    },
    sprite: {
      diffuse: {
        value: new G(15658734)
      },
      opacity: {
        value: 1
      },
      center: {
        value: new z(.5, .5)
      },
      rotation: {
        value: 0
      },
      map: {
        value: null
      },
      uvTransform: {
        value: new da()
      }
    }
  },
      Qa = {
    basic: {
      uniforms: va.merge([J.common, J.specularmap, J.envmap, J.aomap, J.lightmap, J.fog]),
      vertexShader: K.meshbasic_vert,
      fragmentShader: K.meshbasic_frag
    },
    lambert: {
      uniforms: va.merge([J.common, J.specularmap, J.envmap, J.aomap, J.lightmap, J.emissivemap, J.fog, J.lights, {
        emissive: {
          value: new G(0)
        }
      }]),
      vertexShader: K.meshlambert_vert,
      fragmentShader: K.meshlambert_frag
    },
    phong: {
      uniforms: va.merge([J.common, J.specularmap, J.envmap, J.aomap, J.lightmap, J.emissivemap, J.bumpmap, J.normalmap, J.displacementmap, J.gradientmap, J.fog, J.lights, {
        emissive: {
          value: new G(0)
        },
        specular: {
          value: new G(1118481)
        },
        shininess: {
          value: 30
        }
      }]),
      vertexShader: K.meshphong_vert,
      fragmentShader: K.meshphong_frag
    },
    standard: {
      uniforms: va.merge([J.common, J.envmap, J.aomap, J.lightmap, J.emissivemap, J.bumpmap, J.normalmap, J.displacementmap, J.roughnessmap, J.metalnessmap, J.fog, J.lights, {
        emissive: {
          value: new G(0)
        },
        roughness: {
          value: .5
        },
        metalness: {
          value: .5
        },
        envMapIntensity: {
          value: 1
        }
      }]),
      vertexShader: K.meshphysical_vert,
      fragmentShader: K.meshphysical_frag
    },
    matcap: {
      uniforms: va.merge([J.common, J.bumpmap, J.normalmap, J.displacementmap, J.fog, {
        matcap: {
          value: null
        }
      }]),
      vertexShader: K.meshmatcap_vert,
      fragmentShader: K.meshmatcap_frag
    },
    points: {
      uniforms: va.merge([J.points, J.fog]),
      vertexShader: K.points_vert,
      fragmentShader: K.points_frag
    },
    dashed: {
      uniforms: va.merge([J.common, J.fog, {
        scale: {
          value: 1
        },
        dashSize: {
          value: 1
        },
        totalSize: {
          value: 2
        }
      }]),
      vertexShader: K.linedashed_vert,
      fragmentShader: K.linedashed_frag
    },
    depth: {
      uniforms: va.merge([J.common, J.displacementmap]),
      vertexShader: K.depth_vert,
      fragmentShader: K.depth_frag
    },
    normal: {
      uniforms: va.merge([J.common, J.bumpmap, J.normalmap, J.displacementmap, {
        opacity: {
          value: 1
        }
      }]),
      vertexShader: K.normal_vert,
      fragmentShader: K.normal_frag
    },
    sprite: {
      uniforms: va.merge([J.sprite, J.fog]),
      vertexShader: K.sprite_vert,
      fragmentShader: K.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: {
          value: new da()
        },
        t2D: {
          value: null
        }
      },
      vertexShader: K.background_vert,
      fragmentShader: K.background_frag
    },
    cube: {
      uniforms: {
        tCube: {
          value: null
        },
        tFlip: {
          value: -1
        },
        opacity: {
          value: 1
        }
      },
      vertexShader: K.cube_vert,
      fragmentShader: K.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: {
          value: null
        }
      },
      vertexShader: K.equirect_vert,
      fragmentShader: K.equirect_frag
    },
    distanceRGBA: {
      uniforms: va.merge([J.common, J.displacementmap, {
        referencePosition: {
          value: new p()
        },
        nearDistance: {
          value: 1
        },
        farDistance: {
          value: 1E3
        }
      }]),
      vertexShader: K.distanceRGBA_vert,
      fragmentShader: K.distanceRGBA_frag
    },
    shadow: {
      uniforms: va.merge([J.lights, J.fog, {
        color: {
          value: new G(0)
        },
        opacity: {
          value: 1
        }
      }]),
      vertexShader: K.shadow_vert,
      fragmentShader: K.shadow_frag
    }
  };
  Qa.physical = {
    uniforms: va.merge([Qa.standard.uniforms, {
      clearCoat: {
        value: 0
      },
      clearCoatRoughness: {
        value: 0
      }
    }]),
    vertexShader: K.meshphysical_vert,
    fragmentShader: K.meshphysical_frag
  };
  Object.assign(Xa.prototype, {
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.a = a.a;
      this.b = a.b;
      this.c = a.c;
      this.normal.copy(a.normal);
      this.color.copy(a.color);
      this.materialIndex = a.materialIndex;

      for (var b = 0, c = a.vertexNormals.length; b < c; b++) {
        this.vertexNormals[b] = a.vertexNormals[b].clone();
      }

      b = 0;

      for (c = a.vertexColors.length; b < c; b++) {
        this.vertexColors[b] = a.vertexColors[b].clone();
      }

      return this;
    }
  });
  mb.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
  mb.DefaultOrder = "XYZ";
  Object.defineProperties(mb.prototype, {
    x: {
      get: function get() {
        return this._x;
      },
      set: function set(a) {
        this._x = a;
        this.onChangeCallback();
      }
    },
    y: {
      get: function get() {
        return this._y;
      },
      set: function set(a) {
        this._y = a;
        this.onChangeCallback();
      }
    },
    z: {
      get: function get() {
        return this._z;
      },
      set: function set(a) {
        this._z = a;
        this.onChangeCallback();
      }
    },
    order: {
      get: function get() {
        return this._order;
      },
      set: function set(a) {
        this._order = a;
        this.onChangeCallback();
      }
    }
  });
  Object.assign(mb.prototype, {
    isEuler: !0,
    set: function set(a, b, c, d) {
      this._x = a;
      this._y = b;
      this._z = c;
      this._order = d || this._order;
      this.onChangeCallback();
      return this;
    },
    clone: function clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    },
    copy: function copy(a) {
      this._x = a._x;
      this._y = a._y;
      this._z = a._z;
      this._order = a._order;
      this.onChangeCallback();
      return this;
    },
    setFromRotationMatrix: function setFromRotationMatrix(a, b, c) {
      var d = R.clamp,
          e = a.elements;
      a = e[0];
      var f = e[4],
          g = e[8],
          h = e[1],
          k = e[5],
          m = e[9],
          l = e[2],
          n = e[6];
      e = e[10];
      b = b || this._order;
      "XYZ" === b ? (this._y = Math.asin(d(g, -1, 1)), .99999 > Math.abs(g) ? (this._x = Math.atan2(-m, e), this._z = Math.atan2(-f, a)) : (this._x = Math.atan2(n, k), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-d(m, -1, 1)), .99999 > Math.abs(m) ? (this._y = Math.atan2(g, e), this._z = Math.atan2(h, k)) : (this._y = Math.atan2(-l, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(d(n, -1, 1)), .99999 > Math.abs(n) ? (this._y = Math.atan2(-l, e), this._z = Math.atan2(-f, k)) : (this._y = 0, this._z = Math.atan2(h, a))) : "ZYX" === b ? (this._y = Math.asin(-d(l, -1, 1)), .99999 > Math.abs(l) ? (this._x = Math.atan2(n, e), this._z = Math.atan2(h, a)) : (this._x = 0, this._z = Math.atan2(-f, k))) : "YZX" === b ? (this._z = Math.asin(d(h, -1, 1)), .99999 > Math.abs(h) ? (this._x = Math.atan2(-m, k), this._y = Math.atan2(-l, a)) : (this._x = 0, this._y = Math.atan2(g, e))) : "XZY" === b ? (this._z = Math.asin(-d(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(n, k), this._y = Math.atan2(g, a)) : (this._x = Math.atan2(-m, e), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);
      this._order = b;
      if (!1 !== c) this.onChangeCallback();
      return this;
    },
    setFromQuaternion: function () {
      var a = new P();
      return function (b, c, d) {
        a.makeRotationFromQuaternion(b);
        return this.setFromRotationMatrix(a, c, d);
      };
    }(),
    setFromVector3: function setFromVector3(a, b) {
      return this.set(a.x, a.y, a.z, b || this._order);
    },
    reorder: function () {
      var a = new ja();
      return function (b) {
        a.setFromEuler(this);
        return this.setFromQuaternion(a, b);
      };
    }(),
    equals: function equals(a) {
      return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
    },
    fromArray: function fromArray(a) {
      this._x = a[0];
      this._y = a[1];
      this._z = a[2];
      void 0 !== a[3] && (this._order = a[3]);
      this.onChangeCallback();
      return this;
    },
    toArray: function toArray(a, b) {
      void 0 === a && (a = []);
      void 0 === b && (b = 0);
      a[b] = this._x;
      a[b + 1] = this._y;
      a[b + 2] = this._z;
      a[b + 3] = this._order;
      return a;
    },
    toVector3: function toVector3(a) {
      return a ? a.set(this._x, this._y, this._z) : new p(this._x, this._y, this._z);
    },
    onChange: function onChange(a) {
      this.onChangeCallback = a;
      return this;
    },
    onChangeCallback: function onChangeCallback() {}
  });
  Object.assign(Yd.prototype, {
    set: function set(a) {
      this.mask = 1 << a | 0;
    },
    enable: function enable(a) {
      this.mask = this.mask | 1 << a | 0;
    },
    toggle: function toggle(a) {
      this.mask ^= 1 << a | 0;
    },
    disable: function disable(a) {
      this.mask &= ~(1 << a | 0);
    },
    test: function test(a) {
      return 0 !== (this.mask & a.mask);
    }
  });
  var Mf = 0;
  D.DefaultUp = new p(0, 1, 0);
  D.DefaultMatrixAutoUpdate = !0;
  D.prototype = Object.assign(Object.create(ia.prototype), {
    constructor: D,
    isObject3D: !0,
    onBeforeRender: function onBeforeRender() {},
    onAfterRender: function onAfterRender() {},
    applyMatrix: function applyMatrix(a) {
      this.matrix.multiplyMatrices(a, this.matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    },
    applyQuaternion: function applyQuaternion(a) {
      this.quaternion.premultiply(a);
      return this;
    },
    setRotationFromAxisAngle: function setRotationFromAxisAngle(a, b) {
      this.quaternion.setFromAxisAngle(a, b);
    },
    setRotationFromEuler: function setRotationFromEuler(a) {
      this.quaternion.setFromEuler(a, !0);
    },
    setRotationFromMatrix: function setRotationFromMatrix(a) {
      this.quaternion.setFromRotationMatrix(a);
    },
    setRotationFromQuaternion: function setRotationFromQuaternion(a) {
      this.quaternion.copy(a);
    },
    rotateOnAxis: function () {
      var a = new ja();
      return function (b, c) {
        a.setFromAxisAngle(b, c);
        this.quaternion.multiply(a);
        return this;
      };
    }(),
    rotateOnWorldAxis: function () {
      var a = new ja();
      return function (b, c) {
        a.setFromAxisAngle(b, c);
        this.quaternion.premultiply(a);
        return this;
      };
    }(),
    rotateX: function () {
      var a = new p(1, 0, 0);
      return function (b) {
        return this.rotateOnAxis(a, b);
      };
    }(),
    rotateY: function () {
      var a = new p(0, 1, 0);
      return function (b) {
        return this.rotateOnAxis(a, b);
      };
    }(),
    rotateZ: function () {
      var a = new p(0, 0, 1);
      return function (b) {
        return this.rotateOnAxis(a, b);
      };
    }(),
    translateOnAxis: function () {
      var a = new p();
      return function (b, c) {
        a.copy(b).applyQuaternion(this.quaternion);
        this.position.add(a.multiplyScalar(c));
        return this;
      };
    }(),
    translateX: function () {
      var a = new p(1, 0, 0);
      return function (b) {
        return this.translateOnAxis(a, b);
      };
    }(),
    translateY: function () {
      var a = new p(0, 1, 0);
      return function (b) {
        return this.translateOnAxis(a, b);
      };
    }(),
    translateZ: function () {
      var a = new p(0, 0, 1);
      return function (b) {
        return this.translateOnAxis(a, b);
      };
    }(),
    localToWorld: function localToWorld(a) {
      return a.applyMatrix4(this.matrixWorld);
    },
    worldToLocal: function () {
      var a = new P();
      return function (b) {
        return b.applyMatrix4(a.getInverse(this.matrixWorld));
      };
    }(),
    lookAt: function () {
      var a = new ja(),
          b = new P(),
          c = new p(),
          d = new p();
      return function (e, f, g) {
        e.isVector3 ? c.copy(e) : c.set(e, f, g);
        e = this.parent;
        this.updateWorldMatrix(!0, !1);
        d.setFromMatrixPosition(this.matrixWorld);
        this.isCamera ? b.lookAt(d, c, this.up) : b.lookAt(c, d, this.up);
        this.quaternion.setFromRotationMatrix(b);
        e && (b.extractRotation(e.matrixWorld), a.setFromRotationMatrix(b), this.quaternion.premultiply(a.inverse()));
      };
    }(),
    add: function add(a) {
      if (1 < arguments.length) {
        for (var b = 0; b < arguments.length; b++) {
          this.add(arguments[b]);
        }

        return this;
      }

      if (a === this) return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
      a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({
        type: "added"
      }), this.children.push(a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
      return this;
    },
    remove: function remove(a) {
      if (1 < arguments.length) {
        for (var b = 0; b < arguments.length; b++) {
          this.remove(arguments[b]);
        }

        return this;
      }

      b = this.children.indexOf(a);
      -1 !== b && (a.parent = null, a.dispatchEvent({
        type: "removed"
      }), this.children.splice(b, 1));
      return this;
    },
    getObjectById: function getObjectById(a) {
      return this.getObjectByProperty("id", a);
    },
    getObjectByName: function getObjectByName(a) {
      return this.getObjectByProperty("name", a);
    },
    getObjectByProperty: function getObjectByProperty(a, b) {
      if (this[a] === b) return this;

      for (var c = 0, d = this.children.length; c < d; c++) {
        var e = this.children[c].getObjectByProperty(a, b);
        if (void 0 !== e) return e;
      }
    },
    getWorldPosition: function getWorldPosition(a) {
      void 0 === a && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), a = new p());
      this.updateMatrixWorld(!0);
      return a.setFromMatrixPosition(this.matrixWorld);
    },
    getWorldQuaternion: function () {
      var a = new p(),
          b = new p();
      return function (c) {
        void 0 === c && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), c = new ja());
        this.updateMatrixWorld(!0);
        this.matrixWorld.decompose(a, c, b);
        return c;
      };
    }(),
    getWorldScale: function () {
      var a = new p(),
          b = new ja();
      return function (c) {
        void 0 === c && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), c = new p());
        this.updateMatrixWorld(!0);
        this.matrixWorld.decompose(a, b, c);
        return c;
      };
    }(),
    getWorldDirection: function getWorldDirection(a) {
      void 0 === a && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), a = new p());
      this.updateMatrixWorld(!0);
      var b = this.matrixWorld.elements;
      return a.set(b[8], b[9], b[10]).normalize();
    },
    raycast: function raycast() {},
    traverse: function traverse(a) {
      a(this);

      for (var b = this.children, c = 0, d = b.length; c < d; c++) {
        b[c].traverse(a);
      }
    },
    traverseVisible: function traverseVisible(a) {
      if (!1 !== this.visible) {
        a(this);

        for (var b = this.children, c = 0, d = b.length; c < d; c++) {
          b[c].traverseVisible(a);
        }
      }
    },
    traverseAncestors: function traverseAncestors(a) {
      var b = this.parent;
      null !== b && (a(b), b.traverseAncestors(a));
    },
    updateMatrix: function updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = !0;
    },
    updateMatrixWorld: function updateMatrixWorld(a) {
      this.matrixAutoUpdate && this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || a) null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;

      for (var b = this.children, c = 0, d = b.length; c < d; c++) {
        b[c].updateMatrixWorld(a);
      }
    },
    updateWorldMatrix: function updateWorldMatrix(a, b) {
      var c = this.parent;
      !0 === a && null !== c && c.updateWorldMatrix(!0, !1);
      this.matrixAutoUpdate && this.updateMatrix();
      null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      if (!0 === b) for (a = this.children, b = 0, c = a.length; b < c; b++) {
        a[b].updateWorldMatrix(!1, !0);
      }
    },
    toJSON: function toJSON(a) {
      function b(b, c) {
        void 0 === b[c.uuid] && (b[c.uuid] = c.toJSON(a));
        return c.uuid;
      }

      function c(a) {
        var b = [],
            c;

        for (c in a) {
          var d = a[c];
          delete d.metadata;
          b.push(d);
        }

        return b;
      }

      var d = void 0 === a || "string" === typeof a,
          e = {};
      d && (a = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {}
      }, e.metadata = {
        version: 4.5,
        type: "Object",
        generator: "Object3D.toJSON"
      });
      var f = {};
      f.uuid = this.uuid;
      f.type = this.type;
      "" !== this.name && (f.name = this.name);
      !0 === this.castShadow && (f.castShadow = !0);
      !0 === this.receiveShadow && (f.receiveShadow = !0);
      !1 === this.visible && (f.visible = !1);
      !1 === this.frustumCulled && (f.frustumCulled = !1);
      0 !== this.renderOrder && (f.renderOrder = this.renderOrder);
      "{}" !== JSON.stringify(this.userData) && (f.userData = this.userData);
      f.layers = this.layers.mask;
      f.matrix = this.matrix.toArray();
      !1 === this.matrixAutoUpdate && (f.matrixAutoUpdate = !1);

      if (this.isMesh || this.isLine || this.isPoints) {
        f.geometry = b(a.geometries, this.geometry);
        var g = this.geometry.parameters;
        if (void 0 !== g && void 0 !== g.shapes) if (g = g.shapes, Array.isArray(g)) for (var h = 0, k = g.length; h < k; h++) {
          b(a.shapes, g[h]);
        } else b(a.shapes, g);
      }

      if (void 0 !== this.material) if (Array.isArray(this.material)) {
        g = [];
        h = 0;

        for (k = this.material.length; h < k; h++) {
          g.push(b(a.materials, this.material[h]));
        }

        f.material = g;
      } else f.material = b(a.materials, this.material);
      if (0 < this.children.length) for (f.children = [], h = 0; h < this.children.length; h++) {
        f.children.push(this.children[h].toJSON(a).object);
      }

      if (d) {
        d = c(a.geometries);
        h = c(a.materials);
        k = c(a.textures);
        var m = c(a.images);
        g = c(a.shapes);
        0 < d.length && (e.geometries = d);
        0 < h.length && (e.materials = h);
        0 < k.length && (e.textures = k);
        0 < m.length && (e.images = m);
        0 < g.length && (e.shapes = g);
      }

      e.object = f;
      return e;
    },
    clone: function clone(a) {
      return new this.constructor().copy(this, a);
    },
    copy: function copy(a, b) {
      void 0 === b && (b = !0);
      this.name = a.name;
      this.up.copy(a.up);
      this.position.copy(a.position);
      this.quaternion.copy(a.quaternion);
      this.scale.copy(a.scale);
      this.matrix.copy(a.matrix);
      this.matrixWorld.copy(a.matrixWorld);
      this.matrixAutoUpdate = a.matrixAutoUpdate;
      this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;
      this.layers.mask = a.layers.mask;
      this.visible = a.visible;
      this.castShadow = a.castShadow;
      this.receiveShadow = a.receiveShadow;
      this.frustumCulled = a.frustumCulled;
      this.renderOrder = a.renderOrder;
      this.userData = JSON.parse(JSON.stringify(a.userData));
      if (!0 === b) for (b = 0; b < a.children.length; b++) {
        this.add(a.children[b].clone());
      }
      return this;
    }
  });
  var Nf = 0;
  I.prototype = Object.assign(Object.create(ia.prototype), {
    constructor: I,
    isGeometry: !0,
    applyMatrix: function applyMatrix(a) {
      for (var b = new da().getNormalMatrix(a), c = 0, d = this.vertices.length; c < d; c++) {
        this.vertices[c].applyMatrix4(a);
      }

      c = 0;

      for (d = this.faces.length; c < d; c++) {
        a = this.faces[c];
        a.normal.applyMatrix3(b).normalize();

        for (var e = 0, f = a.vertexNormals.length; e < f; e++) {
          a.vertexNormals[e].applyMatrix3(b).normalize();
        }
      }

      null !== this.boundingBox && this.computeBoundingBox();
      null !== this.boundingSphere && this.computeBoundingSphere();
      this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
      return this;
    },
    rotateX: function () {
      var a = new P();
      return function (b) {
        a.makeRotationX(b);
        this.applyMatrix(a);
        return this;
      };
    }(),
    rotateY: function () {
      var a = new P();
      return function (b) {
        a.makeRotationY(b);
        this.applyMatrix(a);
        return this;
      };
    }(),
    rotateZ: function () {
      var a = new P();
      return function (b) {
        a.makeRotationZ(b);
        this.applyMatrix(a);
        return this;
      };
    }(),
    translate: function () {
      var a = new P();
      return function (b, c, d) {
        a.makeTranslation(b, c, d);
        this.applyMatrix(a);
        return this;
      };
    }(),
    scale: function () {
      var a = new P();
      return function (b, c, d) {
        a.makeScale(b, c, d);
        this.applyMatrix(a);
        return this;
      };
    }(),
    lookAt: function () {
      var a = new D();
      return function (b) {
        a.lookAt(b);
        a.updateMatrix();
        this.applyMatrix(a.matrix);
      };
    }(),
    fromBufferGeometry: function fromBufferGeometry(a) {
      function b(a, b, d, e) {
        var f = void 0 === h ? [] : [c.colors[a].clone(), c.colors[b].clone(), c.colors[d].clone()],
            l = void 0 === g ? [] : [new p().fromArray(g, 3 * a), new p().fromArray(g, 3 * b), new p().fromArray(g, 3 * d)];
        e = new Xa(a, b, d, l, f, e);
        c.faces.push(e);
        void 0 !== k && c.faceVertexUvs[0].push([new z().fromArray(k, 2 * a), new z().fromArray(k, 2 * b), new z().fromArray(k, 2 * d)]);
        void 0 !== m && c.faceVertexUvs[1].push([new z().fromArray(m, 2 * a), new z().fromArray(m, 2 * b), new z().fromArray(m, 2 * d)]);
      }

      var c = this,
          d = null !== a.index ? a.index.array : void 0,
          e = a.attributes,
          f = e.position.array,
          g = void 0 !== e.normal ? e.normal.array : void 0,
          h = void 0 !== e.color ? e.color.array : void 0,
          k = void 0 !== e.uv ? e.uv.array : void 0,
          m = void 0 !== e.uv2 ? e.uv2.array : void 0;
      void 0 !== m && (this.faceVertexUvs[1] = []);

      for (var l = e = 0; e < f.length; e += 3, l += 2) {
        c.vertices.push(new p().fromArray(f, e)), void 0 !== h && c.colors.push(new G().fromArray(h, e));
      }

      var n = a.groups;
      if (0 < n.length) for (e = 0; e < n.length; e++) {
        f = n[e];
        var r = f.start,
            x = f.count;
        l = r;

        for (r += x; l < r; l += 3) {
          void 0 !== d ? b(d[l], d[l + 1], d[l + 2], f.materialIndex) : b(l, l + 1, l + 2, f.materialIndex);
        }
      } else if (void 0 !== d) for (e = 0; e < d.length; e += 3) {
        b(d[e], d[e + 1], d[e + 2]);
      } else for (e = 0; e < f.length / 3; e += 3) {
        b(e, e + 1, e + 2);
      }
      this.computeFaceNormals();
      null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
      null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
      return this;
    },
    center: function () {
      var a = new p();
      return function () {
        this.computeBoundingBox();
        this.boundingBox.getCenter(a).negate();
        this.translate(a.x, a.y, a.z);
        return this;
      };
    }(),
    normalize: function normalize() {
      this.computeBoundingSphere();
      var a = this.boundingSphere.center,
          b = this.boundingSphere.radius;
      b = 0 === b ? 1 : 1 / b;
      var c = new P();
      c.set(b, 0, 0, -b * a.x, 0, b, 0, -b * a.y, 0, 0, b, -b * a.z, 0, 0, 0, 1);
      this.applyMatrix(c);
      return this;
    },
    computeFaceNormals: function computeFaceNormals() {
      for (var a = new p(), b = new p(), c = 0, d = this.faces.length; c < d; c++) {
        var e = this.faces[c],
            f = this.vertices[e.a],
            g = this.vertices[e.b];
        a.subVectors(this.vertices[e.c], g);
        b.subVectors(f, g);
        a.cross(b);
        a.normalize();
        e.normal.copy(a);
      }
    },
    computeVertexNormals: function computeVertexNormals(a) {
      void 0 === a && (a = !0);
      var b;
      var c = Array(this.vertices.length);
      var d = 0;

      for (b = this.vertices.length; d < b; d++) {
        c[d] = new p();
      }

      if (a) {
        var e = new p(),
            f = new p();
        a = 0;

        for (d = this.faces.length; a < d; a++) {
          b = this.faces[a];
          var g = this.vertices[b.a];
          var h = this.vertices[b.b];
          var k = this.vertices[b.c];
          e.subVectors(k, h);
          f.subVectors(g, h);
          e.cross(f);
          c[b.a].add(e);
          c[b.b].add(e);
          c[b.c].add(e);
        }
      } else for (this.computeFaceNormals(), a = 0, d = this.faces.length; a < d; a++) {
        b = this.faces[a], c[b.a].add(b.normal), c[b.b].add(b.normal), c[b.c].add(b.normal);
      }

      d = 0;

      for (b = this.vertices.length; d < b; d++) {
        c[d].normalize();
      }

      a = 0;

      for (d = this.faces.length; a < d; a++) {
        b = this.faces[a], g = b.vertexNormals, 3 === g.length ? (g[0].copy(c[b.a]), g[1].copy(c[b.b]), g[2].copy(c[b.c])) : (g[0] = c[b.a].clone(), g[1] = c[b.b].clone(), g[2] = c[b.c].clone());
      }

      0 < this.faces.length && (this.normalsNeedUpdate = !0);
    },
    computeFlatVertexNormals: function computeFlatVertexNormals() {
      var a;
      this.computeFaceNormals();
      var b = 0;

      for (a = this.faces.length; b < a; b++) {
        var c = this.faces[b];
        var d = c.vertexNormals;
        3 === d.length ? (d[0].copy(c.normal), d[1].copy(c.normal), d[2].copy(c.normal)) : (d[0] = c.normal.clone(), d[1] = c.normal.clone(), d[2] = c.normal.clone());
      }

      0 < this.faces.length && (this.normalsNeedUpdate = !0);
    },
    computeMorphNormals: function computeMorphNormals() {
      var a, b;
      var c = 0;

      for (b = this.faces.length; c < b; c++) {
        var d = this.faces[c];
        d.__originalFaceNormal ? d.__originalFaceNormal.copy(d.normal) : d.__originalFaceNormal = d.normal.clone();
        d.__originalVertexNormals || (d.__originalVertexNormals = []);
        var e = 0;

        for (a = d.vertexNormals.length; e < a; e++) {
          d.__originalVertexNormals[e] ? d.__originalVertexNormals[e].copy(d.vertexNormals[e]) : d.__originalVertexNormals[e] = d.vertexNormals[e].clone();
        }
      }

      var f = new I();
      f.faces = this.faces;
      e = 0;

      for (a = this.morphTargets.length; e < a; e++) {
        if (!this.morphNormals[e]) {
          this.morphNormals[e] = {};
          this.morphNormals[e].faceNormals = [];
          this.morphNormals[e].vertexNormals = [];
          d = this.morphNormals[e].faceNormals;
          var g = this.morphNormals[e].vertexNormals;
          c = 0;

          for (b = this.faces.length; c < b; c++) {
            var h = new p();
            var k = {
              a: new p(),
              b: new p(),
              c: new p()
            };
            d.push(h);
            g.push(k);
          }
        }

        g = this.morphNormals[e];
        f.vertices = this.morphTargets[e].vertices;
        f.computeFaceNormals();
        f.computeVertexNormals();
        c = 0;

        for (b = this.faces.length; c < b; c++) {
          d = this.faces[c], h = g.faceNormals[c], k = g.vertexNormals[c], h.copy(d.normal), k.a.copy(d.vertexNormals[0]), k.b.copy(d.vertexNormals[1]), k.c.copy(d.vertexNormals[2]);
        }
      }

      c = 0;

      for (b = this.faces.length; c < b; c++) {
        d = this.faces[c], d.normal = d.__originalFaceNormal, d.vertexNormals = d.__originalVertexNormals;
      }
    },
    computeBoundingBox: function computeBoundingBox() {
      null === this.boundingBox && (this.boundingBox = new Wa());
      this.boundingBox.setFromPoints(this.vertices);
    },
    computeBoundingSphere: function computeBoundingSphere() {
      null === this.boundingSphere && (this.boundingSphere = new Ga());
      this.boundingSphere.setFromPoints(this.vertices);
    },
    merge: function merge(a, b, c) {
      if (a && a.isGeometry) {
        var d,
            e = this.vertices.length,
            f = this.vertices,
            g = a.vertices,
            h = this.faces,
            k = a.faces,
            m = this.faceVertexUvs[0],
            l = a.faceVertexUvs[0],
            n = this.colors,
            r = a.colors;
        void 0 === c && (c = 0);
        void 0 !== b && (d = new da().getNormalMatrix(b));
        a = 0;

        for (var p = g.length; a < p; a++) {
          var t = g[a].clone();
          void 0 !== b && t.applyMatrix4(b);
          f.push(t);
        }

        a = 0;

        for (p = r.length; a < p; a++) {
          n.push(r[a].clone());
        }

        a = 0;

        for (p = k.length; a < p; a++) {
          g = k[a];
          var u = g.vertexNormals;
          r = g.vertexColors;
          n = new Xa(g.a + e, g.b + e, g.c + e);
          n.normal.copy(g.normal);
          void 0 !== d && n.normal.applyMatrix3(d).normalize();
          b = 0;

          for (f = u.length; b < f; b++) {
            t = u[b].clone(), void 0 !== d && t.applyMatrix3(d).normalize(), n.vertexNormals.push(t);
          }

          n.color.copy(g.color);
          b = 0;

          for (f = r.length; b < f; b++) {
            t = r[b], n.vertexColors.push(t.clone());
          }

          n.materialIndex = g.materialIndex + c;
          h.push(n);
        }

        a = 0;

        for (p = l.length; a < p; a++) {
          if (c = l[a], d = [], void 0 !== c) {
            b = 0;

            for (f = c.length; b < f; b++) {
              d.push(c[b].clone());
            }

            m.push(d);
          }
        }
      } else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
    },
    mergeMesh: function mergeMesh(a) {
      a && a.isMesh ? (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a);
    },
    mergeVertices: function mergeVertices() {
      var a = {},
          b = [],
          c = [],
          d = Math.pow(10, 4),
          e;
      var f = 0;

      for (e = this.vertices.length; f < e; f++) {
        var g = this.vertices[f];
        g = Math.round(g.x * d) + "_" + Math.round(g.y * d) + "_" + Math.round(g.z * d);
        void 0 === a[g] ? (a[g] = f, b.push(this.vertices[f]), c[f] = b.length - 1) : c[f] = c[a[g]];
      }

      a = [];
      f = 0;

      for (e = this.faces.length; f < e; f++) {
        for (d = this.faces[f], d.a = c[d.a], d.b = c[d.b], d.c = c[d.c], d = [d.a, d.b, d.c], g = 0; 3 > g; g++) {
          if (d[g] === d[(g + 1) % 3]) {
            a.push(f);
            break;
          }
        }
      }

      for (f = a.length - 1; 0 <= f; f--) {
        for (d = a[f], this.faces.splice(d, 1), c = 0, e = this.faceVertexUvs.length; c < e; c++) {
          this.faceVertexUvs[c].splice(d, 1);
        }
      }

      f = this.vertices.length - b.length;
      this.vertices = b;
      return f;
    },
    setFromPoints: function setFromPoints(a) {
      this.vertices = [];

      for (var b = 0, c = a.length; b < c; b++) {
        var d = a[b];
        this.vertices.push(new p(d.x, d.y, d.z || 0));
      }

      return this;
    },
    sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {
      for (var a = this.faces, b = a.length, c = 0; c < b; c++) {
        a[c]._id = c;
      }

      a.sort(function (a, b) {
        return a.materialIndex - b.materialIndex;
      });
      var d = this.faceVertexUvs[0],
          e = this.faceVertexUvs[1],
          f,
          g;
      d && d.length === b && (f = []);
      e && e.length === b && (g = []);

      for (c = 0; c < b; c++) {
        var h = a[c]._id;
        f && f.push(d[h]);
        g && g.push(e[h]);
      }

      f && (this.faceVertexUvs[0] = f);
      g && (this.faceVertexUvs[1] = g);
    },
    toJSON: function toJSON() {
      function a(a, b, c) {
        return c ? a | 1 << b : a & ~(1 << b);
      }

      function b(a) {
        var b = a.x.toString() + a.y.toString() + a.z.toString();
        if (void 0 !== m[b]) return m[b];
        m[b] = k.length / 3;
        k.push(a.x, a.y, a.z);
        return m[b];
      }

      function c(a) {
        var b = a.r.toString() + a.g.toString() + a.b.toString();
        if (void 0 !== n[b]) return n[b];
        n[b] = l.length;
        l.push(a.getHex());
        return n[b];
      }

      function d(a) {
        var b = a.x.toString() + a.y.toString();
        if (void 0 !== p[b]) return p[b];
        p[b] = r.length / 2;
        r.push(a.x, a.y);
        return p[b];
      }

      var e = {
        metadata: {
          version: 4.5,
          type: "Geometry",
          generator: "Geometry.toJSON"
        }
      };
      e.uuid = this.uuid;
      e.type = this.type;
      "" !== this.name && (e.name = this.name);

      if (void 0 !== this.parameters) {
        var f = this.parameters,
            g;

        for (g in f) {
          void 0 !== f[g] && (e[g] = f[g]);
        }

        return e;
      }

      f = [];

      for (g = 0; g < this.vertices.length; g++) {
        var h = this.vertices[g];
        f.push(h.x, h.y, h.z);
      }

      h = [];
      var k = [],
          m = {},
          l = [],
          n = {},
          r = [],
          p = {};

      for (g = 0; g < this.faces.length; g++) {
        var t = this.faces[g],
            u = void 0 !== this.faceVertexUvs[0][g],
            w = 0 < t.normal.length(),
            A = 0 < t.vertexNormals.length,
            v = 1 !== t.color.r || 1 !== t.color.g || 1 !== t.color.b,
            z = 0 < t.vertexColors.length,
            y = 0;
        y = a(y, 0, 0);
        y = a(y, 1, !0);
        y = a(y, 2, !1);
        y = a(y, 3, u);
        y = a(y, 4, w);
        y = a(y, 5, A);
        y = a(y, 6, v);
        y = a(y, 7, z);
        h.push(y);
        h.push(t.a, t.b, t.c);
        h.push(t.materialIndex);
        u && (u = this.faceVertexUvs[0][g], h.push(d(u[0]), d(u[1]), d(u[2])));
        w && h.push(b(t.normal));
        A && (w = t.vertexNormals, h.push(b(w[0]), b(w[1]), b(w[2])));
        v && h.push(c(t.color));
        z && (t = t.vertexColors, h.push(c(t[0]), c(t[1]), c(t[2])));
      }

      e.data = {};
      e.data.vertices = f;
      e.data.normals = k;
      0 < l.length && (e.data.colors = l);
      0 < r.length && (e.data.uvs = [r]);
      e.data.faces = h;
      return e;
    },
    clone: function clone() {
      return new I().copy(this);
    },
    copy: function copy(a) {
      var b, c, d;
      this.vertices = [];
      this.colors = [];
      this.faces = [];
      this.faceVertexUvs = [[]];
      this.morphTargets = [];
      this.morphNormals = [];
      this.skinWeights = [];
      this.skinIndices = [];
      this.lineDistances = [];
      this.boundingSphere = this.boundingBox = null;
      this.name = a.name;
      var e = a.vertices;
      var f = 0;

      for (b = e.length; f < b; f++) {
        this.vertices.push(e[f].clone());
      }

      e = a.colors;
      f = 0;

      for (b = e.length; f < b; f++) {
        this.colors.push(e[f].clone());
      }

      e = a.faces;
      f = 0;

      for (b = e.length; f < b; f++) {
        this.faces.push(e[f].clone());
      }

      f = 0;

      for (b = a.faceVertexUvs.length; f < b; f++) {
        var g = a.faceVertexUvs[f];
        void 0 === this.faceVertexUvs[f] && (this.faceVertexUvs[f] = []);
        e = 0;

        for (c = g.length; e < c; e++) {
          var h = g[e],
              k = [];
          var m = 0;

          for (d = h.length; m < d; m++) {
            k.push(h[m].clone());
          }

          this.faceVertexUvs[f].push(k);
        }
      }

      m = a.morphTargets;
      f = 0;

      for (b = m.length; f < b; f++) {
        d = {};
        d.name = m[f].name;
        if (void 0 !== m[f].vertices) for (d.vertices = [], e = 0, c = m[f].vertices.length; e < c; e++) {
          d.vertices.push(m[f].vertices[e].clone());
        }
        if (void 0 !== m[f].normals) for (d.normals = [], e = 0, c = m[f].normals.length; e < c; e++) {
          d.normals.push(m[f].normals[e].clone());
        }
        this.morphTargets.push(d);
      }

      m = a.morphNormals;
      f = 0;

      for (b = m.length; f < b; f++) {
        d = {};
        if (void 0 !== m[f].vertexNormals) for (d.vertexNormals = [], e = 0, c = m[f].vertexNormals.length; e < c; e++) {
          g = m[f].vertexNormals[e], h = {}, h.a = g.a.clone(), h.b = g.b.clone(), h.c = g.c.clone(), d.vertexNormals.push(h);
        }
        if (void 0 !== m[f].faceNormals) for (d.faceNormals = [], e = 0, c = m[f].faceNormals.length; e < c; e++) {
          d.faceNormals.push(m[f].faceNormals[e].clone());
        }
        this.morphNormals.push(d);
      }

      e = a.skinWeights;
      f = 0;

      for (b = e.length; f < b; f++) {
        this.skinWeights.push(e[f].clone());
      }

      e = a.skinIndices;
      f = 0;

      for (b = e.length; f < b; f++) {
        this.skinIndices.push(e[f].clone());
      }

      e = a.lineDistances;
      f = 0;

      for (b = e.length; f < b; f++) {
        this.lineDistances.push(e[f]);
      }

      f = a.boundingBox;
      null !== f && (this.boundingBox = f.clone());
      f = a.boundingSphere;
      null !== f && (this.boundingSphere = f.clone());
      this.elementsNeedUpdate = a.elementsNeedUpdate;
      this.verticesNeedUpdate = a.verticesNeedUpdate;
      this.uvsNeedUpdate = a.uvsNeedUpdate;
      this.normalsNeedUpdate = a.normalsNeedUpdate;
      this.colorsNeedUpdate = a.colorsNeedUpdate;
      this.lineDistancesNeedUpdate = a.lineDistancesNeedUpdate;
      this.groupsNeedUpdate = a.groupsNeedUpdate;
      return this;
    },
    dispose: function dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
  });
  Object.defineProperty(F.prototype, "needsUpdate", {
    set: function set(a) {
      !0 === a && this.version++;
    }
  });
  Object.assign(F.prototype, {
    isBufferAttribute: !0,
    onUploadCallback: function onUploadCallback() {},
    setArray: function setArray(a) {
      if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      this.count = void 0 !== a ? a.length / this.itemSize : 0;
      this.array = a;
      return this;
    },
    setDynamic: function setDynamic(a) {
      this.dynamic = a;
      return this;
    },
    copy: function copy(a) {
      this.name = a.name;
      this.array = new a.array.constructor(a.array);
      this.itemSize = a.itemSize;
      this.count = a.count;
      this.normalized = a.normalized;
      this.dynamic = a.dynamic;
      return this;
    },
    copyAt: function copyAt(a, b, c) {
      a *= this.itemSize;
      c *= b.itemSize;

      for (var d = 0, e = this.itemSize; d < e; d++) {
        this.array[a + d] = b.array[c + d];
      }

      return this;
    },
    copyArray: function copyArray(a) {
      this.array.set(a);
      return this;
    },
    copyColorsArray: function copyColorsArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];
        void 0 === f && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", d), f = new G());
        b[c++] = f.r;
        b[c++] = f.g;
        b[c++] = f.b;
      }

      return this;
    },
    copyVector2sArray: function copyVector2sArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];
        void 0 === f && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", d), f = new z());
        b[c++] = f.x;
        b[c++] = f.y;
      }

      return this;
    },
    copyVector3sArray: function copyVector3sArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];
        void 0 === f && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", d), f = new p());
        b[c++] = f.x;
        b[c++] = f.y;
        b[c++] = f.z;
      }

      return this;
    },
    copyVector4sArray: function copyVector4sArray(a) {
      for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
        var f = a[d];
        void 0 === f && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", d), f = new Z());
        b[c++] = f.x;
        b[c++] = f.y;
        b[c++] = f.z;
        b[c++] = f.w;
      }

      return this;
    },
    set: function set(a, b) {
      void 0 === b && (b = 0);
      this.array.set(a, b);
      return this;
    },
    getX: function getX(a) {
      return this.array[a * this.itemSize];
    },
    setX: function setX(a, b) {
      this.array[a * this.itemSize] = b;
      return this;
    },
    getY: function getY(a) {
      return this.array[a * this.itemSize + 1];
    },
    setY: function setY(a, b) {
      this.array[a * this.itemSize + 1] = b;
      return this;
    },
    getZ: function getZ(a) {
      return this.array[a * this.itemSize + 2];
    },
    setZ: function setZ(a, b) {
      this.array[a * this.itemSize + 2] = b;
      return this;
    },
    getW: function getW(a) {
      return this.array[a * this.itemSize + 3];
    },
    setW: function setW(a, b) {
      this.array[a * this.itemSize + 3] = b;
      return this;
    },
    setXY: function setXY(a, b, c) {
      a *= this.itemSize;
      this.array[a + 0] = b;
      this.array[a + 1] = c;
      return this;
    },
    setXYZ: function setXYZ(a, b, c, d) {
      a *= this.itemSize;
      this.array[a + 0] = b;
      this.array[a + 1] = c;
      this.array[a + 2] = d;
      return this;
    },
    setXYZW: function setXYZW(a, b, c, d, e) {
      a *= this.itemSize;
      this.array[a + 0] = b;
      this.array[a + 1] = c;
      this.array[a + 2] = d;
      this.array[a + 3] = e;
      return this;
    },
    onUpload: function onUpload(a) {
      this.onUploadCallback = a;
      return this;
    },
    clone: function clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
  });
  sc.prototype = Object.create(F.prototype);
  sc.prototype.constructor = sc;
  tc.prototype = Object.create(F.prototype);
  tc.prototype.constructor = tc;
  uc.prototype = Object.create(F.prototype);
  uc.prototype.constructor = uc;
  vc.prototype = Object.create(F.prototype);
  vc.prototype.constructor = vc;
  nb.prototype = Object.create(F.prototype);
  nb.prototype.constructor = nb;
  wc.prototype = Object.create(F.prototype);
  wc.prototype.constructor = wc;
  ob.prototype = Object.create(F.prototype);
  ob.prototype.constructor = ob;
  C.prototype = Object.create(F.prototype);
  C.prototype.constructor = C;
  xc.prototype = Object.create(F.prototype);
  xc.prototype.constructor = xc;
  Object.assign(Ie.prototype, {
    computeGroups: function computeGroups(a) {
      var b = [],
          c = void 0;
      a = a.faces;

      for (var d = 0; d < a.length; d++) {
        var e = a[d];

        if (e.materialIndex !== c) {
          c = e.materialIndex;
          void 0 !== f && (f.count = 3 * d - f.start, b.push(f));
          var f = {
            start: 3 * d,
            materialIndex: c
          };
        }
      }

      void 0 !== f && (f.count = 3 * d - f.start, b.push(f));
      this.groups = b;
    },
    fromGeometry: function fromGeometry(a) {
      var b = a.faces,
          c = a.vertices,
          d = a.faceVertexUvs,
          e = d[0] && 0 < d[0].length,
          f = d[1] && 0 < d[1].length,
          g = a.morphTargets,
          h = g.length;

      if (0 < h) {
        var k = [];

        for (var m = 0; m < h; m++) {
          k[m] = {
            name: g[m].name,
            data: []
          };
        }

        this.morphTargets.position = k;
      }

      var l = a.morphNormals,
          n = l.length;

      if (0 < n) {
        var r = [];

        for (m = 0; m < n; m++) {
          r[m] = {
            name: l[m].name,
            data: []
          };
        }

        this.morphTargets.normal = r;
      }

      var p = a.skinIndices,
          t = a.skinWeights,
          u = p.length === c.length,
          w = t.length === c.length;
      0 < c.length && 0 === b.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");

      for (m = 0; m < b.length; m++) {
        var A = b[m];
        this.vertices.push(c[A.a], c[A.b], c[A.c]);
        var v = A.vertexNormals;
        3 === v.length ? this.normals.push(v[0], v[1], v[2]) : (v = A.normal, this.normals.push(v, v, v));
        v = A.vertexColors;
        3 === v.length ? this.colors.push(v[0], v[1], v[2]) : (v = A.color, this.colors.push(v, v, v));
        !0 === e && (v = d[0][m], void 0 !== v ? this.uvs.push(v[0], v[1], v[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", m), this.uvs.push(new z(), new z(), new z())));
        !0 === f && (v = d[1][m], void 0 !== v ? this.uvs2.push(v[0], v[1], v[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", m), this.uvs2.push(new z(), new z(), new z())));

        for (v = 0; v < h; v++) {
          var H = g[v].vertices;
          k[v].data.push(H[A.a], H[A.b], H[A.c]);
        }

        for (v = 0; v < n; v++) {
          H = l[v].vertexNormals[m], r[v].data.push(H.a, H.b, H.c);
        }

        u && this.skinIndices.push(p[A.a], p[A.b], p[A.c]);
        w && this.skinWeights.push(t[A.a], t[A.b], t[A.c]);
      }

      this.computeGroups(a);
      this.verticesNeedUpdate = a.verticesNeedUpdate;
      this.normalsNeedUpdate = a.normalsNeedUpdate;
      this.colorsNeedUpdate = a.colorsNeedUpdate;
      this.uvsNeedUpdate = a.uvsNeedUpdate;
      this.groupsNeedUpdate = a.groupsNeedUpdate;
      return this;
    }
  });
  var Of = 1;
  E.prototype = Object.assign(Object.create(ia.prototype), {
    constructor: E,
    isBufferGeometry: !0,
    getIndex: function getIndex() {
      return this.index;
    },
    setIndex: function setIndex(a) {
      Array.isArray(a) ? this.index = new (65535 < Je(a) ? ob : nb)(a, 1) : this.index = a;
    },
    addAttribute: function addAttribute(a, b, c) {
      if (!(b && b.isBufferAttribute || b && b.isInterleavedBufferAttribute)) return console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(a, new F(b, c));
      if ("index" === a) return console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(b), this;
      this.attributes[a] = b;
      return this;
    },
    getAttribute: function getAttribute(a) {
      return this.attributes[a];
    },
    removeAttribute: function removeAttribute(a) {
      delete this.attributes[a];
      return this;
    },
    addGroup: function addGroup(a, b, c) {
      this.groups.push({
        start: a,
        count: b,
        materialIndex: void 0 !== c ? c : 0
      });
    },
    clearGroups: function clearGroups() {
      this.groups = [];
    },
    setDrawRange: function setDrawRange(a, b) {
      this.drawRange.start = a;
      this.drawRange.count = b;
    },
    applyMatrix: function applyMatrix(a) {
      var b = this.attributes.position;
      void 0 !== b && (a.applyToBufferAttribute(b), b.needsUpdate = !0);
      b = this.attributes.normal;
      void 0 !== b && (new da().getNormalMatrix(a).applyToBufferAttribute(b), b.needsUpdate = !0);
      null !== this.boundingBox && this.computeBoundingBox();
      null !== this.boundingSphere && this.computeBoundingSphere();
      return this;
    },
    rotateX: function () {
      var a = new P();
      return function (b) {
        a.makeRotationX(b);
        this.applyMatrix(a);
        return this;
      };
    }(),
    rotateY: function () {
      var a = new P();
      return function (b) {
        a.makeRotationY(b);
        this.applyMatrix(a);
        return this;
      };
    }(),
    rotateZ: function () {
      var a = new P();
      return function (b) {
        a.makeRotationZ(b);
        this.applyMatrix(a);
        return this;
      };
    }(),
    translate: function () {
      var a = new P();
      return function (b, c, d) {
        a.makeTranslation(b, c, d);
        this.applyMatrix(a);
        return this;
      };
    }(),
    scale: function () {
      var a = new P();
      return function (b, c, d) {
        a.makeScale(b, c, d);
        this.applyMatrix(a);
        return this;
      };
    }(),
    lookAt: function () {
      var a = new D();
      return function (b) {
        a.lookAt(b);
        a.updateMatrix();
        this.applyMatrix(a.matrix);
      };
    }(),
    center: function () {
      var a = new p();
      return function () {
        this.computeBoundingBox();
        this.boundingBox.getCenter(a).negate();
        this.translate(a.x, a.y, a.z);
        return this;
      };
    }(),
    setFromObject: function setFromObject(a) {
      var b = a.geometry;

      if (a.isPoints || a.isLine) {
        a = new C(3 * b.vertices.length, 3);
        var c = new C(3 * b.colors.length, 3);
        this.addAttribute("position", a.copyVector3sArray(b.vertices));
        this.addAttribute("color", c.copyColorsArray(b.colors));
        b.lineDistances && b.lineDistances.length === b.vertices.length && (a = new C(b.lineDistances.length, 1), this.addAttribute("lineDistance", a.copyArray(b.lineDistances)));
        null !== b.boundingSphere && (this.boundingSphere = b.boundingSphere.clone());
        null !== b.boundingBox && (this.boundingBox = b.boundingBox.clone());
      } else a.isMesh && b && b.isGeometry && this.fromGeometry(b);

      return this;
    },
    setFromPoints: function setFromPoints(a) {
      for (var b = [], c = 0, d = a.length; c < d; c++) {
        var e = a[c];
        b.push(e.x, e.y, e.z || 0);
      }

      this.addAttribute("position", new C(b, 3));
      return this;
    },
    updateFromObject: function updateFromObject(a) {
      var b = a.geometry;

      if (a.isMesh) {
        var c = b.__directGeometry;
        !0 === b.elementsNeedUpdate && (c = void 0, b.elementsNeedUpdate = !1);
        if (void 0 === c) return this.fromGeometry(b);
        c.verticesNeedUpdate = b.verticesNeedUpdate;
        c.normalsNeedUpdate = b.normalsNeedUpdate;
        c.colorsNeedUpdate = b.colorsNeedUpdate;
        c.uvsNeedUpdate = b.uvsNeedUpdate;
        c.groupsNeedUpdate = b.groupsNeedUpdate;
        b.verticesNeedUpdate = !1;
        b.normalsNeedUpdate = !1;
        b.colorsNeedUpdate = !1;
        b.uvsNeedUpdate = !1;
        b.groupsNeedUpdate = !1;
        b = c;
      }

      !0 === b.verticesNeedUpdate && (c = this.attributes.position, void 0 !== c && (c.copyVector3sArray(b.vertices), c.needsUpdate = !0), b.verticesNeedUpdate = !1);
      !0 === b.normalsNeedUpdate && (c = this.attributes.normal, void 0 !== c && (c.copyVector3sArray(b.normals), c.needsUpdate = !0), b.normalsNeedUpdate = !1);
      !0 === b.colorsNeedUpdate && (c = this.attributes.color, void 0 !== c && (c.copyColorsArray(b.colors), c.needsUpdate = !0), b.colorsNeedUpdate = !1);
      b.uvsNeedUpdate && (c = this.attributes.uv, void 0 !== c && (c.copyVector2sArray(b.uvs), c.needsUpdate = !0), b.uvsNeedUpdate = !1);
      b.lineDistancesNeedUpdate && (c = this.attributes.lineDistance, void 0 !== c && (c.copyArray(b.lineDistances), c.needsUpdate = !0), b.lineDistancesNeedUpdate = !1);
      b.groupsNeedUpdate && (b.computeGroups(a.geometry), this.groups = b.groups, b.groupsNeedUpdate = !1);
      return this;
    },
    fromGeometry: function fromGeometry(a) {
      a.__directGeometry = new Ie().fromGeometry(a);
      return this.fromDirectGeometry(a.__directGeometry);
    },
    fromDirectGeometry: function fromDirectGeometry(a) {
      var b = new Float32Array(3 * a.vertices.length);
      this.addAttribute("position", new F(b, 3).copyVector3sArray(a.vertices));
      0 < a.normals.length && (b = new Float32Array(3 * a.normals.length), this.addAttribute("normal", new F(b, 3).copyVector3sArray(a.normals)));
      0 < a.colors.length && (b = new Float32Array(3 * a.colors.length), this.addAttribute("color", new F(b, 3).copyColorsArray(a.colors)));
      0 < a.uvs.length && (b = new Float32Array(2 * a.uvs.length), this.addAttribute("uv", new F(b, 2).copyVector2sArray(a.uvs)));
      0 < a.uvs2.length && (b = new Float32Array(2 * a.uvs2.length), this.addAttribute("uv2", new F(b, 2).copyVector2sArray(a.uvs2)));
      this.groups = a.groups;

      for (var c in a.morphTargets) {
        b = [];

        for (var d = a.morphTargets[c], e = 0, f = d.length; e < f; e++) {
          var g = d[e],
              h = new C(3 * g.data.length, 3);
          h.name = g.name;
          b.push(h.copyVector3sArray(g.data));
        }

        this.morphAttributes[c] = b;
      }

      0 < a.skinIndices.length && (c = new C(4 * a.skinIndices.length, 4), this.addAttribute("skinIndex", c.copyVector4sArray(a.skinIndices)));
      0 < a.skinWeights.length && (c = new C(4 * a.skinWeights.length, 4), this.addAttribute("skinWeight", c.copyVector4sArray(a.skinWeights)));
      null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
      null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
      return this;
    },
    computeBoundingBox: function computeBoundingBox() {
      null === this.boundingBox && (this.boundingBox = new Wa());
      var a = this.attributes.position;
      void 0 !== a ? this.boundingBox.setFromBufferAttribute(a) : this.boundingBox.makeEmpty();
      (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    },
    computeBoundingSphere: function () {
      var a = new Wa(),
          b = new p();
      return function () {
        null === this.boundingSphere && (this.boundingSphere = new Ga());
        var c = this.attributes.position;

        if (c) {
          var d = this.boundingSphere.center;
          a.setFromBufferAttribute(c);
          a.getCenter(d);

          for (var e = 0, f = 0, g = c.count; f < g; f++) {
            b.x = c.getX(f), b.y = c.getY(f), b.z = c.getZ(f), e = Math.max(e, d.distanceToSquared(b));
          }

          this.boundingSphere.radius = Math.sqrt(e);
          isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      };
    }(),
    computeFaceNormals: function computeFaceNormals() {},
    computeVertexNormals: function computeVertexNormals() {
      var a = this.index,
          b = this.attributes;

      if (b.position) {
        var c = b.position.array;
        if (void 0 === b.normal) this.addAttribute("normal", new F(new Float32Array(c.length), 3));else for (var d = b.normal.array, e = 0, f = d.length; e < f; e++) {
          d[e] = 0;
        }
        d = b.normal.array;
        var g = new p(),
            h = new p(),
            k = new p(),
            m = new p(),
            l = new p();

        if (a) {
          var n = a.array;
          e = 0;

          for (f = a.count; e < f; e += 3) {
            a = 3 * n[e + 0];
            var r = 3 * n[e + 1];
            var x = 3 * n[e + 2];
            g.fromArray(c, a);
            h.fromArray(c, r);
            k.fromArray(c, x);
            m.subVectors(k, h);
            l.subVectors(g, h);
            m.cross(l);
            d[a] += m.x;
            d[a + 1] += m.y;
            d[a + 2] += m.z;
            d[r] += m.x;
            d[r + 1] += m.y;
            d[r + 2] += m.z;
            d[x] += m.x;
            d[x + 1] += m.y;
            d[x + 2] += m.z;
          }
        } else for (e = 0, f = c.length; e < f; e += 9) {
          g.fromArray(c, e), h.fromArray(c, e + 3), k.fromArray(c, e + 6), m.subVectors(k, h), l.subVectors(g, h), m.cross(l), d[e] = m.x, d[e + 1] = m.y, d[e + 2] = m.z, d[e + 3] = m.x, d[e + 4] = m.y, d[e + 5] = m.z, d[e + 6] = m.x, d[e + 7] = m.y, d[e + 8] = m.z;
        }

        this.normalizeNormals();
        b.normal.needsUpdate = !0;
      }
    },
    merge: function merge(a, b) {
      if (a && a.isBufferGeometry) {
        void 0 === b && (b = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
        var c = this.attributes,
            d;

        for (d in c) {
          if (void 0 !== a.attributes[d]) {
            var e = c[d].array,
                f = a.attributes[d],
                g = f.array,
                h = 0;

            for (f = f.itemSize * b; h < g.length; h++, f++) {
              e[f] = g[h];
            }
          }
        }

        return this;
      }

      console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
    },
    normalizeNormals: function () {
      var a = new p();
      return function () {
        for (var b = this.attributes.normal, c = 0, d = b.count; c < d; c++) {
          a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.normalize(), b.setXYZ(c, a.x, a.y, a.z);
        }
      };
    }(),
    toNonIndexed: function toNonIndexed() {
      if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
      var a = new E(),
          b = this.index.array,
          c = this.attributes,
          d;

      for (d in c) {
        var e = c[d],
            f = e.array,
            g = e.itemSize,
            h = new f.constructor(b.length * g),
            k = 0;
        e = 0;

        for (var m = b.length; e < m; e++) {
          var l = b[e] * g;

          for (var n = 0; n < g; n++) {
            h[k++] = f[l++];
          }
        }

        a.addAttribute(d, new F(h, g));
      }

      b = this.groups;
      e = 0;

      for (m = b.length; e < m; e++) {
        c = b[e], a.addGroup(c.start, c.count, c.materialIndex);
      }

      return a;
    },
    toJSON: function toJSON() {
      var a = {
        metadata: {
          version: 4.5,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      a.uuid = this.uuid;
      a.type = this.type;
      "" !== this.name && (a.name = this.name);
      0 < Object.keys(this.userData).length && (a.userData = this.userData);

      if (void 0 !== this.parameters) {
        var b = this.parameters;

        for (e in b) {
          void 0 !== b[e] && (a[e] = b[e]);
        }

        return a;
      }

      a.data = {
        attributes: {}
      };
      var c = this.index;
      null !== c && (b = Array.prototype.slice.call(c.array), a.data.index = {
        type: c.array.constructor.name,
        array: b
      });
      c = this.attributes;

      for (e in c) {
        var d = c[e];
        b = Array.prototype.slice.call(d.array);
        a.data.attributes[e] = {
          itemSize: d.itemSize,
          type: d.array.constructor.name,
          array: b,
          normalized: d.normalized
        };
      }

      var e = this.groups;
      0 < e.length && (a.data.groups = JSON.parse(JSON.stringify(e)));
      e = this.boundingSphere;
      null !== e && (a.data.boundingSphere = {
        center: e.center.toArray(),
        radius: e.radius
      });
      return a;
    },
    clone: function clone() {
      return new E().copy(this);
    },
    copy: function copy(a) {
      var b;
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingSphere = this.boundingBox = null;
      this.name = a.name;
      var c = a.index;
      null !== c && this.setIndex(c.clone());
      c = a.attributes;

      for (g in c) {
        this.addAttribute(g, c[g].clone());
      }

      var d = a.morphAttributes;

      for (g in d) {
        var e = [],
            f = d[g];
        c = 0;

        for (b = f.length; c < b; c++) {
          e.push(f[c].clone());
        }

        this.morphAttributes[g] = e;
      }

      var g = a.groups;
      c = 0;

      for (b = g.length; c < b; c++) {
        d = g[c], this.addGroup(d.start, d.count, d.materialIndex);
      }

      g = a.boundingBox;
      null !== g && (this.boundingBox = g.clone());
      g = a.boundingSphere;
      null !== g && (this.boundingSphere = g.clone());
      this.drawRange.start = a.drawRange.start;
      this.drawRange.count = a.drawRange.count;
      this.userData = a.userData;
      return this;
    },
    dispose: function dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
  });
  Kb.prototype = Object.create(I.prototype);
  Kb.prototype.constructor = Kb;
  pb.prototype = Object.create(E.prototype);
  pb.prototype.constructor = pb;
  yc.prototype = Object.create(I.prototype);
  yc.prototype.constructor = yc;
  qb.prototype = Object.create(E.prototype);
  qb.prototype.constructor = qb;
  var Pf = 0;
  L.prototype = Object.assign(Object.create(ia.prototype), {
    constructor: L,
    isMaterial: !0,
    onBeforeCompile: function onBeforeCompile() {},
    setValues: function setValues(a) {
      if (void 0 !== a) for (var b in a) {
        var c = a[b];
        if (void 0 === c) console.warn("THREE.Material: '" + b + "' parameter is undefined.");else if ("shading" === b) console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === c ? !0 : !1;else {
          var d = this[b];
          void 0 === d ? console.warn("THREE." + this.type + ": '" + b + "' is not a property of this material.") : d && d.isColor ? d.set(c) : d && d.isVector3 && c && c.isVector3 ? d.copy(c) : this[b] = c;
        }
      }
    },
    toJSON: function toJSON(a) {
      function b(a) {
        var b = [],
            c;

        for (c in a) {
          var d = a[c];
          delete d.metadata;
          b.push(d);
        }

        return b;
      }

      var c = void 0 === a || "string" === typeof a;
      c && (a = {
        textures: {},
        images: {}
      });
      var d = {
        metadata: {
          version: 4.5,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      d.uuid = this.uuid;
      d.type = this.type;
      "" !== this.name && (d.name = this.name);
      this.color && this.color.isColor && (d.color = this.color.getHex());
      void 0 !== this.roughness && (d.roughness = this.roughness);
      void 0 !== this.metalness && (d.metalness = this.metalness);
      this.emissive && this.emissive.isColor && (d.emissive = this.emissive.getHex());
      1 !== this.emissiveIntensity && (d.emissiveIntensity = this.emissiveIntensity);
      this.specular && this.specular.isColor && (d.specular = this.specular.getHex());
      void 0 !== this.shininess && (d.shininess = this.shininess);
      void 0 !== this.clearCoat && (d.clearCoat = this.clearCoat);
      void 0 !== this.clearCoatRoughness && (d.clearCoatRoughness = this.clearCoatRoughness);
      this.map && this.map.isTexture && (d.map = this.map.toJSON(a).uuid);
      this.alphaMap && this.alphaMap.isTexture && (d.alphaMap = this.alphaMap.toJSON(a).uuid);
      this.lightMap && this.lightMap.isTexture && (d.lightMap = this.lightMap.toJSON(a).uuid);
      this.aoMap && this.aoMap.isTexture && (d.aoMap = this.aoMap.toJSON(a).uuid, d.aoMapIntensity = this.aoMapIntensity);
      this.bumpMap && this.bumpMap.isTexture && (d.bumpMap = this.bumpMap.toJSON(a).uuid, d.bumpScale = this.bumpScale);
      this.normalMap && this.normalMap.isTexture && (d.normalMap = this.normalMap.toJSON(a).uuid, d.normalMapType = this.normalMapType, d.normalScale = this.normalScale.toArray());
      this.displacementMap && this.displacementMap.isTexture && (d.displacementMap = this.displacementMap.toJSON(a).uuid, d.displacementScale = this.displacementScale, d.displacementBias = this.displacementBias);
      this.roughnessMap && this.roughnessMap.isTexture && (d.roughnessMap = this.roughnessMap.toJSON(a).uuid);
      this.metalnessMap && this.metalnessMap.isTexture && (d.metalnessMap = this.metalnessMap.toJSON(a).uuid);
      this.emissiveMap && this.emissiveMap.isTexture && (d.emissiveMap = this.emissiveMap.toJSON(a).uuid);
      this.specularMap && this.specularMap.isTexture && (d.specularMap = this.specularMap.toJSON(a).uuid);
      this.envMap && this.envMap.isTexture && (d.envMap = this.envMap.toJSON(a).uuid, d.reflectivity = this.reflectivity, void 0 !== this.combine && (d.combine = this.combine), void 0 !== this.envMapIntensity && (d.envMapIntensity = this.envMapIntensity));
      this.gradientMap && this.gradientMap.isTexture && (d.gradientMap = this.gradientMap.toJSON(a).uuid);
      void 0 !== this.size && (d.size = this.size);
      void 0 !== this.sizeAttenuation && (d.sizeAttenuation = this.sizeAttenuation);
      1 !== this.blending && (d.blending = this.blending);
      !0 === this.flatShading && (d.flatShading = this.flatShading);
      0 !== this.side && (d.side = this.side);
      0 !== this.vertexColors && (d.vertexColors = this.vertexColors);
      1 > this.opacity && (d.opacity = this.opacity);
      !0 === this.transparent && (d.transparent = this.transparent);
      d.depthFunc = this.depthFunc;
      d.depthTest = this.depthTest;
      d.depthWrite = this.depthWrite;
      0 !== this.rotation && (d.rotation = this.rotation);
      !0 === this.polygonOffset && (d.polygonOffset = !0);
      0 !== this.polygonOffsetFactor && (d.polygonOffsetFactor = this.polygonOffsetFactor);
      0 !== this.polygonOffsetUnits && (d.polygonOffsetUnits = this.polygonOffsetUnits);
      1 !== this.linewidth && (d.linewidth = this.linewidth);
      void 0 !== this.dashSize && (d.dashSize = this.dashSize);
      void 0 !== this.gapSize && (d.gapSize = this.gapSize);
      void 0 !== this.scale && (d.scale = this.scale);
      !0 === this.dithering && (d.dithering = !0);
      0 < this.alphaTest && (d.alphaTest = this.alphaTest);
      !0 === this.premultipliedAlpha && (d.premultipliedAlpha = this.premultipliedAlpha);
      !0 === this.wireframe && (d.wireframe = this.wireframe);
      1 < this.wireframeLinewidth && (d.wireframeLinewidth = this.wireframeLinewidth);
      "round" !== this.wireframeLinecap && (d.wireframeLinecap = this.wireframeLinecap);
      "round" !== this.wireframeLinejoin && (d.wireframeLinejoin = this.wireframeLinejoin);
      !0 === this.morphTargets && (d.morphTargets = !0);
      !0 === this.skinning && (d.skinning = !0);
      !1 === this.visible && (d.visible = !1);
      "{}" !== JSON.stringify(this.userData) && (d.userData = this.userData);
      c && (c = b(a.textures), a = b(a.images), 0 < c.length && (d.textures = c), 0 < a.length && (d.images = a));
      return d;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.name = a.name;
      this.fog = a.fog;
      this.lights = a.lights;
      this.blending = a.blending;
      this.side = a.side;
      this.flatShading = a.flatShading;
      this.vertexColors = a.vertexColors;
      this.opacity = a.opacity;
      this.transparent = a.transparent;
      this.blendSrc = a.blendSrc;
      this.blendDst = a.blendDst;
      this.blendEquation = a.blendEquation;
      this.blendSrcAlpha = a.blendSrcAlpha;
      this.blendDstAlpha = a.blendDstAlpha;
      this.blendEquationAlpha = a.blendEquationAlpha;
      this.depthFunc = a.depthFunc;
      this.depthTest = a.depthTest;
      this.depthWrite = a.depthWrite;
      this.colorWrite = a.colorWrite;
      this.precision = a.precision;
      this.polygonOffset = a.polygonOffset;
      this.polygonOffsetFactor = a.polygonOffsetFactor;
      this.polygonOffsetUnits = a.polygonOffsetUnits;
      this.dithering = a.dithering;
      this.alphaTest = a.alphaTest;
      this.premultipliedAlpha = a.premultipliedAlpha;
      this.visible = a.visible;
      this.userData = JSON.parse(JSON.stringify(a.userData));
      this.clipShadows = a.clipShadows;
      this.clipIntersection = a.clipIntersection;
      var b = a.clippingPlanes,
          c = null;

      if (null !== b) {
        var d = b.length;
        c = Array(d);

        for (var e = 0; e !== d; ++e) {
          c[e] = b[e].clone();
        }
      }

      this.clippingPlanes = c;
      this.shadowSide = a.shadowSide;
      return this;
    },
    dispose: function dispose() {
      this.dispatchEvent({
        type: "dispose"
      });
    }
  });
  ka.prototype = Object.create(L.prototype);
  ka.prototype.constructor = ka;
  ka.prototype.isShaderMaterial = !0;

  ka.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.fragmentShader = a.fragmentShader;
    this.vertexShader = a.vertexShader;
    this.uniforms = va.clone(a.uniforms);
    this.defines = Object.assign({}, a.defines);
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.lights = a.lights;
    this.clipping = a.clipping;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    this.extensions = a.extensions;
    return this;
  };

  ka.prototype.toJSON = function (a) {
    var b = L.prototype.toJSON.call(this, a);
    b.uniforms = {};

    for (var c in this.uniforms) {
      var d = this.uniforms[c].value;
      b.uniforms[c] = d.isTexture ? {
        type: "t",
        value: d.toJSON(a).uuid
      } : d.isColor ? {
        type: "c",
        value: d.getHex()
      } : d.isVector2 ? {
        type: "v2",
        value: d.toArray()
      } : d.isVector3 ? {
        type: "v3",
        value: d.toArray()
      } : d.isVector4 ? {
        type: "v4",
        value: d.toArray()
      } : d.isMatrix4 ? {
        type: "m4",
        value: d.toArray()
      } : {
        value: d
      };
    }

    0 < Object.keys(this.defines).length && (b.defines = this.defines);
    b.vertexShader = this.vertexShader;
    b.fragmentShader = this.fragmentShader;
    return b;
  };

  Object.assign(rb.prototype, {
    set: function set(a, b) {
      this.origin.copy(a);
      this.direction.copy(b);
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.origin.copy(a.origin);
      this.direction.copy(a.direction);
      return this;
    },
    at: function at(a, b) {
      void 0 === b && (console.warn("THREE.Ray: .at() target is now required"), b = new p());
      return b.copy(this.direction).multiplyScalar(a).add(this.origin);
    },
    lookAt: function lookAt(a) {
      this.direction.copy(a).sub(this.origin).normalize();
      return this;
    },
    recast: function () {
      var a = new p();
      return function (b) {
        this.origin.copy(this.at(b, a));
        return this;
      };
    }(),
    closestPointToPoint: function closestPointToPoint(a, b) {
      void 0 === b && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), b = new p());
      b.subVectors(a, this.origin);
      a = b.dot(this.direction);
      return 0 > a ? b.copy(this.origin) : b.copy(this.direction).multiplyScalar(a).add(this.origin);
    },
    distanceToPoint: function distanceToPoint(a) {
      return Math.sqrt(this.distanceSqToPoint(a));
    },
    distanceSqToPoint: function () {
      var a = new p();
      return function (b) {
        var c = a.subVectors(b, this.origin).dot(this.direction);
        if (0 > c) return this.origin.distanceToSquared(b);
        a.copy(this.direction).multiplyScalar(c).add(this.origin);
        return a.distanceToSquared(b);
      };
    }(),
    distanceSqToSegment: function () {
      var a = new p(),
          b = new p(),
          c = new p();
      return function (d, e, f, g) {
        a.copy(d).add(e).multiplyScalar(.5);
        b.copy(e).sub(d).normalize();
        c.copy(this.origin).sub(a);
        var h = .5 * d.distanceTo(e),
            k = -this.direction.dot(b),
            m = c.dot(this.direction),
            l = -c.dot(b),
            n = c.lengthSq(),
            r = Math.abs(1 - k * k);

        if (0 < r) {
          d = k * l - m;
          e = k * m - l;
          var p = h * r;
          0 <= d ? e >= -p ? e <= p ? (h = 1 / r, d *= h, e *= h, k = d * (d + k * e + 2 * m) + e * (k * d + e + 2 * l) + n) : (e = h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n) : (e = -h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n) : e <= -p ? (d = Math.max(0, -(-k * h + m)), e = 0 < d ? -h : Math.min(Math.max(-h, -l), h), k = -d * d + e * (e + 2 * l) + n) : e <= p ? (d = 0, e = Math.min(Math.max(-h, -l), h), k = e * (e + 2 * l) + n) : (d = Math.max(0, -(k * h + m)), e = 0 < d ? h : Math.min(Math.max(-h, -l), h), k = -d * d + e * (e + 2 * l) + n);
        } else e = 0 < k ? -h : h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n;

        f && f.copy(this.direction).multiplyScalar(d).add(this.origin);
        g && g.copy(b).multiplyScalar(e).add(a);
        return k;
      };
    }(),
    intersectSphere: function () {
      var a = new p();
      return function (b, c) {
        a.subVectors(b.center, this.origin);
        var d = a.dot(this.direction),
            e = a.dot(a) - d * d;
        b = b.radius * b.radius;
        if (e > b) return null;
        b = Math.sqrt(b - e);
        e = d - b;
        d += b;
        return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
      };
    }(),
    intersectsSphere: function intersectsSphere(a) {
      return this.distanceSqToPoint(a.center) <= a.radius * a.radius;
    },
    distanceToPlane: function distanceToPlane(a) {
      var b = a.normal.dot(this.direction);
      if (0 === b) return 0 === a.distanceToPoint(this.origin) ? 0 : null;
      a = -(this.origin.dot(a.normal) + a.constant) / b;
      return 0 <= a ? a : null;
    },
    intersectPlane: function intersectPlane(a, b) {
      a = this.distanceToPlane(a);
      return null === a ? null : this.at(a, b);
    },
    intersectsPlane: function intersectsPlane(a) {
      var b = a.distanceToPoint(this.origin);
      return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
    },
    intersectBox: function intersectBox(a, b) {
      var c = 1 / this.direction.x;
      var d = 1 / this.direction.y;
      var e = 1 / this.direction.z,
          f = this.origin;

      if (0 <= c) {
        var g = (a.min.x - f.x) * c;
        c *= a.max.x - f.x;
      } else g = (a.max.x - f.x) * c, c *= a.min.x - f.x;

      if (0 <= d) {
        var h = (a.min.y - f.y) * d;
        d *= a.max.y - f.y;
      } else h = (a.max.y - f.y) * d, d *= a.min.y - f.y;

      if (g > d || h > c) return null;
      if (h > g || g !== g) g = h;
      if (d < c || c !== c) c = d;
      0 <= e ? (h = (a.min.z - f.z) * e, a = (a.max.z - f.z) * e) : (h = (a.max.z - f.z) * e, a = (a.min.z - f.z) * e);
      if (g > a || h > c) return null;
      if (h > g || g !== g) g = h;
      if (a < c || c !== c) c = a;
      return 0 > c ? null : this.at(0 <= g ? g : c, b);
    },
    intersectsBox: function () {
      var a = new p();
      return function (b) {
        return null !== this.intersectBox(b, a);
      };
    }(),
    intersectTriangle: function () {
      var a = new p(),
          b = new p(),
          c = new p(),
          d = new p();
      return function (e, f, g, h, k) {
        b.subVectors(f, e);
        c.subVectors(g, e);
        d.crossVectors(b, c);
        f = this.direction.dot(d);

        if (0 < f) {
          if (h) return null;
          h = 1;
        } else if (0 > f) h = -1, f = -f;else return null;

        a.subVectors(this.origin, e);
        e = h * this.direction.dot(c.crossVectors(a, c));
        if (0 > e) return null;
        g = h * this.direction.dot(b.cross(a));
        if (0 > g || e + g > f) return null;
        e = -h * a.dot(d);
        return 0 > e ? null : this.at(e / f, k);
      };
    }(),
    applyMatrix4: function applyMatrix4(a) {
      this.origin.applyMatrix4(a);
      this.direction.transformDirection(a);
      return this;
    },
    equals: function equals(a) {
      return a.origin.equals(this.origin) && a.direction.equals(this.direction);
    }
  });
  Object.assign(ha, {
    getNormal: function () {
      var a = new p();
      return function (b, c, d, e) {
        void 0 === e && (console.warn("THREE.Triangle: .getNormal() target is now required"), e = new p());
        e.subVectors(d, c);
        a.subVectors(b, c);
        e.cross(a);
        b = e.lengthSq();
        return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
      };
    }(),
    getBarycoord: function () {
      var a = new p(),
          b = new p(),
          c = new p();
      return function (d, e, f, g, h) {
        a.subVectors(g, e);
        b.subVectors(f, e);
        c.subVectors(d, e);
        d = a.dot(a);
        e = a.dot(b);
        f = a.dot(c);
        var k = b.dot(b);
        g = b.dot(c);
        var m = d * k - e * e;
        void 0 === h && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), h = new p());
        if (0 === m) return h.set(-2, -1, -1);
        m = 1 / m;
        k = (k * f - e * g) * m;
        d = (d * g - e * f) * m;
        return h.set(1 - k - d, d, k);
      };
    }(),
    containsPoint: function () {
      var a = new p();
      return function (b, c, d, e) {
        ha.getBarycoord(b, c, d, e, a);
        return 0 <= a.x && 0 <= a.y && 1 >= a.x + a.y;
      };
    }(),
    getUV: function () {
      var a = new p();
      return function (b, c, d, e, f, g, h, k) {
        this.getBarycoord(b, c, d, e, a);
        k.set(0, 0);
        k.addScaledVector(f, a.x);
        k.addScaledVector(g, a.y);
        k.addScaledVector(h, a.z);
        return k;
      };
    }()
  });
  Object.assign(ha.prototype, {
    set: function set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    },
    setFromPointsAndIndices: function setFromPointsAndIndices(a, b, c, d) {
      this.a.copy(a[b]);
      this.b.copy(a[c]);
      this.c.copy(a[d]);
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.a.copy(a.a);
      this.b.copy(a.b);
      this.c.copy(a.c);
      return this;
    },
    getArea: function () {
      var a = new p(),
          b = new p();
      return function () {
        a.subVectors(this.c, this.b);
        b.subVectors(this.a, this.b);
        return .5 * a.cross(b).length();
      };
    }(),
    getMidpoint: function getMidpoint(a) {
      void 0 === a && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), a = new p());
      return a.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    },
    getNormal: function getNormal(a) {
      return ha.getNormal(this.a, this.b, this.c, a);
    },
    getPlane: function getPlane(a) {
      void 0 === a && (console.warn("THREE.Triangle: .getPlane() target is now required"), a = new p());
      return a.setFromCoplanarPoints(this.a, this.b, this.c);
    },
    getBarycoord: function getBarycoord(a, b) {
      return ha.getBarycoord(a, this.a, this.b, this.c, b);
    },
    containsPoint: function containsPoint(a) {
      return ha.containsPoint(a, this.a, this.b, this.c);
    },
    getUV: function getUV(a, b, c, d, e) {
      return ha.getUV(a, this.a, this.b, this.c, b, c, d, e);
    },
    intersectsBox: function intersectsBox(a) {
      return a.intersectsTriangle(this);
    },
    closestPointToPoint: function () {
      var a = new p(),
          b = new p(),
          c = new p(),
          d = new p(),
          e = new p(),
          f = new p();
      return function (g, h) {
        void 0 === h && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), h = new p());
        var k = this.a,
            m = this.b,
            l = this.c;
        a.subVectors(m, k);
        b.subVectors(l, k);
        d.subVectors(g, k);
        var n = a.dot(d),
            r = b.dot(d);
        if (0 >= n && 0 >= r) return h.copy(k);
        e.subVectors(g, m);
        var x = a.dot(e),
            t = b.dot(e);
        if (0 <= x && t <= x) return h.copy(m);
        var u = n * t - x * r;
        if (0 >= u && 0 <= n && 0 >= x) return m = n / (n - x), h.copy(k).addScaledVector(a, m);
        f.subVectors(g, l);
        g = a.dot(f);
        var w = b.dot(f);
        if (0 <= w && g <= w) return h.copy(l);
        n = g * r - n * w;
        if (0 >= n && 0 <= r && 0 >= w) return u = r / (r - w), h.copy(k).addScaledVector(b, u);
        r = x * w - g * t;
        if (0 >= r && 0 <= t - x && 0 <= g - w) return c.subVectors(l, m), u = (t - x) / (t - x + (g - w)), h.copy(m).addScaledVector(c, u);
        l = 1 / (r + n + u);
        m = n * l;
        u *= l;
        return h.copy(k).addScaledVector(a, m).addScaledVector(b, u);
      };
    }(),
    equals: function equals(a) {
      return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
    }
  });
  Ea.prototype = Object.create(L.prototype);
  Ea.prototype.constructor = Ea;
  Ea.prototype.isMeshBasicMaterial = !0;

  Ea.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    return this;
  };

  pa.prototype = Object.assign(Object.create(D.prototype), {
    constructor: pa,
    isMesh: !0,
    setDrawMode: function setDrawMode(a) {
      this.drawMode = a;
    },
    copy: function copy(a) {
      D.prototype.copy.call(this, a);
      this.drawMode = a.drawMode;
      void 0 !== a.morphTargetInfluences && (this.morphTargetInfluences = a.morphTargetInfluences.slice());
      void 0 !== a.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, a.morphTargetDictionary));
      return this;
    },
    updateMorphTargets: function updateMorphTargets() {
      var a = this.geometry;

      if (a.isBufferGeometry) {
        a = a.morphAttributes;
        var b = Object.keys(a);

        if (0 < b.length) {
          var c = a[b[0]];
          if (void 0 !== c) for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, b = c.length; a < b; a++) {
            var d = c[a].name || String(a);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[d] = a;
          }
        }
      } else if (c = a.morphTargets, void 0 !== c && 0 < c.length) for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, b = c.length; a < b; a++) {
        d = c[a].name || String(a), this.morphTargetInfluences.push(0), this.morphTargetDictionary[d] = a;
      }
    },
    raycast: function () {
      function a(a, b, c, d, e, f, g, h) {
        if (null === (1 === b.side ? d.intersectTriangle(g, f, e, !0, h) : d.intersectTriangle(e, f, g, 2 !== b.side, h))) return null;
        u.copy(h);
        u.applyMatrix4(a.matrixWorld);
        b = c.ray.origin.distanceTo(u);
        return b < c.near || b > c.far ? null : {
          distance: b,
          point: u.clone(),
          object: a
        };
      }

      function b(b, c, d, e, k, m, l, q, p) {
        f.fromBufferAttribute(k, l);
        g.fromBufferAttribute(k, q);
        h.fromBufferAttribute(k, p);
        if (b = a(b, c, d, e, f, g, h, t)) m && (n.fromBufferAttribute(m, l), r.fromBufferAttribute(m, q), x.fromBufferAttribute(m, p), b.uv = ha.getUV(t, f, g, h, n, r, x, new z())), m = new Xa(l, q, p), ha.getNormal(f, g, h, m.normal), b.face = m;
        return b;
      }

      var c = new P(),
          d = new rb(),
          e = new Ga(),
          f = new p(),
          g = new p(),
          h = new p(),
          k = new p(),
          m = new p(),
          l = new p(),
          n = new z(),
          r = new z(),
          x = new z(),
          t = new p(),
          u = new p();
      return function (q, p) {
        var u = this.geometry,
            w = this.material,
            y = this.matrixWorld;
        if (void 0 !== w && (null === u.boundingSphere && u.computeBoundingSphere(), e.copy(u.boundingSphere), e.applyMatrix4(y), !1 !== q.ray.intersectsSphere(e) && (c.getInverse(y), d.copy(q.ray).applyMatrix4(c), null === u.boundingBox || !1 !== d.intersectsBox(u.boundingBox)))) if (u.isBufferGeometry) {
          var A = u.index,
              C = u.attributes.position,
              B = u.attributes.uv,
              E = u.groups;
          u = u.drawRange;
          var D;
          if (null !== A) {
            if (Array.isArray(w)) {
              var F = 0;

              for (D = E.length; F < D; F++) {
                var G = E[F];
                var J = w[G.materialIndex];
                y = Math.max(G.start, u.start);
                var L = Math.min(G.start + G.count, u.start + u.count);

                for (G = y; G < L; G += 3) {
                  y = A.getX(G);
                  var I = A.getX(G + 1);
                  var K = A.getX(G + 2);
                  if (y = b(this, J, q, d, C, B, y, I, K)) y.faceIndex = Math.floor(G / 3), p.push(y);
                }
              }
            } else for (y = Math.max(0, u.start), L = Math.min(A.count, u.start + u.count), F = y, D = L; F < D; F += 3) {
              if (y = A.getX(F), I = A.getX(F + 1), K = A.getX(F + 2), y = b(this, w, q, d, C, B, y, I, K)) y.faceIndex = Math.floor(F / 3), p.push(y);
            }
          } else if (void 0 !== C) if (Array.isArray(w)) for (F = 0, D = E.length; F < D; F++) {
            for (G = E[F], J = w[G.materialIndex], y = Math.max(G.start, u.start), L = Math.min(G.start + G.count, u.start + u.count), G = y; G < L; G += 3) {
              if (y = G, I = G + 1, K = G + 2, y = b(this, J, q, d, C, B, y, I, K)) y.faceIndex = Math.floor(G / 3), p.push(y);
            }
          } else for (y = Math.max(0, u.start), L = Math.min(C.count, u.start + u.count), F = y, D = L; F < D; F += 3) {
            if (y = F, I = F + 1, K = F + 2, y = b(this, w, q, d, C, B, y, I, K)) y.faceIndex = Math.floor(F / 3), p.push(y);
          }
        } else if (u.isGeometry) for (C = Array.isArray(w), B = u.vertices, E = u.faces, y = u.faceVertexUvs[0], 0 < y.length && (A = y), G = 0, L = E.length; G < L; G++) {
          if (I = E[G], y = C ? w[I.materialIndex] : w, void 0 !== y) {
            F = B[I.a];
            D = B[I.b];
            J = B[I.c];

            if (!0 === y.morphTargets) {
              K = u.morphTargets;
              var Q = this.morphTargetInfluences;
              f.set(0, 0, 0);
              g.set(0, 0, 0);
              h.set(0, 0, 0);

              for (var P = 0, S = K.length; P < S; P++) {
                var R = Q[P];

                if (0 !== R) {
                  var T = K[P].vertices;
                  f.addScaledVector(k.subVectors(T[I.a], F), R);
                  g.addScaledVector(m.subVectors(T[I.b], D), R);
                  h.addScaledVector(l.subVectors(T[I.c], J), R);
                }
              }

              f.add(F);
              g.add(D);
              h.add(J);
              F = f;
              D = g;
              J = h;
            }

            if (y = a(this, y, q, d, F, D, J, t)) A && A[G] && (K = A[G], n.copy(K[0]), r.copy(K[1]), x.copy(K[2]), y.uv = ha.getUV(t, F, D, J, n, r, x, new z())), y.face = I, y.faceIndex = G, p.push(y);
          }
        }
      };
    }(),
    clone: function clone() {
      return new this.constructor(this.geometry, this.material).copy(this);
    }
  });
  Ya.prototype = Object.create(W.prototype);
  Ya.prototype.constructor = Ya;
  Ya.prototype.isCubeTexture = !0;
  Object.defineProperty(Ya.prototype, "images", {
    get: function get() {
      return this.image;
    },
    set: function set(a) {
      this.image = a;
    }
  });
  Mb.prototype = Object.create(W.prototype);
  Mb.prototype.constructor = Mb;
  Mb.prototype.isDataTexture3D = !0;
  var Qe = new W(),
      kg = new Mb(),
      Re = new Ya(),
      Ke = [],
      Me = [],
      Pe = new Float32Array(16),
      Oe = new Float32Array(9),
      Ne = new Float32Array(4);

  Ve.prototype.updateCache = function (a) {
    var b = this.cache;
    a instanceof Float32Array && b.length !== a.length && (this.cache = new Float32Array(a.length));
    sa(b, a);
  };

  We.prototype.setValue = function (a, b, c) {
    for (var d = this.seq, e = 0, f = d.length; e !== f; ++e) {
      var g = d[e];
      g.setValue(a, b[g.id], c);
    }
  };

  var $d = /([\w\d_]+)(\])?(\[|\.)?/g;

  db.prototype.setValue = function (a, b, c) {
    b = this.map[b];
    void 0 !== b && b.setValue(a, c, this.renderer);
  };

  db.prototype.setOptional = function (a, b, c) {
    b = b[c];
    void 0 !== b && this.setValue(a, c, b);
  };

  db.upload = function (a, b, c, d) {
    for (var e = 0, f = b.length; e !== f; ++e) {
      var g = b[e],
          h = c[g.id];
      !1 !== h.needsUpdate && g.setValue(a, h.value, d);
    }
  };

  db.seqWithValue = function (a, b) {
    for (var c = [], d = 0, e = a.length; d !== e; ++d) {
      var f = a[d];
      f.id in b && c.push(f);
    }

    return c;
  };

  var Fg = 0,
      Og = 0;
  eb.prototype = Object.create(L.prototype);
  eb.prototype.constructor = eb;
  eb.prototype.isMeshDepthMaterial = !0;

  eb.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.depthPacking = a.depthPacking;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    return this;
  };

  fb.prototype = Object.create(L.prototype);
  fb.prototype.constructor = fb;
  fb.prototype.isMeshDistanceMaterial = !0;

  fb.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.referencePosition.copy(a.referencePosition);
    this.nearDistance = a.nearDistance;
    this.farDistance = a.farDistance;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.map = a.map;
    this.alphaMap = a.alphaMap;
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    return this;
  };

  Ob.prototype = Object.assign(Object.create(D.prototype), {
    constructor: Ob,
    isGroup: !0
  });
  Ra.prototype = Object.assign(Object.create(D.prototype), {
    constructor: Ra,
    isCamera: !0,
    copy: function copy(a, b) {
      D.prototype.copy.call(this, a, b);
      this.matrixWorldInverse.copy(a.matrixWorldInverse);
      this.projectionMatrix.copy(a.projectionMatrix);
      this.projectionMatrixInverse.copy(a.projectionMatrixInverse);
      return this;
    },
    getWorldDirection: function getWorldDirection(a) {
      void 0 === a && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), a = new p());
      this.updateMatrixWorld(!0);
      var b = this.matrixWorld.elements;
      return a.set(-b[8], -b[9], -b[10]).normalize();
    },
    updateMatrixWorld: function updateMatrixWorld(a) {
      D.prototype.updateMatrixWorld.call(this, a);
      this.matrixWorldInverse.getInverse(this.matrixWorld);
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    }
  });
  V.prototype = Object.assign(Object.create(Ra.prototype), {
    constructor: V,
    isPerspectiveCamera: !0,
    copy: function copy(a, b) {
      Ra.prototype.copy.call(this, a, b);
      this.fov = a.fov;
      this.zoom = a.zoom;
      this.near = a.near;
      this.far = a.far;
      this.focus = a.focus;
      this.aspect = a.aspect;
      this.view = null === a.view ? null : Object.assign({}, a.view);
      this.filmGauge = a.filmGauge;
      this.filmOffset = a.filmOffset;
      return this;
    },
    setFocalLength: function setFocalLength(a) {
      a = .5 * this.getFilmHeight() / a;
      this.fov = 2 * R.RAD2DEG * Math.atan(a);
      this.updateProjectionMatrix();
    },
    getFocalLength: function getFocalLength() {
      var a = Math.tan(.5 * R.DEG2RAD * this.fov);
      return .5 * this.getFilmHeight() / a;
    },
    getEffectiveFOV: function getEffectiveFOV() {
      return 2 * R.RAD2DEG * Math.atan(Math.tan(.5 * R.DEG2RAD * this.fov) / this.zoom);
    },
    getFilmWidth: function getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    },
    getFilmHeight: function getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    },
    setViewOffset: function setViewOffset(a, b, c, d, e, f) {
      this.aspect = a / b;
      null === this.view && (this.view = {
        enabled: !0,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      });
      this.view.enabled = !0;
      this.view.fullWidth = a;
      this.view.fullHeight = b;
      this.view.offsetX = c;
      this.view.offsetY = d;
      this.view.width = e;
      this.view.height = f;
      this.updateProjectionMatrix();
    },
    clearViewOffset: function clearViewOffset() {
      null !== this.view && (this.view.enabled = !1);
      this.updateProjectionMatrix();
    },
    updateProjectionMatrix: function updateProjectionMatrix() {
      var a = this.near,
          b = a * Math.tan(.5 * R.DEG2RAD * this.fov) / this.zoom,
          c = 2 * b,
          d = this.aspect * c,
          e = -.5 * d,
          f = this.view;

      if (null !== this.view && this.view.enabled) {
        var g = f.fullWidth,
            h = f.fullHeight;
        e += f.offsetX * d / g;
        b -= f.offsetY * c / h;
        d *= f.width / g;
        c *= f.height / h;
      }

      f = this.filmOffset;
      0 !== f && (e += a * f / this.getFilmWidth());
      this.projectionMatrix.makePerspective(e, e + d, b, b - c, a, this.far);
      this.projectionMatrixInverse.getInverse(this.projectionMatrix);
    },
    toJSON: function toJSON(a) {
      a = D.prototype.toJSON.call(this, a);
      a.object.fov = this.fov;
      a.object.zoom = this.zoom;
      a.object.near = this.near;
      a.object.far = this.far;
      a.object.focus = this.focus;
      a.object.aspect = this.aspect;
      null !== this.view && (a.object.view = Object.assign({}, this.view));
      a.object.filmGauge = this.filmGauge;
      a.object.filmOffset = this.filmOffset;
      return a;
    }
  });
  Cc.prototype = Object.assign(Object.create(V.prototype), {
    constructor: Cc,
    isArrayCamera: !0
  });
  var ff = new p(),
      gf = new p();
  Pb.prototype.isFogExp2 = !0;

  Pb.prototype.clone = function () {
    return new Pb(this.color, this.density);
  };

  Pb.prototype.toJSON = function () {
    return {
      type: "FogExp2",
      color: this.color.getHex(),
      density: this.density
    };
  };

  Qb.prototype.isFog = !0;

  Qb.prototype.clone = function () {
    return new Qb(this.color, this.near, this.far);
  };

  Qb.prototype.toJSON = function () {
    return {
      type: "Fog",
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  };

  vd.prototype = Object.assign(Object.create(D.prototype), {
    constructor: vd,
    copy: function copy(a, b) {
      D.prototype.copy.call(this, a, b);
      null !== a.background && (this.background = a.background.clone());
      null !== a.fog && (this.fog = a.fog.clone());
      null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());
      this.autoUpdate = a.autoUpdate;
      this.matrixAutoUpdate = a.matrixAutoUpdate;
      return this;
    },
    toJSON: function toJSON(a) {
      var b = D.prototype.toJSON.call(this, a);
      null !== this.background && (b.object.background = this.background.toJSON(a));
      null !== this.fog && (b.object.fog = this.fog.toJSON());
      return b;
    }
  });
  Object.defineProperty(sb.prototype, "needsUpdate", {
    set: function set(a) {
      !0 === a && this.version++;
    }
  });
  Object.assign(sb.prototype, {
    isInterleavedBuffer: !0,
    onUploadCallback: function onUploadCallback() {},
    setArray: function setArray(a) {
      if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      this.count = void 0 !== a ? a.length / this.stride : 0;
      this.array = a;
      return this;
    },
    setDynamic: function setDynamic(a) {
      this.dynamic = a;
      return this;
    },
    copy: function copy(a) {
      this.array = new a.array.constructor(a.array);
      this.count = a.count;
      this.stride = a.stride;
      this.dynamic = a.dynamic;
      return this;
    },
    copyAt: function copyAt(a, b, c) {
      a *= this.stride;
      c *= b.stride;

      for (var d = 0, e = this.stride; d < e; d++) {
        this.array[a + d] = b.array[c + d];
      }

      return this;
    },
    set: function set(a, b) {
      void 0 === b && (b = 0);
      this.array.set(a, b);
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    onUpload: function onUpload(a) {
      this.onUploadCallback = a;
      return this;
    }
  });
  Object.defineProperties(Dc.prototype, {
    count: {
      get: function get() {
        return this.data.count;
      }
    },
    array: {
      get: function get() {
        return this.data.array;
      }
    }
  });
  Object.assign(Dc.prototype, {
    isInterleavedBufferAttribute: !0,
    setX: function setX(a, b) {
      this.data.array[a * this.data.stride + this.offset] = b;
      return this;
    },
    setY: function setY(a, b) {
      this.data.array[a * this.data.stride + this.offset + 1] = b;
      return this;
    },
    setZ: function setZ(a, b) {
      this.data.array[a * this.data.stride + this.offset + 2] = b;
      return this;
    },
    setW: function setW(a, b) {
      this.data.array[a * this.data.stride + this.offset + 3] = b;
      return this;
    },
    getX: function getX(a) {
      return this.data.array[a * this.data.stride + this.offset];
    },
    getY: function getY(a) {
      return this.data.array[a * this.data.stride + this.offset + 1];
    },
    getZ: function getZ(a) {
      return this.data.array[a * this.data.stride + this.offset + 2];
    },
    getW: function getW(a) {
      return this.data.array[a * this.data.stride + this.offset + 3];
    },
    setXY: function setXY(a, b, c) {
      a = a * this.data.stride + this.offset;
      this.data.array[a + 0] = b;
      this.data.array[a + 1] = c;
      return this;
    },
    setXYZ: function setXYZ(a, b, c, d) {
      a = a * this.data.stride + this.offset;
      this.data.array[a + 0] = b;
      this.data.array[a + 1] = c;
      this.data.array[a + 2] = d;
      return this;
    },
    setXYZW: function setXYZW(a, b, c, d, e) {
      a = a * this.data.stride + this.offset;
      this.data.array[a + 0] = b;
      this.data.array[a + 1] = c;
      this.data.array[a + 2] = d;
      this.data.array[a + 3] = e;
      return this;
    }
  });
  hb.prototype = Object.create(L.prototype);
  hb.prototype.constructor = hb;
  hb.prototype.isSpriteMaterial = !0;

  hb.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.rotation = a.rotation;
    this.sizeAttenuation = a.sizeAttenuation;
    return this;
  };

  var Rb;
  Ec.prototype = Object.assign(Object.create(D.prototype), {
    constructor: Ec,
    isSprite: !0,
    raycast: function () {
      function a(a, b, c, d, h, k) {
        e.subVectors(a, c).addScalar(.5).multiply(d);
        void 0 !== h ? (f.x = k * e.x - h * e.y, f.y = h * e.x + k * e.y) : f.copy(e);
        a.copy(b);
        a.x += f.x;
        a.y += f.y;
        a.applyMatrix4(g);
      }

      var b = new p(),
          c = new p(),
          d = new p(),
          e = new z(),
          f = new z(),
          g = new P(),
          h = new p(),
          k = new p(),
          m = new p(),
          l = new z(),
          n = new z(),
          r = new z();
      return function (e, f) {
        c.setFromMatrixScale(this.matrixWorld);
        g.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld);
        d.setFromMatrixPosition(this.modelViewMatrix);
        var q = this.material.rotation;

        if (0 !== q) {
          var p = Math.cos(q);
          var t = Math.sin(q);
        }

        q = this.center;
        a(h.set(-.5, -.5, 0), d, q, c, t, p);
        a(k.set(.5, -.5, 0), d, q, c, t, p);
        a(m.set(.5, .5, 0), d, q, c, t, p);
        l.set(0, 0);
        n.set(1, 0);
        r.set(1, 1);
        var x = e.ray.intersectTriangle(h, k, m, !1, b);
        if (null === x && (a(k.set(-.5, .5, 0), d, q, c, t, p), n.set(0, 1), x = e.ray.intersectTriangle(h, m, k, !1, b), null === x)) return;
        t = e.ray.origin.distanceTo(b);
        t < e.near || t > e.far || f.push({
          distance: t,
          point: b.clone(),
          uv: ha.getUV(b, h, k, m, l, n, r, new z()),
          face: null,
          object: this
        });
      };
    }(),
    clone: function clone() {
      return new this.constructor(this.material).copy(this);
    },
    copy: function copy(a) {
      D.prototype.copy.call(this, a);
      void 0 !== a.center && this.center.copy(a.center);
      return this;
    }
  });
  Fc.prototype = Object.assign(Object.create(D.prototype), {
    constructor: Fc,
    copy: function copy(a) {
      D.prototype.copy.call(this, a, !1);
      a = a.levels;

      for (var b = 0, c = a.length; b < c; b++) {
        var d = a[b];
        this.addLevel(d.object.clone(), d.distance);
      }

      return this;
    },
    addLevel: function addLevel(a, b) {
      void 0 === b && (b = 0);
      b = Math.abs(b);

      for (var c = this.levels, d = 0; d < c.length && !(b < c[d].distance); d++) {
        ;
      }

      c.splice(d, 0, {
        distance: b,
        object: a
      });
      this.add(a);
    },
    getObjectForDistance: function getObjectForDistance(a) {
      for (var b = this.levels, c = 1, d = b.length; c < d && !(a < b[c].distance); c++) {
        ;
      }

      return b[c - 1].object;
    },
    raycast: function () {
      var a = new p();
      return function (b, c) {
        a.setFromMatrixPosition(this.matrixWorld);
        var d = b.ray.origin.distanceTo(a);
        this.getObjectForDistance(d).raycast(b, c);
      };
    }(),
    update: function () {
      var a = new p(),
          b = new p();
      return function (c) {
        var d = this.levels;

        if (1 < d.length) {
          a.setFromMatrixPosition(c.matrixWorld);
          b.setFromMatrixPosition(this.matrixWorld);
          c = a.distanceTo(b);
          d[0].object.visible = !0;

          for (var e = 1, f = d.length; e < f; e++) {
            if (c >= d[e].distance) d[e - 1].object.visible = !1, d[e].object.visible = !0;else break;
          }

          for (; e < f; e++) {
            d[e].object.visible = !1;
          }
        }
      };
    }(),
    toJSON: function toJSON(a) {
      a = D.prototype.toJSON.call(this, a);
      a.object.levels = [];

      for (var b = this.levels, c = 0, d = b.length; c < d; c++) {
        var e = b[c];
        a.object.levels.push({
          object: e.object.uuid,
          distance: e.distance
        });
      }

      return a;
    }
  });
  Object.assign(Gc.prototype, {
    calculateInverses: function calculateInverses() {
      this.boneInverses = [];

      for (var a = 0, b = this.bones.length; a < b; a++) {
        var c = new P();
        this.bones[a] && c.getInverse(this.bones[a].matrixWorld);
        this.boneInverses.push(c);
      }
    },
    pose: function pose() {
      var a, b;
      var c = 0;

      for (b = this.bones.length; c < b; c++) {
        (a = this.bones[c]) && a.matrixWorld.getInverse(this.boneInverses[c]);
      }

      c = 0;

      for (b = this.bones.length; c < b; c++) {
        if (a = this.bones[c]) a.parent && a.parent.isBone ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
      }
    },
    update: function () {
      var a = new P(),
          b = new P();
      return function () {
        for (var c = this.bones, d = this.boneInverses, e = this.boneMatrices, f = this.boneTexture, g = 0, h = c.length; g < h; g++) {
          a.multiplyMatrices(c[g] ? c[g].matrixWorld : b, d[g]), a.toArray(e, 16 * g);
        }

        void 0 !== f && (f.needsUpdate = !0);
      };
    }(),
    clone: function clone() {
      return new Gc(this.bones, this.boneInverses);
    },
    getBoneByName: function getBoneByName(a) {
      for (var b = 0, c = this.bones.length; b < c; b++) {
        var d = this.bones[b];
        if (d.name === a) return d;
      }
    }
  });
  wd.prototype = Object.assign(Object.create(D.prototype), {
    constructor: wd,
    isBone: !0
  });
  xd.prototype = Object.assign(Object.create(pa.prototype), {
    constructor: xd,
    isSkinnedMesh: !0,
    initBones: function initBones() {
      var a = [],
          b;

      if (this.geometry && void 0 !== this.geometry.bones) {
        var c = 0;

        for (b = this.geometry.bones.length; c < b; c++) {
          var d = this.geometry.bones[c];
          var e = new wd();
          a.push(e);
          e.name = d.name;
          e.position.fromArray(d.pos);
          e.quaternion.fromArray(d.rotq);
          void 0 !== d.scl && e.scale.fromArray(d.scl);
        }

        c = 0;

        for (b = this.geometry.bones.length; c < b; c++) {
          d = this.geometry.bones[c], -1 !== d.parent && null !== d.parent && void 0 !== a[d.parent] ? a[d.parent].add(a[c]) : this.add(a[c]);
        }
      }

      this.updateMatrixWorld(!0);
      return a;
    },
    bind: function bind(a, b) {
      this.skeleton = a;
      void 0 === b && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), b = this.matrixWorld);
      this.bindMatrix.copy(b);
      this.bindMatrixInverse.getInverse(b);
    },
    pose: function pose() {
      this.skeleton.pose();
    },
    normalizeSkinWeights: function normalizeSkinWeights() {
      var a;
      if (this.geometry && this.geometry.isGeometry) for (a = 0; a < this.geometry.skinWeights.length; a++) {
        var b = this.geometry.skinWeights[a];
        var c = 1 / b.manhattanLength();
        Infinity !== c ? b.multiplyScalar(c) : b.set(1, 0, 0, 0);
      } else if (this.geometry && this.geometry.isBufferGeometry) {
        b = new Z();
        var d = this.geometry.attributes.skinWeight;

        for (a = 0; a < d.count; a++) {
          b.x = d.getX(a), b.y = d.getY(a), b.z = d.getZ(a), b.w = d.getW(a), c = 1 / b.manhattanLength(), Infinity !== c ? b.multiplyScalar(c) : b.set(1, 0, 0, 0), d.setXYZW(a, b.x, b.y, b.z, b.w);
        }
      }
    },
    updateMatrixWorld: function updateMatrixWorld(a) {
      pa.prototype.updateMatrixWorld.call(this, a);
      "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    },
    clone: function clone() {
      return new this.constructor(this.geometry, this.material).copy(this);
    }
  });
  T.prototype = Object.create(L.prototype);
  T.prototype.constructor = T;
  T.prototype.isLineBasicMaterial = !0;

  T.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.linewidth = a.linewidth;
    this.linecap = a.linecap;
    this.linejoin = a.linejoin;
    return this;
  };

  ma.prototype = Object.assign(Object.create(D.prototype), {
    constructor: ma,
    isLine: !0,
    computeLineDistances: function () {
      var a = new p(),
          b = new p();
      return function () {
        var c = this.geometry;
        if (c.isBufferGeometry) {
          if (null === c.index) {
            for (var d = c.attributes.position, e = [0], f = 1, g = d.count; f < g; f++) {
              a.fromBufferAttribute(d, f - 1), b.fromBufferAttribute(d, f), e[f] = e[f - 1], e[f] += a.distanceTo(b);
            }

            c.addAttribute("lineDistance", new C(e, 1));
          } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        } else if (c.isGeometry) for (d = c.vertices, e = c.lineDistances, e[0] = 0, f = 1, g = d.length; f < g; f++) {
          e[f] = e[f - 1], e[f] += d[f - 1].distanceTo(d[f]);
        }
        return this;
      };
    }(),
    raycast: function () {
      var a = new P(),
          b = new rb(),
          c = new Ga();
      return function (d, e) {
        var f = d.linePrecision,
            g = this.geometry,
            h = this.matrixWorld;
        null === g.boundingSphere && g.computeBoundingSphere();
        c.copy(g.boundingSphere);
        c.applyMatrix4(h);
        c.radius += f;

        if (!1 !== d.ray.intersectsSphere(c)) {
          a.getInverse(h);
          b.copy(d.ray).applyMatrix4(a);
          f /= (this.scale.x + this.scale.y + this.scale.z) / 3;
          f *= f;
          var k = new p(),
              m = new p();
          h = new p();
          var l = new p(),
              n = this && this.isLineSegments ? 2 : 1;

          if (g.isBufferGeometry) {
            var r = g.index,
                x = g.attributes.position.array;

            if (null !== r) {
              r = r.array;
              g = 0;

              for (var t = r.length - 1; g < t; g += n) {
                var u = r[g + 1];
                k.fromArray(x, 3 * r[g]);
                m.fromArray(x, 3 * u);
                u = b.distanceSqToSegment(k, m, l, h);
                u > f || (l.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(l), u < d.near || u > d.far || e.push({
                  distance: u,
                  point: h.clone().applyMatrix4(this.matrixWorld),
                  index: g,
                  face: null,
                  faceIndex: null,
                  object: this
                }));
              }
            } else for (g = 0, t = x.length / 3 - 1; g < t; g += n) {
              k.fromArray(x, 3 * g), m.fromArray(x, 3 * g + 3), u = b.distanceSqToSegment(k, m, l, h), u > f || (l.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(l), u < d.near || u > d.far || e.push({
                distance: u,
                point: h.clone().applyMatrix4(this.matrixWorld),
                index: g,
                face: null,
                faceIndex: null,
                object: this
              }));
            }
          } else if (g.isGeometry) for (k = g.vertices, m = k.length, g = 0; g < m - 1; g += n) {
            u = b.distanceSqToSegment(k[g], k[g + 1], l, h), u > f || (l.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(l), u < d.near || u > d.far || e.push({
              distance: u,
              point: h.clone().applyMatrix4(this.matrixWorld),
              index: g,
              face: null,
              faceIndex: null,
              object: this
            }));
          }
        }
      };
    }(),
    copy: function copy(a) {
      D.prototype.copy.call(this, a);
      this.geometry.copy(a.geometry);
      this.material.copy(a.material);
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    }
  });
  S.prototype = Object.assign(Object.create(ma.prototype), {
    constructor: S,
    isLineSegments: !0,
    computeLineDistances: function () {
      var a = new p(),
          b = new p();
      return function () {
        var c = this.geometry;
        if (c.isBufferGeometry) {
          if (null === c.index) {
            for (var d = c.attributes.position, e = [], f = 0, g = d.count; f < g; f += 2) {
              a.fromBufferAttribute(d, f), b.fromBufferAttribute(d, f + 1), e[f] = 0 === f ? 0 : e[f - 1], e[f + 1] = e[f] + a.distanceTo(b);
            }

            c.addAttribute("lineDistance", new C(e, 1));
          } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        } else if (c.isGeometry) for (d = c.vertices, e = c.lineDistances, f = 0, g = d.length; f < g; f += 2) {
          a.copy(d[f]), b.copy(d[f + 1]), e[f] = 0 === f ? 0 : e[f - 1], e[f + 1] = e[f] + a.distanceTo(b);
        }
        return this;
      };
    }()
  });
  yd.prototype = Object.assign(Object.create(ma.prototype), {
    constructor: yd,
    isLineLoop: !0
  });
  Ha.prototype = Object.create(L.prototype);
  Ha.prototype.constructor = Ha;
  Ha.prototype.isPointsMaterial = !0;

  Ha.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.size = a.size;
    this.sizeAttenuation = a.sizeAttenuation;
    this.morphTargets = a.morphTargets;
    return this;
  };

  Sb.prototype = Object.assign(Object.create(D.prototype), {
    constructor: Sb,
    isPoints: !0,
    raycast: function () {
      var a = new P(),
          b = new rb(),
          c = new Ga();
      return function (d, e) {
        function f(a, c) {
          var f = b.distanceSqToPoint(a);
          f < l && (b.closestPointToPoint(a, n), n.applyMatrix4(k), a = d.ray.origin.distanceTo(n), a < d.near || a > d.far || e.push({
            distance: a,
            distanceToRay: Math.sqrt(f),
            point: n.clone(),
            index: c,
            face: null,
            object: g
          }));
        }

        var g = this,
            h = this.geometry,
            k = this.matrixWorld,
            m = d.params.Points.threshold;
        null === h.boundingSphere && h.computeBoundingSphere();
        c.copy(h.boundingSphere);
        c.applyMatrix4(k);
        c.radius += m;

        if (!1 !== d.ray.intersectsSphere(c)) {
          a.getInverse(k);
          b.copy(d.ray).applyMatrix4(a);
          m /= (this.scale.x + this.scale.y + this.scale.z) / 3;
          var l = m * m;
          m = new p();
          var n = new p();

          if (h.isBufferGeometry) {
            var r = h.index;
            h = h.attributes.position.array;

            if (null !== r) {
              var x = r.array;
              r = 0;

              for (var t = x.length; r < t; r++) {
                var u = x[r];
                m.fromArray(h, 3 * u);
                f(m, u);
              }
            } else for (r = 0, x = h.length / 3; r < x; r++) {
              m.fromArray(h, 3 * r), f(m, r);
            }
          } else for (m = h.vertices, r = 0, x = m.length; r < x; r++) {
            f(m[r], r);
          }
        }
      };
    }(),
    clone: function clone() {
      return new this.constructor(this.geometry, this.material).copy(this);
    }
  });
  de.prototype = Object.assign(Object.create(W.prototype), {
    constructor: de,
    isVideoTexture: !0,
    update: function update() {
      var a = this.image;
      a.readyState >= a.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
    }
  });
  Tb.prototype = Object.create(W.prototype);
  Tb.prototype.constructor = Tb;
  Tb.prototype.isCompressedTexture = !0;
  Hc.prototype = Object.create(W.prototype);
  Hc.prototype.constructor = Hc;
  Hc.prototype.isCanvasTexture = !0;
  Ic.prototype = Object.create(W.prototype);
  Ic.prototype.constructor = Ic;
  Ic.prototype.isDepthTexture = !0;
  Ub.prototype = Object.create(E.prototype);
  Ub.prototype.constructor = Ub;
  Jc.prototype = Object.create(I.prototype);
  Jc.prototype.constructor = Jc;
  Vb.prototype = Object.create(E.prototype);
  Vb.prototype.constructor = Vb;
  Kc.prototype = Object.create(I.prototype);
  Kc.prototype.constructor = Kc;
  ya.prototype = Object.create(E.prototype);
  ya.prototype.constructor = ya;
  Lc.prototype = Object.create(I.prototype);
  Lc.prototype.constructor = Lc;
  Wb.prototype = Object.create(ya.prototype);
  Wb.prototype.constructor = Wb;
  Mc.prototype = Object.create(I.prototype);
  Mc.prototype.constructor = Mc;
  tb.prototype = Object.create(ya.prototype);
  tb.prototype.constructor = tb;
  Nc.prototype = Object.create(I.prototype);
  Nc.prototype.constructor = Nc;
  Xb.prototype = Object.create(ya.prototype);
  Xb.prototype.constructor = Xb;
  Oc.prototype = Object.create(I.prototype);
  Oc.prototype.constructor = Oc;
  Yb.prototype = Object.create(ya.prototype);
  Yb.prototype.constructor = Yb;
  Pc.prototype = Object.create(I.prototype);
  Pc.prototype.constructor = Pc;
  Zb.prototype = Object.create(E.prototype);
  Zb.prototype.constructor = Zb;
  Qc.prototype = Object.create(I.prototype);
  Qc.prototype.constructor = Qc;
  $b.prototype = Object.create(E.prototype);
  $b.prototype.constructor = $b;
  Rc.prototype = Object.create(I.prototype);
  Rc.prototype.constructor = Rc;
  ac.prototype = Object.create(E.prototype);
  ac.prototype.constructor = ac;
  var ah = {
    triangulate: function triangulate(a, b, c) {
      c = c || 2;
      var d = b && b.length,
          e = d ? b[0] * c : a.length,
          f = jf(a, 0, e, c, !0),
          g = [];
      if (!f) return g;
      var h;

      if (d) {
        var k = c;
        d = [];
        var m;
        var l = 0;

        for (m = b.length; l < m; l++) {
          var n = b[l] * k;
          var r = l < m - 1 ? b[l + 1] * k : a.length;
          n = jf(a, n, r, k, !1);
          n === n.next && (n.steiner = !0);
          d.push(Wg(n));
        }

        d.sort(Ug);

        for (l = 0; l < d.length; l++) {
          b = d[l];
          k = f;
          if (k = Vg(b, k)) b = mf(k, b), Tc(b, b.next);
          f = Tc(f, f.next);
        }
      }

      if (a.length > 80 * c) {
        var p = h = a[0];
        var t = d = a[1];

        for (k = c; k < e; k += c) {
          l = a[k], b = a[k + 1], l < p && (p = l), b < t && (t = b), l > h && (h = l), b > d && (d = b);
        }

        h = Math.max(h - p, d - t);
        h = 0 !== h ? 1 / h : 0;
      }

      Uc(f, g, c, p, t, h);
      return g;
    }
  },
      Za = {
    area: function area(a) {
      for (var b = a.length, c = 0, d = b - 1, e = 0; e < b; d = e++) {
        c += a[d].x * a[e].y - a[e].x * a[d].y;
      }

      return .5 * c;
    },
    isClockWise: function isClockWise(a) {
      return 0 > Za.area(a);
    },
    triangulateShape: function triangulateShape(a, b) {
      var c = [],
          d = [],
          e = [];
      nf(a);
      of(c, a);
      var f = a.length;
      b.forEach(nf);

      for (a = 0; a < b.length; a++) {
        d.push(f), f += b[a].length, of(c, b[a]);
      }

      b = ah.triangulate(c, d);

      for (a = 0; a < b.length; a += 3) {
        e.push(b.slice(a, a + 3));
      }

      return e;
    }
  };
  vb.prototype = Object.create(I.prototype);
  vb.prototype.constructor = vb;

  vb.prototype.toJSON = function () {
    var a = I.prototype.toJSON.call(this);
    return pf(this.parameters.shapes, this.parameters.options, a);
  };

  Sa.prototype = Object.create(E.prototype);
  Sa.prototype.constructor = Sa;

  Sa.prototype.toJSON = function () {
    var a = E.prototype.toJSON.call(this);
    return pf(this.parameters.shapes, this.parameters.options, a);
  };

  var Xg = {
    generateTopUV: function generateTopUV(a, b, c, d, e) {
      a = b[3 * d];
      d = b[3 * d + 1];
      var f = b[3 * e];
      e = b[3 * e + 1];
      return [new z(b[3 * c], b[3 * c + 1]), new z(a, d), new z(f, e)];
    },
    generateSideWallUV: function generateSideWallUV(a, b, c, d, e, f) {
      a = b[3 * c];
      var g = b[3 * c + 1];
      c = b[3 * c + 2];
      var h = b[3 * d],
          k = b[3 * d + 1];
      d = b[3 * d + 2];
      var m = b[3 * e],
          l = b[3 * e + 1];
      e = b[3 * e + 2];
      var n = b[3 * f],
          r = b[3 * f + 1];
      b = b[3 * f + 2];
      return .01 > Math.abs(g - k) ? [new z(a, 1 - c), new z(h, 1 - d), new z(m, 1 - e), new z(n, 1 - b)] : [new z(g, 1 - c), new z(k, 1 - d), new z(l, 1 - e), new z(r, 1 - b)];
    }
  };
  Wc.prototype = Object.create(I.prototype);
  Wc.prototype.constructor = Wc;
  bc.prototype = Object.create(Sa.prototype);
  bc.prototype.constructor = bc;
  Xc.prototype = Object.create(I.prototype);
  Xc.prototype.constructor = Xc;
  wb.prototype = Object.create(E.prototype);
  wb.prototype.constructor = wb;
  Yc.prototype = Object.create(I.prototype);
  Yc.prototype.constructor = Yc;
  cc.prototype = Object.create(E.prototype);
  cc.prototype.constructor = cc;
  Zc.prototype = Object.create(I.prototype);
  Zc.prototype.constructor = Zc;
  dc.prototype = Object.create(E.prototype);
  dc.prototype.constructor = dc;
  xb.prototype = Object.create(I.prototype);
  xb.prototype.constructor = xb;

  xb.prototype.toJSON = function () {
    var a = I.prototype.toJSON.call(this);
    return qf(this.parameters.shapes, a);
  };

  yb.prototype = Object.create(E.prototype);
  yb.prototype.constructor = yb;

  yb.prototype.toJSON = function () {
    var a = E.prototype.toJSON.call(this);
    return qf(this.parameters.shapes, a);
  };

  ec.prototype = Object.create(E.prototype);
  ec.prototype.constructor = ec;
  zb.prototype = Object.create(I.prototype);
  zb.prototype.constructor = zb;
  $a.prototype = Object.create(E.prototype);
  $a.prototype.constructor = $a;
  $c.prototype = Object.create(zb.prototype);
  $c.prototype.constructor = $c;
  ad.prototype = Object.create($a.prototype);
  ad.prototype.constructor = ad;
  bd.prototype = Object.create(I.prototype);
  bd.prototype.constructor = bd;
  fc.prototype = Object.create(E.prototype);
  fc.prototype.constructor = fc;
  var Ba = Object.freeze({
    WireframeGeometry: Ub,
    ParametricGeometry: Jc,
    ParametricBufferGeometry: Vb,
    TetrahedronGeometry: Lc,
    TetrahedronBufferGeometry: Wb,
    OctahedronGeometry: Mc,
    OctahedronBufferGeometry: tb,
    IcosahedronGeometry: Nc,
    IcosahedronBufferGeometry: Xb,
    DodecahedronGeometry: Oc,
    DodecahedronBufferGeometry: Yb,
    PolyhedronGeometry: Kc,
    PolyhedronBufferGeometry: ya,
    TubeGeometry: Pc,
    TubeBufferGeometry: Zb,
    TorusKnotGeometry: Qc,
    TorusKnotBufferGeometry: $b,
    TorusGeometry: Rc,
    TorusBufferGeometry: ac,
    TextGeometry: Wc,
    TextBufferGeometry: bc,
    SphereGeometry: Xc,
    SphereBufferGeometry: wb,
    RingGeometry: Yc,
    RingBufferGeometry: cc,
    PlaneGeometry: yc,
    PlaneBufferGeometry: qb,
    LatheGeometry: Zc,
    LatheBufferGeometry: dc,
    ShapeGeometry: xb,
    ShapeBufferGeometry: yb,
    ExtrudeGeometry: vb,
    ExtrudeBufferGeometry: Sa,
    EdgesGeometry: ec,
    ConeGeometry: $c,
    ConeBufferGeometry: ad,
    CylinderGeometry: zb,
    CylinderBufferGeometry: $a,
    CircleGeometry: bd,
    CircleBufferGeometry: fc,
    BoxGeometry: Kb,
    BoxBufferGeometry: pb
  });
  Ab.prototype = Object.create(L.prototype);
  Ab.prototype.constructor = Ab;
  Ab.prototype.isShadowMaterial = !0;

  Ab.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.color.copy(a.color);
    return this;
  };

  gc.prototype = Object.create(ka.prototype);
  gc.prototype.constructor = gc;
  gc.prototype.isRawShaderMaterial = !0;
  Ta.prototype = Object.create(L.prototype);
  Ta.prototype.constructor = Ta;
  Ta.prototype.isMeshStandardMaterial = !0;

  Ta.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.defines = {
      STANDARD: ""
    };
    this.color.copy(a.color);
    this.roughness = a.roughness;
    this.metalness = a.metalness;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.roughnessMap = a.roughnessMap;
    this.metalnessMap = a.metalnessMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.envMapIntensity = a.envMapIntensity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };

  Bb.prototype = Object.create(Ta.prototype);
  Bb.prototype.constructor = Bb;
  Bb.prototype.isMeshPhysicalMaterial = !0;

  Bb.prototype.copy = function (a) {
    Ta.prototype.copy.call(this, a);
    this.defines = {
      PHYSICAL: ""
    };
    this.reflectivity = a.reflectivity;
    this.clearCoat = a.clearCoat;
    this.clearCoatRoughness = a.clearCoatRoughness;
    return this;
  };

  Ia.prototype = Object.create(L.prototype);
  Ia.prototype.constructor = Ia;
  Ia.prototype.isMeshPhongMaterial = !0;

  Ia.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.specular.copy(a.specular);
    this.shininess = a.shininess;
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };

  Cb.prototype = Object.create(Ia.prototype);
  Cb.prototype.constructor = Cb;
  Cb.prototype.isMeshToonMaterial = !0;

  Cb.prototype.copy = function (a) {
    Ia.prototype.copy.call(this, a);
    this.gradientMap = a.gradientMap;
    return this;
  };

  Db.prototype = Object.create(L.prototype);
  Db.prototype.constructor = Db;
  Db.prototype.isMeshNormalMaterial = !0;

  Db.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };

  Eb.prototype = Object.create(L.prototype);
  Eb.prototype.constructor = Eb;
  Eb.prototype.isMeshLambertMaterial = !0;

  Eb.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.color.copy(a.color);
    this.map = a.map;
    this.lightMap = a.lightMap;
    this.lightMapIntensity = a.lightMapIntensity;
    this.aoMap = a.aoMap;
    this.aoMapIntensity = a.aoMapIntensity;
    this.emissive.copy(a.emissive);
    this.emissiveMap = a.emissiveMap;
    this.emissiveIntensity = a.emissiveIntensity;
    this.specularMap = a.specularMap;
    this.alphaMap = a.alphaMap;
    this.envMap = a.envMap;
    this.combine = a.combine;
    this.reflectivity = a.reflectivity;
    this.refractionRatio = a.refractionRatio;
    this.wireframe = a.wireframe;
    this.wireframeLinewidth = a.wireframeLinewidth;
    this.wireframeLinecap = a.wireframeLinecap;
    this.wireframeLinejoin = a.wireframeLinejoin;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };

  Fb.prototype = Object.create(L.prototype);
  Fb.prototype.constructor = Fb;
  Fb.prototype.isMeshMatcapMaterial = !0;

  Fb.prototype.copy = function (a) {
    L.prototype.copy.call(this, a);
    this.defines = {
      MATCAP: ""
    };
    this.color.copy(a.color);
    this.matcap = a.matcap;
    this.map = a.map;
    this.bumpMap = a.bumpMap;
    this.bumpScale = a.bumpScale;
    this.normalMap = a.normalMap;
    this.normalMapType = a.normalMapType;
    this.normalScale.copy(a.normalScale);
    this.displacementMap = a.displacementMap;
    this.displacementScale = a.displacementScale;
    this.displacementBias = a.displacementBias;
    this.alphaMap = a.alphaMap;
    this.skinning = a.skinning;
    this.morphTargets = a.morphTargets;
    this.morphNormals = a.morphNormals;
    return this;
  };

  Gb.prototype = Object.create(T.prototype);
  Gb.prototype.constructor = Gb;
  Gb.prototype.isLineDashedMaterial = !0;

  Gb.prototype.copy = function (a) {
    T.prototype.copy.call(this, a);
    this.scale = a.scale;
    this.dashSize = a.dashSize;
    this.gapSize = a.gapSize;
    return this;
  };

  var bh = Object.freeze({
    ShadowMaterial: Ab,
    SpriteMaterial: hb,
    RawShaderMaterial: gc,
    ShaderMaterial: ka,
    PointsMaterial: Ha,
    MeshPhysicalMaterial: Bb,
    MeshStandardMaterial: Ta,
    MeshPhongMaterial: Ia,
    MeshToonMaterial: Cb,
    MeshNormalMaterial: Db,
    MeshLambertMaterial: Eb,
    MeshDepthMaterial: eb,
    MeshDistanceMaterial: fb,
    MeshBasicMaterial: Ea,
    MeshMatcapMaterial: Fb,
    LineDashedMaterial: Gb,
    LineBasicMaterial: T,
    Material: L
  }),
      ra = {
    arraySlice: function arraySlice(a, b, c) {
      return ra.isTypedArray(a) ? new a.constructor(a.subarray(b, void 0 !== c ? c : a.length)) : a.slice(b, c);
    },
    convertArray: function convertArray(a, b, c) {
      return !a || !c && a.constructor === b ? a : "number" === typeof b.BYTES_PER_ELEMENT ? new b(a) : Array.prototype.slice.call(a);
    },
    isTypedArray: function isTypedArray(a) {
      return ArrayBuffer.isView(a) && !(a instanceof DataView);
    },
    getKeyframeOrder: function getKeyframeOrder(a) {
      for (var b = a.length, c = Array(b), d = 0; d !== b; ++d) {
        c[d] = d;
      }

      c.sort(function (b, c) {
        return a[b] - a[c];
      });
      return c;
    },
    sortedArray: function sortedArray(a, b, c) {
      for (var d = a.length, e = new a.constructor(d), f = 0, g = 0; g !== d; ++f) {
        for (var h = c[f] * b, k = 0; k !== b; ++k) {
          e[g++] = a[h + k];
        }
      }

      return e;
    },
    flattenJSON: function flattenJSON(a, b, c, d) {
      for (var e = 1, f = a[0]; void 0 !== f && void 0 === f[d];) {
        f = a[e++];
      }

      if (void 0 !== f) {
        var g = f[d];
        if (void 0 !== g) if (Array.isArray(g)) {
          do {
            g = f[d], void 0 !== g && (b.push(f.time), c.push.apply(c, g)), f = a[e++];
          } while (void 0 !== f);
        } else if (void 0 !== g.toArray) {
          do {
            g = f[d], void 0 !== g && (b.push(f.time), g.toArray(c, c.length)), f = a[e++];
          } while (void 0 !== f);
        } else {
          do {
            g = f[d], void 0 !== g && (b.push(f.time), c.push(g)), f = a[e++];
          } while (void 0 !== f);
        }
      }
    }
  };
  Object.assign(Ca.prototype, {
    evaluate: function evaluate(a) {
      var b = this.parameterPositions,
          c = this._cachedIndex,
          d = b[c],
          e = b[c - 1];

      a: {
        b: {
          c: {
            d: if (!(a < d)) {
              for (var f = c + 2;;) {
                if (void 0 === d) {
                  if (a < e) break d;
                  this._cachedIndex = c = b.length;
                  return this.afterEnd_(c - 1, a, e);
                }

                if (c === f) break;
                e = d;
                d = b[++c];
                if (a < d) break b;
              }

              d = b.length;
              break c;
            }

            if (a >= e) break a;else {
              f = b[1];
              a < f && (c = 2, e = f);

              for (f = c - 2;;) {
                if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);
                if (c === f) break;
                d = e;
                e = b[--c - 1];
                if (a >= e) break b;
              }

              d = c;
              c = 0;
            }
          }

          for (; c < d;) {
            e = c + d >>> 1, a < b[e] ? d = e : c = e + 1;
          }

          d = b[c];
          e = b[c - 1];
          if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);
          if (void 0 === d) return this._cachedIndex = c = b.length, this.afterEnd_(c - 1, e, a);
        }

        this._cachedIndex = c;
        this.intervalChanged_(c, e, d);
      }

      return this.interpolate_(c, e, a, d);
    },
    settings: null,
    DefaultSettings_: {},
    getSettings_: function getSettings_() {
      return this.settings || this.DefaultSettings_;
    },
    copySampleValue_: function copySampleValue_(a) {
      var b = this.resultBuffer,
          c = this.sampleValues,
          d = this.valueSize;
      a *= d;

      for (var e = 0; e !== d; ++e) {
        b[e] = c[a + e];
      }

      return b;
    },
    interpolate_: function interpolate_() {
      throw Error("call to abstract method");
    },
    intervalChanged_: function intervalChanged_() {}
  });
  Object.assign(Ca.prototype, {
    beforeStart_: Ca.prototype.copySampleValue_,
    afterEnd_: Ca.prototype.copySampleValue_
  });
  Ad.prototype = Object.assign(Object.create(Ca.prototype), {
    constructor: Ad,
    DefaultSettings_: {
      endingStart: 2400,
      endingEnd: 2400
    },
    intervalChanged_: function intervalChanged_(a, b, c) {
      var d = this.parameterPositions,
          e = a - 2,
          f = a + 1,
          g = d[e],
          h = d[f];
      if (void 0 === g) switch (this.getSettings_().endingStart) {
        case 2401:
          e = a;
          g = 2 * b - c;
          break;

        case 2402:
          e = d.length - 2;
          g = b + d[e] - d[e + 1];
          break;

        default:
          e = a, g = c;
      }
      if (void 0 === h) switch (this.getSettings_().endingEnd) {
        case 2401:
          f = a;
          h = 2 * c - b;
          break;

        case 2402:
          f = 1;
          h = c + d[1] - d[0];
          break;

        default:
          f = a - 1, h = b;
      }
      a = .5 * (c - b);
      d = this.valueSize;
      this._weightPrev = a / (b - g);
      this._weightNext = a / (h - c);
      this._offsetPrev = e * d;
      this._offsetNext = f * d;
    },
    interpolate_: function interpolate_(a, b, c, d) {
      var e = this.resultBuffer,
          f = this.sampleValues,
          g = this.valueSize;
      a *= g;
      var h = a - g,
          k = this._offsetPrev,
          m = this._offsetNext,
          l = this._weightPrev,
          n = this._weightNext,
          r = (c - b) / (d - b);
      c = r * r;
      d = c * r;
      b = -l * d + 2 * l * c - l * r;
      l = (1 + l) * d + (-1.5 - 2 * l) * c + (-.5 + l) * r + 1;
      r = (-1 - n) * d + (1.5 + n) * c + .5 * r;
      n = n * d - n * c;

      for (c = 0; c !== g; ++c) {
        e[c] = b * f[k + c] + l * f[h + c] + r * f[a + c] + n * f[m + c];
      }

      return e;
    }
  });
  cd.prototype = Object.assign(Object.create(Ca.prototype), {
    constructor: cd,
    interpolate_: function interpolate_(a, b, c, d) {
      var e = this.resultBuffer,
          f = this.sampleValues,
          g = this.valueSize;
      a *= g;
      var h = a - g;
      b = (c - b) / (d - b);
      c = 1 - b;

      for (d = 0; d !== g; ++d) {
        e[d] = f[h + d] * c + f[a + d] * b;
      }

      return e;
    }
  });
  Bd.prototype = Object.assign(Object.create(Ca.prototype), {
    constructor: Bd,
    interpolate_: function interpolate_(a) {
      return this.copySampleValue_(a - 1);
    }
  });
  Object.assign(qa, {
    toJSON: function toJSON(a) {
      var b = a.constructor;
      if (void 0 !== b.toJSON) b = b.toJSON(a);else {
        b = {
          name: a.name,
          times: ra.convertArray(a.times, Array),
          values: ra.convertArray(a.values, Array)
        };
        var c = a.getInterpolation();
        c !== a.DefaultInterpolation && (b.interpolation = c);
      }
      b.type = a.ValueTypeName;
      return b;
    }
  });
  Object.assign(qa.prototype, {
    constructor: qa,
    TimeBufferType: Float32Array,
    ValueBufferType: Float32Array,
    DefaultInterpolation: 2301,
    InterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(a) {
      return new Bd(this.times, this.values, this.getValueSize(), a);
    },
    InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(a) {
      return new cd(this.times, this.values, this.getValueSize(), a);
    },
    InterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(a) {
      return new Ad(this.times, this.values, this.getValueSize(), a);
    },
    setInterpolation: function setInterpolation(a) {
      switch (a) {
        case 2300:
          var b = this.InterpolantFactoryMethodDiscrete;
          break;

        case 2301:
          b = this.InterpolantFactoryMethodLinear;
          break;

        case 2302:
          b = this.InterpolantFactoryMethodSmooth;
      }

      if (void 0 === b) {
        b = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (void 0 === this.createInterpolant) if (a !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);else throw Error(b);
        console.warn("THREE.KeyframeTrack:", b);
        return this;
      }

      this.createInterpolant = b;
      return this;
    },
    getInterpolation: function getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return 2300;

        case this.InterpolantFactoryMethodLinear:
          return 2301;

        case this.InterpolantFactoryMethodSmooth:
          return 2302;
      }
    },
    getValueSize: function getValueSize() {
      return this.values.length / this.times.length;
    },
    shift: function shift(a) {
      if (0 !== a) for (var b = this.times, c = 0, d = b.length; c !== d; ++c) {
        b[c] += a;
      }
      return this;
    },
    scale: function scale(a) {
      if (1 !== a) for (var b = this.times, c = 0, d = b.length; c !== d; ++c) {
        b[c] *= a;
      }
      return this;
    },
    trim: function trim(a, b) {
      for (var c = this.times, d = c.length, e = 0, f = d - 1; e !== d && c[e] < a;) {
        ++e;
      }

      for (; -1 !== f && c[f] > b;) {
        --f;
      }

      ++f;
      if (0 !== e || f !== d) e >= f && (f = Math.max(f, 1), e = f - 1), a = this.getValueSize(), this.times = ra.arraySlice(c, e, f), this.values = ra.arraySlice(this.values, e * a, f * a);
      return this;
    },
    validate: function validate() {
      var a = !0,
          b = this.getValueSize();
      0 !== b - Math.floor(b) && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), a = !1);
      var c = this.times;
      b = this.values;
      var d = c.length;
      0 === d && (console.error("THREE.KeyframeTrack: Track is empty.", this), a = !1);

      for (var e = null, f = 0; f !== d; f++) {
        var g = c[f];

        if ("number" === typeof g && isNaN(g)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, f, g);
          a = !1;
          break;
        }

        if (null !== e && e > g) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, f, g, e);
          a = !1;
          break;
        }

        e = g;
      }

      if (void 0 !== b && ra.isTypedArray(b)) for (f = 0, c = b.length; f !== c; ++f) {
        if (d = b[f], isNaN(d)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, f, d);
          a = !1;
          break;
        }
      }
      return a;
    },
    optimize: function optimize() {
      for (var a = this.times, b = this.values, c = this.getValueSize(), d = 2302 === this.getInterpolation(), e = 1, f = a.length - 1, g = 1; g < f; ++g) {
        var h = !1,
            k = a[g];
        if (k !== a[g + 1] && (1 !== g || k !== k[0])) if (d) h = !0;else {
          var m = g * c,
              l = m - c,
              n = m + c;

          for (k = 0; k !== c; ++k) {
            var r = b[m + k];

            if (r !== b[l + k] || r !== b[n + k]) {
              h = !0;
              break;
            }
          }
        }

        if (h) {
          if (g !== e) for (a[e] = a[g], h = g * c, m = e * c, k = 0; k !== c; ++k) {
            b[m + k] = b[h + k];
          }
          ++e;
        }
      }

      if (0 < f) {
        a[e] = a[f];
        h = f * c;
        m = e * c;

        for (k = 0; k !== c; ++k) {
          b[m + k] = b[h + k];
        }

        ++e;
      }

      e !== a.length && (this.times = ra.arraySlice(a, 0, e), this.values = ra.arraySlice(b, 0, e * c));
      return this;
    }
  });
  Cd.prototype = Object.assign(Object.create(qa.prototype), {
    constructor: Cd,
    ValueTypeName: "bool",
    ValueBufferType: Array,
    DefaultInterpolation: 2300,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0
  });
  Dd.prototype = Object.assign(Object.create(qa.prototype), {
    constructor: Dd,
    ValueTypeName: "color"
  });
  hc.prototype = Object.assign(Object.create(qa.prototype), {
    constructor: hc,
    ValueTypeName: "number"
  });
  Ed.prototype = Object.assign(Object.create(Ca.prototype), {
    constructor: Ed,
    interpolate_: function interpolate_(a, b, c, d) {
      var e = this.resultBuffer,
          f = this.sampleValues,
          g = this.valueSize;
      a *= g;
      b = (c - b) / (d - b);

      for (c = a + g; a !== c; a += 4) {
        ja.slerpFlat(e, 0, f, a - g, f, a, b);
      }

      return e;
    }
  });
  dd.prototype = Object.assign(Object.create(qa.prototype), {
    constructor: dd,
    ValueTypeName: "quaternion",
    DefaultInterpolation: 2301,
    InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(a) {
      return new Ed(this.times, this.values, this.getValueSize(), a);
    },
    InterpolantFactoryMethodSmooth: void 0
  });
  Fd.prototype = Object.assign(Object.create(qa.prototype), {
    constructor: Fd,
    ValueTypeName: "string",
    ValueBufferType: Array,
    DefaultInterpolation: 2300,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0
  });
  ic.prototype = Object.assign(Object.create(qa.prototype), {
    constructor: ic,
    ValueTypeName: "vector"
  });
  Object.assign(za, {
    parse: function parse(a) {
      for (var b = [], c = a.tracks, d = 1 / (a.fps || 1), e = 0, f = c.length; e !== f; ++e) {
        b.push(Zg(c[e]).scale(d));
      }

      return new za(a.name, a.duration, b);
    },
    toJSON: function toJSON(a) {
      var b = [],
          c = a.tracks;
      a = {
        name: a.name,
        duration: a.duration,
        tracks: b,
        uuid: a.uuid
      };

      for (var d = 0, e = c.length; d !== e; ++d) {
        b.push(qa.toJSON(c[d]));
      }

      return a;
    },
    CreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(a, b, c, d) {
      for (var e = b.length, f = [], g = 0; g < e; g++) {
        var h = [],
            k = [];
        h.push((g + e - 1) % e, g, (g + 1) % e);
        k.push(0, 1, 0);
        var m = ra.getKeyframeOrder(h);
        h = ra.sortedArray(h, 1, m);
        k = ra.sortedArray(k, 1, m);
        d || 0 !== h[0] || (h.push(e), k.push(k[0]));
        f.push(new hc(".morphTargetInfluences[" + b[g].name + "]", h, k).scale(1 / c));
      }

      return new za(a, -1, f);
    },
    findByName: function findByName(a, b) {
      var c = a;
      Array.isArray(a) || (c = a.geometry && a.geometry.animations || a.animations);

      for (a = 0; a < c.length; a++) {
        if (c[a].name === b) return c[a];
      }

      return null;
    },
    CreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(a, b, c) {
      for (var d = {}, e = /^([\w-]*?)([\d]+)$/, f = 0, g = a.length; f < g; f++) {
        var h = a[f],
            k = h.name.match(e);

        if (k && 1 < k.length) {
          var m = k[1];
          (k = d[m]) || (d[m] = k = []);
          k.push(h);
        }
      }

      a = [];

      for (m in d) {
        a.push(za.CreateFromMorphTargetSequence(m, d[m], b, c));
      }

      return a;
    },
    parseAnimation: function parseAnimation(a, b) {
      if (!a) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;

      var c = function c(a, b, _c, d, e) {
        if (0 !== _c.length) {
          var f = [],
              g = [];
          ra.flattenJSON(_c, f, g, d);
          0 !== f.length && e.push(new a(b, f, g));
        }
      },
          d = [],
          e = a.name || "default",
          f = a.length || -1,
          g = a.fps || 30;

      a = a.hierarchy || [];

      for (var h = 0; h < a.length; h++) {
        var k = a[h].keys;
        if (k && 0 !== k.length) if (k[0].morphTargets) {
          f = {};

          for (var m = 0; m < k.length; m++) {
            if (k[m].morphTargets) for (var l = 0; l < k[m].morphTargets.length; l++) {
              f[k[m].morphTargets[l]] = -1;
            }
          }

          for (var n in f) {
            var r = [],
                p = [];

            for (l = 0; l !== k[m].morphTargets.length; ++l) {
              var t = k[m];
              r.push(t.time);
              p.push(t.morphTarget === n ? 1 : 0);
            }

            d.push(new hc(".morphTargetInfluence[" + n + "]", r, p));
          }

          f = f.length * (g || 1);
        } else m = ".bones[" + b[h].name + "]", c(ic, m + ".position", k, "pos", d), c(dd, m + ".quaternion", k, "rot", d), c(ic, m + ".scale", k, "scl", d);
      }

      return 0 === d.length ? null : new za(e, f, d);
    }
  });
  Object.assign(za.prototype, {
    resetDuration: function resetDuration() {
      for (var a = 0, b = 0, c = this.tracks.length; b !== c; ++b) {
        var d = this.tracks[b];
        a = Math.max(a, d.times[d.times.length - 1]);
      }

      this.duration = a;
      return this;
    },
    trim: function trim() {
      for (var a = 0; a < this.tracks.length; a++) {
        this.tracks[a].trim(0, this.duration);
      }

      return this;
    },
    validate: function validate() {
      for (var a = !0, b = 0; b < this.tracks.length; b++) {
        a = a && this.tracks[b].validate();
      }

      return a;
    },
    optimize: function optimize() {
      for (var a = 0; a < this.tracks.length; a++) {
        this.tracks[a].optimize();
      }

      return this;
    }
  });
  var Ib = {
    enabled: !1,
    files: {},
    add: function add(a, b) {
      !1 !== this.enabled && (this.files[a] = b);
    },
    get: function get(a) {
      if (!1 !== this.enabled) return this.files[a];
    },
    remove: function remove(a) {
      delete this.files[a];
    },
    clear: function clear() {
      this.files = {};
    }
  },
      ta = new ge(),
      Oa = {};
  Object.assign(Fa.prototype, {
    load: function load(a, b, c, d) {
      void 0 === a && (a = "");
      void 0 !== this.path && (a = this.path + a);
      a = this.manager.resolveURL(a);
      var e = this,
          f = Ib.get(a);
      if (void 0 !== f) return e.manager.itemStart(a), setTimeout(function () {
        b && b(f);
        e.manager.itemEnd(a);
      }, 0), f;
      if (void 0 !== Oa[a]) Oa[a].push({
        onLoad: b,
        onProgress: c,
        onError: d
      });else {
        var g = a.match(/^data:(.*?)(;base64)?,(.*)$/);

        if (g) {
          c = g[1];
          var h = !!g[2];
          g = g[3];
          g = decodeURIComponent(g);
          h && (g = atob(g));

          try {
            var k = (this.responseType || "").toLowerCase();

            switch (k) {
              case "arraybuffer":
              case "blob":
                var m = new Uint8Array(g.length);

                for (h = 0; h < g.length; h++) {
                  m[h] = g.charCodeAt(h);
                }

                var l = "blob" === k ? new Blob([m.buffer], {
                  type: c
                }) : m.buffer;
                break;

              case "document":
                l = new DOMParser().parseFromString(g, c);
                break;

              case "json":
                l = JSON.parse(g);
                break;

              default:
                l = g;
            }

            setTimeout(function () {
              b && b(l);
              e.manager.itemEnd(a);
            }, 0);
          } catch (r) {
            setTimeout(function () {
              d && d(r);
              e.manager.itemError(a);
              e.manager.itemEnd(a);
            }, 0);
          }
        } else {
          Oa[a] = [];
          Oa[a].push({
            onLoad: b,
            onProgress: c,
            onError: d
          });
          var n = new XMLHttpRequest();
          n.open("GET", a, !0);
          n.addEventListener("load", function (b) {
            var c = this.response;
            Ib.add(a, c);
            var d = Oa[a];
            delete Oa[a];

            if (200 === this.status || 0 === this.status) {
              0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");

              for (var f = 0, g = d.length; f < g; f++) {
                var h = d[f];
                if (h.onLoad) h.onLoad(c);
              }
            } else {
              f = 0;

              for (g = d.length; f < g; f++) {
                if (h = d[f], h.onError) h.onError(b);
              }

              e.manager.itemError(a);
            }

            e.manager.itemEnd(a);
          }, !1);
          n.addEventListener("progress", function (b) {
            for (var c = Oa[a], d = 0, e = c.length; d < e; d++) {
              var f = c[d];
              if (f.onProgress) f.onProgress(b);
            }
          }, !1);
          n.addEventListener("error", function (b) {
            var c = Oa[a];
            delete Oa[a];

            for (var d = 0, f = c.length; d < f; d++) {
              var g = c[d];
              if (g.onError) g.onError(b);
            }

            e.manager.itemError(a);
            e.manager.itemEnd(a);
          }, !1);
          n.addEventListener("abort", function (b) {
            var c = Oa[a];
            delete Oa[a];

            for (var d = 0, f = c.length; d < f; d++) {
              var g = c[d];
              if (g.onError) g.onError(b);
            }

            e.manager.itemError(a);
            e.manager.itemEnd(a);
          }, !1);
          void 0 !== this.responseType && (n.responseType = this.responseType);
          void 0 !== this.withCredentials && (n.withCredentials = this.withCredentials);
          n.overrideMimeType && n.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");

          for (h in this.requestHeader) {
            n.setRequestHeader(h, this.requestHeader[h]);
          }

          n.send(null);
        }

        e.manager.itemStart(a);
        return n;
      }
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    },
    setResponseType: function setResponseType(a) {
      this.responseType = a;
      return this;
    },
    setWithCredentials: function setWithCredentials(a) {
      this.withCredentials = a;
      return this;
    },
    setMimeType: function setMimeType(a) {
      this.mimeType = a;
      return this;
    },
    setRequestHeader: function setRequestHeader(a) {
      this.requestHeader = a;
      return this;
    }
  });
  Object.assign(rf.prototype, {
    load: function load(a, b, c, d) {
      var e = this,
          f = new Fa(e.manager);
      f.setPath(e.path);
      f.load(a, function (a) {
        b(e.parse(JSON.parse(a)));
      }, c, d);
    },
    parse: function parse(a, b) {
      for (var c = [], d = 0; d < a.length; d++) {
        var e = za.parse(a[d]);
        c.push(e);
      }

      b(c);
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  Object.assign(sf.prototype, {
    load: function load(a, b, c, d) {
      function e(e) {
        k.load(a[e], function (a) {
          a = f._parser(a, !0);
          g[e] = {
            width: a.width,
            height: a.height,
            format: a.format,
            mipmaps: a.mipmaps
          };
          m += 1;
          6 === m && (1 === a.mipmapCount && (h.minFilter = 1006), h.format = a.format, h.needsUpdate = !0, b && b(h));
        }, c, d);
      }

      var f = this,
          g = [],
          h = new Tb();
      h.image = g;
      var k = new Fa(this.manager);
      k.setPath(this.path);
      k.setResponseType("arraybuffer");
      if (Array.isArray(a)) for (var m = 0, l = 0, n = a.length; l < n; ++l) {
        e(l);
      } else k.load(a, function (a) {
        a = f._parser(a, !0);
        if (a.isCubemap) for (var c = a.mipmaps.length / a.mipmapCount, d = 0; d < c; d++) {
          g[d] = {
            mipmaps: []
          };

          for (var e = 0; e < a.mipmapCount; e++) {
            g[d].mipmaps.push(a.mipmaps[d * a.mipmapCount + e]), g[d].format = a.format, g[d].width = a.width, g[d].height = a.height;
          }
        } else h.image.width = a.width, h.image.height = a.height, h.mipmaps = a.mipmaps;
        1 === a.mipmapCount && (h.minFilter = 1006);
        h.format = a.format;
        h.needsUpdate = !0;
        b && b(h);
      }, c, d);
      return h;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  Object.assign(he.prototype, {
    load: function load(a, b, c, d) {
      var e = this,
          f = new lb(),
          g = new Fa(this.manager);
      g.setResponseType("arraybuffer");
      g.setPath(this.path);
      g.load(a, function (a) {
        if (a = e._parser(a)) void 0 !== a.image ? f.image = a.image : void 0 !== a.data && (f.image.width = a.width, f.image.height = a.height, f.image.data = a.data), f.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001, f.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001, f.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006, f.minFilter = void 0 !== a.minFilter ? a.minFilter : 1008, f.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (f.format = a.format), void 0 !== a.type && (f.type = a.type), void 0 !== a.mipmaps && (f.mipmaps = a.mipmaps), 1 === a.mipmapCount && (f.minFilter = 1006), f.needsUpdate = !0, b && b(f, a);
      }, c, d);
      return f;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  Object.assign(ed.prototype, {
    crossOrigin: "anonymous",
    load: function load(a, b, c, d) {
      function e() {
        k.removeEventListener("load", e, !1);
        k.removeEventListener("error", f, !1);
        Ib.add(a, this);
        b && b(this);
        g.manager.itemEnd(a);
      }

      function f(b) {
        k.removeEventListener("load", e, !1);
        k.removeEventListener("error", f, !1);
        d && d(b);
        g.manager.itemError(a);
        g.manager.itemEnd(a);
      }

      void 0 === a && (a = "");
      void 0 !== this.path && (a = this.path + a);
      a = this.manager.resolveURL(a);
      var g = this,
          h = Ib.get(a);
      if (void 0 !== h) return g.manager.itemStart(a), setTimeout(function () {
        b && b(h);
        g.manager.itemEnd(a);
      }, 0), h;
      var k = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
      k.addEventListener("load", e, !1);
      k.addEventListener("error", f, !1);
      "data:" !== a.substr(0, 5) && void 0 !== this.crossOrigin && (k.crossOrigin = this.crossOrigin);
      g.manager.itemStart(a);
      k.src = a;
      return k;
    },
    setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;
      return this;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  Object.assign(ie.prototype, {
    crossOrigin: "anonymous",
    load: function load(a, b, c, d) {
      function e(c) {
        g.load(a[c], function (a) {
          f.images[c] = a;
          h++;
          6 === h && (f.needsUpdate = !0, b && b(f));
        }, void 0, d);
      }

      var f = new Ya(),
          g = new ed(this.manager);
      g.setCrossOrigin(this.crossOrigin);
      g.setPath(this.path);
      var h = 0;

      for (c = 0; c < a.length; ++c) {
        e(c);
      }

      return f;
    },
    setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;
      return this;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  Object.assign(Gd.prototype, {
    crossOrigin: "anonymous",
    load: function load(a, b, c, d) {
      var e = new W(),
          f = new ed(this.manager);
      f.setCrossOrigin(this.crossOrigin);
      f.setPath(this.path);
      f.load(a, function (c) {
        e.image = c;
        c = 0 < a.search(/\.jpe?g$/i) || 0 === a.search(/^data:image\/jpeg/);
        e.format = c ? 1022 : 1023;
        e.needsUpdate = !0;
        void 0 !== b && b(e);
      }, c, d);
      return e;
    },
    setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;
      return this;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  Object.assign(Q.prototype, {
    getPoint: function getPoint() {
      console.warn("THREE.Curve: .getPoint() not implemented.");
      return null;
    },
    getPointAt: function getPointAt(a, b) {
      a = this.getUtoTmapping(a);
      return this.getPoint(a, b);
    },
    getPoints: function getPoints(a) {
      void 0 === a && (a = 5);

      for (var b = [], c = 0; c <= a; c++) {
        b.push(this.getPoint(c / a));
      }

      return b;
    },
    getSpacedPoints: function getSpacedPoints(a) {
      void 0 === a && (a = 5);

      for (var b = [], c = 0; c <= a; c++) {
        b.push(this.getPointAt(c / a));
      }

      return b;
    },
    getLength: function getLength() {
      var a = this.getLengths();
      return a[a.length - 1];
    },
    getLengths: function getLengths(a) {
      void 0 === a && (a = this.arcLengthDivisions);
      if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) return this.cacheArcLengths;
      this.needsUpdate = !1;
      var b = [],
          c = this.getPoint(0),
          d,
          e = 0;
      b.push(0);

      for (d = 1; d <= a; d++) {
        var f = this.getPoint(d / a);
        e += f.distanceTo(c);
        b.push(e);
        c = f;
      }

      return this.cacheArcLengths = b;
    },
    updateArcLengths: function updateArcLengths() {
      this.needsUpdate = !0;
      this.getLengths();
    },
    getUtoTmapping: function getUtoTmapping(a, b) {
      var c = this.getLengths(),
          d = c.length;
      b = b ? b : a * c[d - 1];

      for (var e = 0, f = d - 1, g; e <= f;) {
        if (a = Math.floor(e + (f - e) / 2), g = c[a] - b, 0 > g) e = a + 1;else if (0 < g) f = a - 1;else {
          f = a;
          break;
        }
      }

      a = f;
      if (c[a] === b) return a / (d - 1);
      e = c[a];
      return (a + (b - e) / (c[a + 1] - e)) / (d - 1);
    },
    getTangent: function getTangent(a) {
      var b = a - 1E-4;
      a += 1E-4;
      0 > b && (b = 0);
      1 < a && (a = 1);
      b = this.getPoint(b);
      return this.getPoint(a).clone().sub(b).normalize();
    },
    getTangentAt: function getTangentAt(a) {
      a = this.getUtoTmapping(a);
      return this.getTangent(a);
    },
    computeFrenetFrames: function computeFrenetFrames(a, b) {
      var c = new p(),
          d = [],
          e = [],
          f = [],
          g = new p(),
          h = new P(),
          k;

      for (k = 0; k <= a; k++) {
        var m = k / a;
        d[k] = this.getTangentAt(m);
        d[k].normalize();
      }

      e[0] = new p();
      f[0] = new p();
      k = Number.MAX_VALUE;
      m = Math.abs(d[0].x);
      var l = Math.abs(d[0].y),
          n = Math.abs(d[0].z);
      m <= k && (k = m, c.set(1, 0, 0));
      l <= k && (k = l, c.set(0, 1, 0));
      n <= k && c.set(0, 0, 1);
      g.crossVectors(d[0], c).normalize();
      e[0].crossVectors(d[0], g);
      f[0].crossVectors(d[0], e[0]);

      for (k = 1; k <= a; k++) {
        e[k] = e[k - 1].clone(), f[k] = f[k - 1].clone(), g.crossVectors(d[k - 1], d[k]), g.length() > Number.EPSILON && (g.normalize(), c = Math.acos(R.clamp(d[k - 1].dot(d[k]), -1, 1)), e[k].applyMatrix4(h.makeRotationAxis(g, c))), f[k].crossVectors(d[k], e[k]);
      }

      if (!0 === b) for (c = Math.acos(R.clamp(e[0].dot(e[a]), -1, 1)), c /= a, 0 < d[0].dot(g.crossVectors(e[0], e[a])) && (c = -c), k = 1; k <= a; k++) {
        e[k].applyMatrix4(h.makeRotationAxis(d[k], c * k)), f[k].crossVectors(d[k], e[k]);
      }
      return {
        tangents: d,
        normals: e,
        binormals: f
      };
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.arcLengthDivisions = a.arcLengthDivisions;
      return this;
    },
    toJSON: function toJSON() {
      var a = {
        metadata: {
          version: 4.5,
          type: "Curve",
          generator: "Curve.toJSON"
        }
      };
      a.arcLengthDivisions = this.arcLengthDivisions;
      a.type = this.type;
      return a;
    },
    fromJSON: function fromJSON(a) {
      this.arcLengthDivisions = a.arcLengthDivisions;
      return this;
    }
  });
  wa.prototype = Object.create(Q.prototype);
  wa.prototype.constructor = wa;
  wa.prototype.isEllipseCurve = !0;

  wa.prototype.getPoint = function (a, b) {
    b = b || new z();

    for (var c = 2 * Math.PI, d = this.aEndAngle - this.aStartAngle, e = Math.abs(d) < Number.EPSILON; 0 > d;) {
      d += c;
    }

    for (; d > c;) {
      d -= c;
    }

    d < Number.EPSILON && (d = e ? 0 : c);
    !0 !== this.aClockwise || e || (d = d === c ? -c : d - c);
    c = this.aStartAngle + a * d;
    a = this.aX + this.xRadius * Math.cos(c);
    var f = this.aY + this.yRadius * Math.sin(c);
    0 !== this.aRotation && (c = Math.cos(this.aRotation), d = Math.sin(this.aRotation), e = a - this.aX, f -= this.aY, a = e * c - f * d + this.aX, f = e * d + f * c + this.aY);
    return b.set(a, f);
  };

  wa.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };

  wa.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.aX = this.aX;
    a.aY = this.aY;
    a.xRadius = this.xRadius;
    a.yRadius = this.yRadius;
    a.aStartAngle = this.aStartAngle;
    a.aEndAngle = this.aEndAngle;
    a.aClockwise = this.aClockwise;
    a.aRotation = this.aRotation;
    return a;
  };

  wa.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.aX = a.aX;
    this.aY = a.aY;
    this.xRadius = a.xRadius;
    this.yRadius = a.yRadius;
    this.aStartAngle = a.aStartAngle;
    this.aEndAngle = a.aEndAngle;
    this.aClockwise = a.aClockwise;
    this.aRotation = a.aRotation;
    return this;
  };

  jc.prototype = Object.create(wa.prototype);
  jc.prototype.constructor = jc;
  jc.prototype.isArcCurve = !0;
  var Ud = new p(),
      Fe = new je(),
      Ge = new je(),
      He = new je();
  ua.prototype = Object.create(Q.prototype);
  ua.prototype.constructor = ua;
  ua.prototype.isCatmullRomCurve3 = !0;

  ua.prototype.getPoint = function (a, b) {
    b = b || new p();
    var c = this.points,
        d = c.length;
    a *= d - (this.closed ? 0 : 1);
    var e = Math.floor(a);
    a -= e;
    this.closed ? e += 0 < e ? 0 : (Math.floor(Math.abs(e) / d) + 1) * d : 0 === a && e === d - 1 && (e = d - 2, a = 1);
    if (this.closed || 0 < e) var f = c[(e - 1) % d];else Ud.subVectors(c[0], c[1]).add(c[0]), f = Ud;
    var g = c[e % d];
    var h = c[(e + 1) % d];
    this.closed || e + 2 < d ? c = c[(e + 2) % d] : (Ud.subVectors(c[d - 1], c[d - 2]).add(c[d - 1]), c = Ud);

    if ("centripetal" === this.curveType || "chordal" === this.curveType) {
      var k = "chordal" === this.curveType ? .5 : .25;
      d = Math.pow(f.distanceToSquared(g), k);
      e = Math.pow(g.distanceToSquared(h), k);
      k = Math.pow(h.distanceToSquared(c), k);
      1E-4 > e && (e = 1);
      1E-4 > d && (d = e);
      1E-4 > k && (k = e);
      Fe.initNonuniformCatmullRom(f.x, g.x, h.x, c.x, d, e, k);
      Ge.initNonuniformCatmullRom(f.y, g.y, h.y, c.y, d, e, k);
      He.initNonuniformCatmullRom(f.z, g.z, h.z, c.z, d, e, k);
    } else "catmullrom" === this.curveType && (Fe.initCatmullRom(f.x, g.x, h.x, c.x, this.tension), Ge.initCatmullRom(f.y, g.y, h.y, c.y, this.tension), He.initCatmullRom(f.z, g.z, h.z, c.z, this.tension));

    b.set(Fe.calc(a), Ge.calc(a), He.calc(a));
    return b;
  };

  ua.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.points = [];

    for (var b = 0, c = a.points.length; b < c; b++) {
      this.points.push(a.points[b].clone());
    }

    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };

  ua.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.points = [];

    for (var b = 0, c = this.points.length; b < c; b++) {
      a.points.push(this.points[b].toArray());
    }

    a.closed = this.closed;
    a.curveType = this.curveType;
    a.tension = this.tension;
    return a;
  };

  ua.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.points = [];

    for (var b = 0, c = a.points.length; b < c; b++) {
      var d = a.points[b];
      this.points.push(new p().fromArray(d));
    }

    this.closed = a.closed;
    this.curveType = a.curveType;
    this.tension = a.tension;
    return this;
  };

  Ja.prototype = Object.create(Q.prototype);
  Ja.prototype.constructor = Ja;
  Ja.prototype.isCubicBezierCurve = !0;

  Ja.prototype.getPoint = function (a, b) {
    b = b || new z();
    var c = this.v0,
        d = this.v1,
        e = this.v2,
        f = this.v3;
    b.set(gd(a, c.x, d.x, e.x, f.x), gd(a, c.y, d.y, e.y, f.y));
    return b;
  };

  Ja.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };

  Ja.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };

  Ja.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };

  Ua.prototype = Object.create(Q.prototype);
  Ua.prototype.constructor = Ua;
  Ua.prototype.isCubicBezierCurve3 = !0;

  Ua.prototype.getPoint = function (a, b) {
    b = b || new p();
    var c = this.v0,
        d = this.v1,
        e = this.v2,
        f = this.v3;
    b.set(gd(a, c.x, d.x, e.x, f.x), gd(a, c.y, d.y, e.y, f.y), gd(a, c.z, d.z, e.z, f.z));
    return b;
  };

  Ua.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    this.v3.copy(a.v3);
    return this;
  };

  Ua.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    a.v3 = this.v3.toArray();
    return a;
  };

  Ua.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    this.v3.fromArray(a.v3);
    return this;
  };

  Aa.prototype = Object.create(Q.prototype);
  Aa.prototype.constructor = Aa;
  Aa.prototype.isLineCurve = !0;

  Aa.prototype.getPoint = function (a, b) {
    b = b || new z();
    1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));
    return b;
  };

  Aa.prototype.getPointAt = function (a, b) {
    return this.getPoint(a, b);
  };

  Aa.prototype.getTangent = function () {
    return this.v2.clone().sub(this.v1).normalize();
  };

  Aa.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };

  Aa.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };

  Aa.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };

  Ka.prototype = Object.create(Q.prototype);
  Ka.prototype.constructor = Ka;
  Ka.prototype.isLineCurve3 = !0;

  Ka.prototype.getPoint = function (a, b) {
    b = b || new p();
    1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));
    return b;
  };

  Ka.prototype.getPointAt = function (a, b) {
    return this.getPoint(a, b);
  };

  Ka.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };

  Ka.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };

  Ka.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };

  La.prototype = Object.create(Q.prototype);
  La.prototype.constructor = La;
  La.prototype.isQuadraticBezierCurve = !0;

  La.prototype.getPoint = function (a, b) {
    b = b || new z();
    var c = this.v0,
        d = this.v1,
        e = this.v2;
    b.set(fd(a, c.x, d.x, e.x), fd(a, c.y, d.y, e.y));
    return b;
  };

  La.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };

  La.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };

  La.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };

  Va.prototype = Object.create(Q.prototype);
  Va.prototype.constructor = Va;
  Va.prototype.isQuadraticBezierCurve3 = !0;

  Va.prototype.getPoint = function (a, b) {
    b = b || new p();
    var c = this.v0,
        d = this.v1,
        e = this.v2;
    b.set(fd(a, c.x, d.x, e.x), fd(a, c.y, d.y, e.y), fd(a, c.z, d.z, e.z));
    return b;
  };

  Va.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.v0.copy(a.v0);
    this.v1.copy(a.v1);
    this.v2.copy(a.v2);
    return this;
  };

  Va.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.v0 = this.v0.toArray();
    a.v1 = this.v1.toArray();
    a.v2 = this.v2.toArray();
    return a;
  };

  Va.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.v0.fromArray(a.v0);
    this.v1.fromArray(a.v1);
    this.v2.fromArray(a.v2);
    return this;
  };

  Ma.prototype = Object.create(Q.prototype);
  Ma.prototype.constructor = Ma;
  Ma.prototype.isSplineCurve = !0;

  Ma.prototype.getPoint = function (a, b) {
    b = b || new z();
    var c = this.points,
        d = (c.length - 1) * a;
    a = Math.floor(d);
    d -= a;
    var e = c[0 === a ? a : a - 1],
        f = c[a],
        g = c[a > c.length - 2 ? c.length - 1 : a + 1];
    c = c[a > c.length - 3 ? c.length - 1 : a + 2];
    b.set(tf(d, e.x, f.x, g.x, c.x), tf(d, e.y, f.y, g.y, c.y));
    return b;
  };

  Ma.prototype.copy = function (a) {
    Q.prototype.copy.call(this, a);
    this.points = [];

    for (var b = 0, c = a.points.length; b < c; b++) {
      this.points.push(a.points[b].clone());
    }

    return this;
  };

  Ma.prototype.toJSON = function () {
    var a = Q.prototype.toJSON.call(this);
    a.points = [];

    for (var b = 0, c = this.points.length; b < c; b++) {
      a.points.push(this.points[b].toArray());
    }

    return a;
  };

  Ma.prototype.fromJSON = function (a) {
    Q.prototype.fromJSON.call(this, a);
    this.points = [];

    for (var b = 0, c = a.points.length; b < c; b++) {
      var d = a.points[b];
      this.points.push(new z().fromArray(d));
    }

    return this;
  };

  var Gf = Object.freeze({
    ArcCurve: jc,
    CatmullRomCurve3: ua,
    CubicBezierCurve: Ja,
    CubicBezierCurve3: Ua,
    EllipseCurve: wa,
    LineCurve: Aa,
    LineCurve3: Ka,
    QuadraticBezierCurve: La,
    QuadraticBezierCurve3: Va,
    SplineCurve: Ma
  });
  ab.prototype = Object.assign(Object.create(Q.prototype), {
    constructor: ab,
    add: function add(a) {
      this.curves.push(a);
    },
    closePath: function closePath() {
      var a = this.curves[0].getPoint(0),
          b = this.curves[this.curves.length - 1].getPoint(1);
      a.equals(b) || this.curves.push(new Aa(b, a));
    },
    getPoint: function getPoint(a) {
      var b = a * this.getLength(),
          c = this.getCurveLengths();

      for (a = 0; a < c.length;) {
        if (c[a] >= b) return b = c[a] - b, a = this.curves[a], c = a.getLength(), a.getPointAt(0 === c ? 0 : 1 - b / c);
        a++;
      }

      return null;
    },
    getLength: function getLength() {
      var a = this.getCurveLengths();
      return a[a.length - 1];
    },
    updateArcLengths: function updateArcLengths() {
      this.needsUpdate = !0;
      this.cacheLengths = null;
      this.getCurveLengths();
    },
    getCurveLengths: function getCurveLengths() {
      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;

      for (var a = [], b = 0, c = 0, d = this.curves.length; c < d; c++) {
        b += this.curves[c].getLength(), a.push(b);
      }

      return this.cacheLengths = a;
    },
    getSpacedPoints: function getSpacedPoints(a) {
      void 0 === a && (a = 40);

      for (var b = [], c = 0; c <= a; c++) {
        b.push(this.getPoint(c / a));
      }

      this.autoClose && b.push(b[0]);
      return b;
    },
    getPoints: function getPoints(a) {
      a = a || 12;

      for (var b = [], c, d = 0, e = this.curves; d < e.length; d++) {
        var f = e[d];
        f = f.getPoints(f && f.isEllipseCurve ? 2 * a : f && (f.isLineCurve || f.isLineCurve3) ? 1 : f && f.isSplineCurve ? a * f.points.length : a);

        for (var g = 0; g < f.length; g++) {
          var h = f[g];
          c && c.equals(h) || (b.push(h), c = h);
        }
      }

      this.autoClose && 1 < b.length && !b[b.length - 1].equals(b[0]) && b.push(b[0]);
      return b;
    },
    copy: function copy(a) {
      Q.prototype.copy.call(this, a);
      this.curves = [];

      for (var b = 0, c = a.curves.length; b < c; b++) {
        this.curves.push(a.curves[b].clone());
      }

      this.autoClose = a.autoClose;
      return this;
    },
    toJSON: function toJSON() {
      var a = Q.prototype.toJSON.call(this);
      a.autoClose = this.autoClose;
      a.curves = [];

      for (var b = 0, c = this.curves.length; b < c; b++) {
        a.curves.push(this.curves[b].toJSON());
      }

      return a;
    },
    fromJSON: function fromJSON(a) {
      Q.prototype.fromJSON.call(this, a);
      this.autoClose = a.autoClose;
      this.curves = [];

      for (var b = 0, c = a.curves.length; b < c; b++) {
        var d = a.curves[b];
        this.curves.push(new Gf[d.type]().fromJSON(d));
      }

      return this;
    }
  });
  Na.prototype = Object.assign(Object.create(ab.prototype), {
    constructor: Na,
    setFromPoints: function setFromPoints(a) {
      this.moveTo(a[0].x, a[0].y);

      for (var b = 1, c = a.length; b < c; b++) {
        this.lineTo(a[b].x, a[b].y);
      }
    },
    moveTo: function moveTo(a, b) {
      this.currentPoint.set(a, b);
    },
    lineTo: function lineTo(a, b) {
      var c = new Aa(this.currentPoint.clone(), new z(a, b));
      this.curves.push(c);
      this.currentPoint.set(a, b);
    },
    quadraticCurveTo: function quadraticCurveTo(a, b, c, d) {
      a = new La(this.currentPoint.clone(), new z(a, b), new z(c, d));
      this.curves.push(a);
      this.currentPoint.set(c, d);
    },
    bezierCurveTo: function bezierCurveTo(a, b, c, d, e, f) {
      a = new Ja(this.currentPoint.clone(), new z(a, b), new z(c, d), new z(e, f));
      this.curves.push(a);
      this.currentPoint.set(e, f);
    },
    splineThru: function splineThru(a) {
      var b = [this.currentPoint.clone()].concat(a);
      b = new Ma(b);
      this.curves.push(b);
      this.currentPoint.copy(a[a.length - 1]);
    },
    arc: function arc(a, b, c, d, e, f) {
      this.absarc(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f);
    },
    absarc: function absarc(a, b, c, d, e, f) {
      this.absellipse(a, b, c, c, d, e, f);
    },
    ellipse: function ellipse(a, b, c, d, e, f, g, h) {
      this.absellipse(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f, g, h);
    },
    absellipse: function absellipse(a, b, c, d, e, f, g, h) {
      a = new wa(a, b, c, d, e, f, g, h);
      0 < this.curves.length && (b = a.getPoint(0), b.equals(this.currentPoint) || this.lineTo(b.x, b.y));
      this.curves.push(a);
      a = a.getPoint(1);
      this.currentPoint.copy(a);
    },
    copy: function copy(a) {
      ab.prototype.copy.call(this, a);
      this.currentPoint.copy(a.currentPoint);
      return this;
    },
    toJSON: function toJSON() {
      var a = ab.prototype.toJSON.call(this);
      a.currentPoint = this.currentPoint.toArray();
      return a;
    },
    fromJSON: function fromJSON(a) {
      ab.prototype.fromJSON.call(this, a);
      this.currentPoint.fromArray(a.currentPoint);
      return this;
    }
  });
  ib.prototype = Object.assign(Object.create(Na.prototype), {
    constructor: ib,
    getPointsHoles: function getPointsHoles(a) {
      for (var b = [], c = 0, d = this.holes.length; c < d; c++) {
        b[c] = this.holes[c].getPoints(a);
      }

      return b;
    },
    extractPoints: function extractPoints(a) {
      return {
        shape: this.getPoints(a),
        holes: this.getPointsHoles(a)
      };
    },
    copy: function copy(a) {
      Na.prototype.copy.call(this, a);
      this.holes = [];

      for (var b = 0, c = a.holes.length; b < c; b++) {
        this.holes.push(a.holes[b].clone());
      }

      return this;
    },
    toJSON: function toJSON() {
      var a = Na.prototype.toJSON.call(this);
      a.uuid = this.uuid;
      a.holes = [];

      for (var b = 0, c = this.holes.length; b < c; b++) {
        a.holes.push(this.holes[b].toJSON());
      }

      return a;
    },
    fromJSON: function fromJSON(a) {
      Na.prototype.fromJSON.call(this, a);
      this.uuid = a.uuid;
      this.holes = [];

      for (var b = 0, c = a.holes.length; b < c; b++) {
        var d = a.holes[b];
        this.holes.push(new Na().fromJSON(d));
      }

      return this;
    }
  });
  ca.prototype = Object.assign(Object.create(D.prototype), {
    constructor: ca,
    isLight: !0,
    copy: function copy(a) {
      D.prototype.copy.call(this, a);
      this.color.copy(a.color);
      this.intensity = a.intensity;
      return this;
    },
    toJSON: function toJSON(a) {
      a = D.prototype.toJSON.call(this, a);
      a.object.color = this.color.getHex();
      a.object.intensity = this.intensity;
      void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());
      void 0 !== this.distance && (a.object.distance = this.distance);
      void 0 !== this.angle && (a.object.angle = this.angle);
      void 0 !== this.decay && (a.object.decay = this.decay);
      void 0 !== this.penumbra && (a.object.penumbra = this.penumbra);
      void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON());
      return a;
    }
  });
  Hd.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: Hd,
    isHemisphereLight: !0,
    copy: function copy(a) {
      ca.prototype.copy.call(this, a);
      this.groundColor.copy(a.groundColor);
      return this;
    }
  });
  Object.assign(Hb.prototype, {
    copy: function copy(a) {
      this.camera = a.camera.clone();
      this.bias = a.bias;
      this.radius = a.radius;
      this.mapSize.copy(a.mapSize);
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    toJSON: function toJSON() {
      var a = {};
      0 !== this.bias && (a.bias = this.bias);
      1 !== this.radius && (a.radius = this.radius);
      if (512 !== this.mapSize.x || 512 !== this.mapSize.y) a.mapSize = this.mapSize.toArray();
      a.camera = this.camera.toJSON(!1).object;
      delete a.camera.matrix;
      return a;
    }
  });
  Id.prototype = Object.assign(Object.create(Hb.prototype), {
    constructor: Id,
    isSpotLightShadow: !0,
    update: function update(a) {
      var b = this.camera,
          c = 2 * R.RAD2DEG * a.angle,
          d = this.mapSize.width / this.mapSize.height;
      a = a.distance || b.far;
      if (c !== b.fov || d !== b.aspect || a !== b.far) b.fov = c, b.aspect = d, b.far = a, b.updateProjectionMatrix();
    }
  });
  Jd.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: Jd,
    isSpotLight: !0,
    copy: function copy(a) {
      ca.prototype.copy.call(this, a);
      this.distance = a.distance;
      this.angle = a.angle;
      this.penumbra = a.penumbra;
      this.decay = a.decay;
      this.target = a.target.clone();
      this.shadow = a.shadow.clone();
      return this;
    }
  });
  Kd.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: Kd,
    isPointLight: !0,
    copy: function copy(a) {
      ca.prototype.copy.call(this, a);
      this.distance = a.distance;
      this.decay = a.decay;
      this.shadow = a.shadow.clone();
      return this;
    }
  });
  hd.prototype = Object.assign(Object.create(Ra.prototype), {
    constructor: hd,
    isOrthographicCamera: !0,
    copy: function copy(a, b) {
      Ra.prototype.copy.call(this, a, b);
      this.left = a.left;
      this.right = a.right;
      this.top = a.top;
      this.bottom = a.bottom;
      this.near = a.near;
      this.far = a.far;
      this.zoom = a.zoom;
      this.view = null === a.view ? null : Object.assign({}, a.view);
      return this;
    },
    setViewOffset: function setViewOffset(a, b, c, d, e, f) {
      null === this.view && (this.view = {
        enabled: !0,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      });
      this.view.enabled = !0;
      this.view.fullWidth = a;
      this.view.fullHeight = b;
      this.view.offsetX = c;
      this.view.offsetY = d;
      this.view.width = e;
      this.view.height = f;
      this.updateProjectionMatrix();
    },
    clearViewOffset: function clearViewOffset() {
      null !== this.view && (this.view.enabled = !1);
      this.updateProjectionMatrix();
    },
    updateProjectionMatrix: function updateProjectionMatrix() {
      var a = (this.right - this.left) / (2 * this.zoom),
          b = (this.top - this.bottom) / (2 * this.zoom),
          c = (this.right + this.left) / 2,
          d = (this.top + this.bottom) / 2,
          e = c - a;
      c += a;
      a = d + b;
      b = d - b;

      if (null !== this.view && this.view.enabled) {
        c = this.zoom / (this.view.width / this.view.fullWidth);
        b = this.zoom / (this.view.height / this.view.fullHeight);
        var f = (this.right - this.left) / this.view.width;
        d = (this.top - this.bottom) / this.view.height;
        e += this.view.offsetX / c * f;
        c = e + this.view.width / c * f;
        a -= this.view.offsetY / b * d;
        b = a - this.view.height / b * d;
      }

      this.projectionMatrix.makeOrthographic(e, c, a, b, this.near, this.far);
      this.projectionMatrixInverse.getInverse(this.projectionMatrix);
    },
    toJSON: function toJSON(a) {
      a = D.prototype.toJSON.call(this, a);
      a.object.zoom = this.zoom;
      a.object.left = this.left;
      a.object.right = this.right;
      a.object.top = this.top;
      a.object.bottom = this.bottom;
      a.object.near = this.near;
      a.object.far = this.far;
      null !== this.view && (a.object.view = Object.assign({}, this.view));
      return a;
    }
  });
  Ld.prototype = Object.assign(Object.create(Hb.prototype), {
    constructor: Ld
  });
  Md.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: Md,
    isDirectionalLight: !0,
    copy: function copy(a) {
      ca.prototype.copy.call(this, a);
      this.target = a.target.clone();
      this.shadow = a.shadow.clone();
      return this;
    }
  });
  Nd.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: Nd,
    isAmbientLight: !0
  });
  Od.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: Od,
    isRectAreaLight: !0,
    copy: function copy(a) {
      ca.prototype.copy.call(this, a);
      this.width = a.width;
      this.height = a.height;
      return this;
    },
    toJSON: function toJSON(a) {
      a = ca.prototype.toJSON.call(this, a);
      a.object.width = this.width;
      a.object.height = this.height;
      return a;
    }
  });
  Object.assign(Pd.prototype, {
    load: function load(a, b, c, d) {
      var e = this,
          f = new Fa(e.manager);
      f.setPath(e.path);
      f.load(a, function (a) {
        b(e.parse(JSON.parse(a)));
      }, c, d);
    },
    parse: function parse(a) {
      function b(a) {
        void 0 === c[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
        return c[a];
      }

      var c = this.textures,
          d = new bh[a.type]();
      void 0 !== a.uuid && (d.uuid = a.uuid);
      void 0 !== a.name && (d.name = a.name);
      void 0 !== a.color && d.color.setHex(a.color);
      void 0 !== a.roughness && (d.roughness = a.roughness);
      void 0 !== a.metalness && (d.metalness = a.metalness);
      void 0 !== a.emissive && d.emissive.setHex(a.emissive);
      void 0 !== a.specular && d.specular.setHex(a.specular);
      void 0 !== a.shininess && (d.shininess = a.shininess);
      void 0 !== a.clearCoat && (d.clearCoat = a.clearCoat);
      void 0 !== a.clearCoatRoughness && (d.clearCoatRoughness = a.clearCoatRoughness);
      void 0 !== a.vertexColors && (d.vertexColors = a.vertexColors);
      void 0 !== a.fog && (d.fog = a.fog);
      void 0 !== a.flatShading && (d.flatShading = a.flatShading);
      void 0 !== a.blending && (d.blending = a.blending);
      void 0 !== a.combine && (d.combine = a.combine);
      void 0 !== a.side && (d.side = a.side);
      void 0 !== a.opacity && (d.opacity = a.opacity);
      void 0 !== a.transparent && (d.transparent = a.transparent);
      void 0 !== a.alphaTest && (d.alphaTest = a.alphaTest);
      void 0 !== a.depthTest && (d.depthTest = a.depthTest);
      void 0 !== a.depthWrite && (d.depthWrite = a.depthWrite);
      void 0 !== a.colorWrite && (d.colorWrite = a.colorWrite);
      void 0 !== a.wireframe && (d.wireframe = a.wireframe);
      void 0 !== a.wireframeLinewidth && (d.wireframeLinewidth = a.wireframeLinewidth);
      void 0 !== a.wireframeLinecap && (d.wireframeLinecap = a.wireframeLinecap);
      void 0 !== a.wireframeLinejoin && (d.wireframeLinejoin = a.wireframeLinejoin);
      void 0 !== a.rotation && (d.rotation = a.rotation);
      1 !== a.linewidth && (d.linewidth = a.linewidth);
      void 0 !== a.dashSize && (d.dashSize = a.dashSize);
      void 0 !== a.gapSize && (d.gapSize = a.gapSize);
      void 0 !== a.scale && (d.scale = a.scale);
      void 0 !== a.polygonOffset && (d.polygonOffset = a.polygonOffset);
      void 0 !== a.polygonOffsetFactor && (d.polygonOffsetFactor = a.polygonOffsetFactor);
      void 0 !== a.polygonOffsetUnits && (d.polygonOffsetUnits = a.polygonOffsetUnits);
      void 0 !== a.skinning && (d.skinning = a.skinning);
      void 0 !== a.morphTargets && (d.morphTargets = a.morphTargets);
      void 0 !== a.dithering && (d.dithering = a.dithering);
      void 0 !== a.visible && (d.visible = a.visible);
      void 0 !== a.userData && (d.userData = a.userData);
      if (void 0 !== a.uniforms) for (var e in a.uniforms) {
        var f = a.uniforms[e];
        d.uniforms[e] = {};

        switch (f.type) {
          case "t":
            d.uniforms[e].value = b(f.value);
            break;

          case "c":
            d.uniforms[e].value = new G().setHex(f.value);
            break;

          case "v2":
            d.uniforms[e].value = new z().fromArray(f.value);
            break;

          case "v3":
            d.uniforms[e].value = new p().fromArray(f.value);
            break;

          case "v4":
            d.uniforms[e].value = new Z().fromArray(f.value);
            break;

          case "m4":
            d.uniforms[e].value = new P().fromArray(f.value);
            break;

          default:
            d.uniforms[e].value = f.value;
        }
      }
      void 0 !== a.defines && (d.defines = a.defines);
      void 0 !== a.vertexShader && (d.vertexShader = a.vertexShader);
      void 0 !== a.fragmentShader && (d.fragmentShader = a.fragmentShader);
      void 0 !== a.shading && (d.flatShading = 1 === a.shading);
      void 0 !== a.size && (d.size = a.size);
      void 0 !== a.sizeAttenuation && (d.sizeAttenuation = a.sizeAttenuation);
      void 0 !== a.map && (d.map = b(a.map));
      void 0 !== a.alphaMap && (d.alphaMap = b(a.alphaMap), d.transparent = !0);
      void 0 !== a.bumpMap && (d.bumpMap = b(a.bumpMap));
      void 0 !== a.bumpScale && (d.bumpScale = a.bumpScale);
      void 0 !== a.normalMap && (d.normalMap = b(a.normalMap));
      void 0 !== a.normalMapType && (d.normalMapType = a.normalMapType);
      void 0 !== a.normalScale && (e = a.normalScale, !1 === Array.isArray(e) && (e = [e, e]), d.normalScale = new z().fromArray(e));
      void 0 !== a.displacementMap && (d.displacementMap = b(a.displacementMap));
      void 0 !== a.displacementScale && (d.displacementScale = a.displacementScale);
      void 0 !== a.displacementBias && (d.displacementBias = a.displacementBias);
      void 0 !== a.roughnessMap && (d.roughnessMap = b(a.roughnessMap));
      void 0 !== a.metalnessMap && (d.metalnessMap = b(a.metalnessMap));
      void 0 !== a.emissiveMap && (d.emissiveMap = b(a.emissiveMap));
      void 0 !== a.emissiveIntensity && (d.emissiveIntensity = a.emissiveIntensity);
      void 0 !== a.specularMap && (d.specularMap = b(a.specularMap));
      void 0 !== a.envMap && (d.envMap = b(a.envMap));
      void 0 !== a.envMapIntensity && (d.envMapIntensity = a.envMapIntensity);
      void 0 !== a.reflectivity && (d.reflectivity = a.reflectivity);
      void 0 !== a.lightMap && (d.lightMap = b(a.lightMap));
      void 0 !== a.lightMapIntensity && (d.lightMapIntensity = a.lightMapIntensity);
      void 0 !== a.aoMap && (d.aoMap = b(a.aoMap));
      void 0 !== a.aoMapIntensity && (d.aoMapIntensity = a.aoMapIntensity);
      void 0 !== a.gradientMap && (d.gradientMap = b(a.gradientMap));
      return d;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    },
    setTextures: function setTextures(a) {
      this.textures = a;
      return this;
    }
  });
  var Vd = {
    decodeText: function decodeText(a) {
      if ("undefined" !== typeof TextDecoder) return new TextDecoder().decode(a);

      for (var b = "", c = 0, d = a.length; c < d; c++) {
        b += String.fromCharCode(a[c]);
      }

      return decodeURIComponent(escape(b));
    },
    extractUrlBase: function extractUrlBase(a) {
      var b = a.lastIndexOf("/");
      return -1 === b ? "./" : a.substr(0, b + 1);
    }
  };
  Object.assign(ke.prototype, {
    load: function load(a, b, c, d) {
      var e = this,
          f = new Fa(e.manager);
      f.setPath(e.path);
      f.load(a, function (a) {
        b(e.parse(JSON.parse(a)));
      }, c, d);
    },
    parse: function parse(a) {
      var b = new E(),
          c = a.data.index;
      void 0 !== c && (c = new Hf[c.type](c.array), b.setIndex(new F(c, 1)));
      var d = a.data.attributes;

      for (f in d) {
        var e = d[f];
        c = new Hf[e.type](e.array);
        b.addAttribute(f, new F(c, e.itemSize, e.normalized));
      }

      var f = a.data.groups || a.data.drawcalls || a.data.offsets;
      if (void 0 !== f) for (c = 0, d = f.length; c !== d; ++c) {
        e = f[c], b.addGroup(e.start, e.count, e.materialIndex);
      }
      a = a.data.boundingSphere;
      void 0 !== a && (f = new p(), void 0 !== a.center && f.fromArray(a.center), b.boundingSphere = new Ga(f, a.radius));
      return b;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  var Hf = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray: "undefined" !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array
  };
  kc.Handlers = {
    handlers: [],
    add: function add(a, b) {
      this.handlers.push(a, b);
    },
    get: function get(a) {
      for (var b = this.handlers, c = 0, d = b.length; c < d; c += 2) {
        var e = b[c + 1];
        if (b[c].test(a)) return e;
      }

      return null;
    }
  };
  Object.assign(kc.prototype, {
    crossOrigin: "anonymous",
    onLoadStart: function onLoadStart() {},
    onLoadProgress: function onLoadProgress() {},
    onLoadComplete: function onLoadComplete() {},
    initMaterials: function initMaterials(a, b, c) {
      for (var d = [], e = 0; e < a.length; ++e) {
        d[e] = this.createMaterial(a[e], b, c);
      }

      return d;
    },
    createMaterial: function () {
      var a = {
        NoBlending: 0,
        NormalBlending: 1,
        AdditiveBlending: 2,
        SubtractiveBlending: 3,
        MultiplyBlending: 4,
        CustomBlending: 5
      },
          b = new G(),
          c = new Gd(),
          d = new Pd();
      return function (e, f, g) {
        function h(a, b, d, e, h) {
          a = f + a;
          var m = kc.Handlers.get(a);
          null !== m ? a = m.load(a) : (c.setCrossOrigin(g), a = c.load(a));
          void 0 !== b && (a.repeat.fromArray(b), 1 !== b[0] && (a.wrapS = 1E3), 1 !== b[1] && (a.wrapT = 1E3));
          void 0 !== d && a.offset.fromArray(d);
          void 0 !== e && ("repeat" === e[0] && (a.wrapS = 1E3), "mirror" === e[0] && (a.wrapS = 1002), "repeat" === e[1] && (a.wrapT = 1E3), "mirror" === e[1] && (a.wrapT = 1002));
          void 0 !== h && (a.anisotropy = h);
          b = R.generateUUID();
          k[b] = a;
          return b;
        }

        var k = {},
            m = {
          uuid: R.generateUUID(),
          type: "MeshLambertMaterial"
        },
            l;

        for (l in e) {
          var n = e[l];

          switch (l) {
            case "DbgColor":
            case "DbgIndex":
            case "opticalDensity":
            case "illumination":
              break;

            case "DbgName":
              m.name = n;
              break;

            case "blending":
              m.blending = a[n];
              break;

            case "colorAmbient":
            case "mapAmbient":
              console.warn("THREE.Loader.createMaterial:", l, "is no longer supported.");
              break;

            case "colorDiffuse":
              m.color = b.fromArray(n).getHex();
              break;

            case "colorSpecular":
              m.specular = b.fromArray(n).getHex();
              break;

            case "colorEmissive":
              m.emissive = b.fromArray(n).getHex();
              break;

            case "specularCoef":
              m.shininess = n;
              break;

            case "shading":
              "basic" === n.toLowerCase() && (m.type = "MeshBasicMaterial");
              "phong" === n.toLowerCase() && (m.type = "MeshPhongMaterial");
              "standard" === n.toLowerCase() && (m.type = "MeshStandardMaterial");
              break;

            case "mapDiffuse":
              m.map = h(n, e.mapDiffuseRepeat, e.mapDiffuseOffset, e.mapDiffuseWrap, e.mapDiffuseAnisotropy);
              break;

            case "mapDiffuseRepeat":
            case "mapDiffuseOffset":
            case "mapDiffuseWrap":
            case "mapDiffuseAnisotropy":
              break;

            case "mapEmissive":
              m.emissiveMap = h(n, e.mapEmissiveRepeat, e.mapEmissiveOffset, e.mapEmissiveWrap, e.mapEmissiveAnisotropy);
              break;

            case "mapEmissiveRepeat":
            case "mapEmissiveOffset":
            case "mapEmissiveWrap":
            case "mapEmissiveAnisotropy":
              break;

            case "mapLight":
              m.lightMap = h(n, e.mapLightRepeat, e.mapLightOffset, e.mapLightWrap, e.mapLightAnisotropy);
              break;

            case "mapLightRepeat":
            case "mapLightOffset":
            case "mapLightWrap":
            case "mapLightAnisotropy":
              break;

            case "mapAO":
              m.aoMap = h(n, e.mapAORepeat, e.mapAOOffset, e.mapAOWrap, e.mapAOAnisotropy);
              break;

            case "mapAORepeat":
            case "mapAOOffset":
            case "mapAOWrap":
            case "mapAOAnisotropy":
              break;

            case "mapBump":
              m.bumpMap = h(n, e.mapBumpRepeat, e.mapBumpOffset, e.mapBumpWrap, e.mapBumpAnisotropy);
              break;

            case "mapBumpScale":
              m.bumpScale = n;
              break;

            case "mapBumpRepeat":
            case "mapBumpOffset":
            case "mapBumpWrap":
            case "mapBumpAnisotropy":
              break;

            case "mapNormal":
              m.normalMap = h(n, e.mapNormalRepeat, e.mapNormalOffset, e.mapNormalWrap, e.mapNormalAnisotropy);
              break;

            case "mapNormalFactor":
              m.normalScale = n;
              break;

            case "mapNormalRepeat":
            case "mapNormalOffset":
            case "mapNormalWrap":
            case "mapNormalAnisotropy":
              break;

            case "mapSpecular":
              m.specularMap = h(n, e.mapSpecularRepeat, e.mapSpecularOffset, e.mapSpecularWrap, e.mapSpecularAnisotropy);
              break;

            case "mapSpecularRepeat":
            case "mapSpecularOffset":
            case "mapSpecularWrap":
            case "mapSpecularAnisotropy":
              break;

            case "mapMetalness":
              m.metalnessMap = h(n, e.mapMetalnessRepeat, e.mapMetalnessOffset, e.mapMetalnessWrap, e.mapMetalnessAnisotropy);
              break;

            case "mapMetalnessRepeat":
            case "mapMetalnessOffset":
            case "mapMetalnessWrap":
            case "mapMetalnessAnisotropy":
              break;

            case "mapRoughness":
              m.roughnessMap = h(n, e.mapRoughnessRepeat, e.mapRoughnessOffset, e.mapRoughnessWrap, e.mapRoughnessAnisotropy);
              break;

            case "mapRoughnessRepeat":
            case "mapRoughnessOffset":
            case "mapRoughnessWrap":
            case "mapRoughnessAnisotropy":
              break;

            case "mapAlpha":
              m.alphaMap = h(n, e.mapAlphaRepeat, e.mapAlphaOffset, e.mapAlphaWrap, e.mapAlphaAnisotropy);
              break;

            case "mapAlphaRepeat":
            case "mapAlphaOffset":
            case "mapAlphaWrap":
            case "mapAlphaAnisotropy":
              break;

            case "flipSided":
              m.side = 1;
              break;

            case "doubleSided":
              m.side = 2;
              break;

            case "transparency":
              console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");
              m.opacity = n;
              break;

            case "depthTest":
            case "depthWrite":
            case "colorWrite":
            case "opacity":
            case "reflectivity":
            case "transparent":
            case "visible":
            case "wireframe":
              m[l] = n;
              break;

            case "vertexColors":
              !0 === n && (m.vertexColors = 2);
              "face" === n && (m.vertexColors = 1);
              break;

            default:
              console.error("THREE.Loader.createMaterial: Unsupported", l, n);
          }
        }

        "MeshBasicMaterial" === m.type && delete m.emissive;
        "MeshPhongMaterial" !== m.type && delete m.specular;
        1 > m.opacity && (m.transparent = !0);
        d.setTextures(k);
        return d.parse(m);
      };
    }()
  });
  Object.assign(Qd.prototype, {
    crossOrigin: "anonymous",
    load: function load(a, b, c, d) {
      var e = this,
          f = void 0 === this.path ? Vd.extractUrlBase(a) : this.path,
          g = new Fa(this.manager);
      g.setPath(this.path);
      g.setWithCredentials(this.withCredentials);
      g.load(a, function (c) {
        c = JSON.parse(c);
        var d = c.metadata;

        if (void 0 !== d && (d = d.type, void 0 !== d && "object" === d.toLowerCase())) {
          console.error("THREE.JSONLoader: " + a + " should be loaded with THREE.ObjectLoader instead.");
          return;
        }

        c = e.parse(c, f);
        b(c.geometry, c.materials);
      }, c, d);
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    },
    setResourcePath: function setResourcePath(a) {
      this.resourcePath = a;
      return this;
    },
    setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;
      return this;
    },
    parse: function () {
      return function (a, b) {
        void 0 !== a.data && (a = a.data);
        a.scale = void 0 !== a.scale ? 1 / a.scale : 1;
        var c = new I(),
            d = a,
            e,
            f,
            g,
            h = d.faces;
        var k = d.vertices;
        var m = d.normals,
            l = d.colors;
        var n = d.scale;
        var r = 0;

        if (void 0 !== d.uvs) {
          for (e = 0; e < d.uvs.length; e++) {
            d.uvs[e].length && r++;
          }

          for (e = 0; e < r; e++) {
            c.faceVertexUvs[e] = [];
          }
        }

        var x = 0;

        for (g = k.length; x < g;) {
          e = new p(), e.x = k[x++] * n, e.y = k[x++] * n, e.z = k[x++] * n, c.vertices.push(e);
        }

        x = 0;

        for (g = h.length; x < g;) {
          k = h[x++];
          var t = k & 1;
          var u = k & 2;
          e = k & 8;
          var w = k & 16;
          var A = k & 32;
          n = k & 64;
          k &= 128;

          if (t) {
            t = new Xa();
            t.a = h[x];
            t.b = h[x + 1];
            t.c = h[x + 3];
            var v = new Xa();
            v.a = h[x + 1];
            v.b = h[x + 2];
            v.c = h[x + 3];
            x += 4;
            u && (u = h[x++], t.materialIndex = u, v.materialIndex = u);
            u = c.faces.length;
            if (e) for (e = 0; e < r; e++) {
              var C = d.uvs[e];
              c.faceVertexUvs[e][u] = [];
              c.faceVertexUvs[e][u + 1] = [];

              for (f = 0; 4 > f; f++) {
                var y = h[x++];
                var D = C[2 * y];
                y = C[2 * y + 1];
                D = new z(D, y);
                2 !== f && c.faceVertexUvs[e][u].push(D);
                0 !== f && c.faceVertexUvs[e][u + 1].push(D);
              }
            }
            w && (w = 3 * h[x++], t.normal.set(m[w++], m[w++], m[w]), v.normal.copy(t.normal));
            if (A) for (e = 0; 4 > e; e++) {
              w = 3 * h[x++], A = new p(m[w++], m[w++], m[w]), 2 !== e && t.vertexNormals.push(A), 0 !== e && v.vertexNormals.push(A);
            }
            n && (n = h[x++], n = l[n], t.color.setHex(n), v.color.setHex(n));
            if (k) for (e = 0; 4 > e; e++) {
              n = h[x++], n = l[n], 2 !== e && t.vertexColors.push(new G(n)), 0 !== e && v.vertexColors.push(new G(n));
            }
            c.faces.push(t);
            c.faces.push(v);
          } else {
            t = new Xa();
            t.a = h[x++];
            t.b = h[x++];
            t.c = h[x++];
            u && (u = h[x++], t.materialIndex = u);
            u = c.faces.length;
            if (e) for (e = 0; e < r; e++) {
              for (C = d.uvs[e], c.faceVertexUvs[e][u] = [], f = 0; 3 > f; f++) {
                y = h[x++], D = C[2 * y], y = C[2 * y + 1], D = new z(D, y), c.faceVertexUvs[e][u].push(D);
              }
            }
            w && (w = 3 * h[x++], t.normal.set(m[w++], m[w++], m[w]));
            if (A) for (e = 0; 3 > e; e++) {
              w = 3 * h[x++], A = new p(m[w++], m[w++], m[w]), t.vertexNormals.push(A);
            }
            n && (n = h[x++], t.color.setHex(l[n]));
            if (k) for (e = 0; 3 > e; e++) {
              n = h[x++], t.vertexColors.push(new G(l[n]));
            }
            c.faces.push(t);
          }
        }

        d = a;
        x = void 0 !== d.influencesPerVertex ? d.influencesPerVertex : 2;
        if (d.skinWeights) for (g = 0, h = d.skinWeights.length; g < h; g += x) {
          c.skinWeights.push(new Z(d.skinWeights[g], 1 < x ? d.skinWeights[g + 1] : 0, 2 < x ? d.skinWeights[g + 2] : 0, 3 < x ? d.skinWeights[g + 3] : 0));
        }
        if (d.skinIndices) for (g = 0, h = d.skinIndices.length; g < h; g += x) {
          c.skinIndices.push(new Z(d.skinIndices[g], 1 < x ? d.skinIndices[g + 1] : 0, 2 < x ? d.skinIndices[g + 2] : 0, 3 < x ? d.skinIndices[g + 3] : 0));
        }
        c.bones = d.bones;
        c.bones && 0 < c.bones.length && (c.skinWeights.length !== c.skinIndices.length || c.skinIndices.length !== c.vertices.length) && console.warn("When skinning, number of vertices (" + c.vertices.length + "), skinIndices (" + c.skinIndices.length + "), and skinWeights (" + c.skinWeights.length + ") should match.");
        g = a;
        h = g.scale;
        if (void 0 !== g.morphTargets) for (d = 0, x = g.morphTargets.length; d < x; d++) {
          for (c.morphTargets[d] = {}, c.morphTargets[d].name = g.morphTargets[d].name, c.morphTargets[d].vertices = [], m = c.morphTargets[d].vertices, l = g.morphTargets[d].vertices, r = 0, k = l.length; r < k; r += 3) {
            n = new p(), n.x = l[r] * h, n.y = l[r + 1] * h, n.z = l[r + 2] * h, m.push(n);
          }
        }
        if (void 0 !== g.morphColors && 0 < g.morphColors.length) for (console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'), h = c.faces, g = g.morphColors[0].colors, d = 0, x = h.length; d < x; d++) {
          h[d].color.fromArray(g, 3 * d);
        }
        g = a;
        d = [];
        x = [];
        void 0 !== g.animation && x.push(g.animation);
        void 0 !== g.animations && (g.animations.length ? x = x.concat(g.animations) : x.push(g.animations));

        for (g = 0; g < x.length; g++) {
          (h = za.parseAnimation(x[g], c.bones)) && d.push(h);
        }

        c.morphTargets && (x = za.CreateClipsFromMorphTargetSequences(c.morphTargets, 10), d = d.concat(x));
        0 < d.length && (c.animations = d);
        c.computeFaceNormals();
        c.computeBoundingSphere();
        if (void 0 === a.materials || 0 === a.materials.length) return {
          geometry: c
        };
        a = kc.prototype.initMaterials(a.materials, this.resourcePath || b, this.crossOrigin);
        return {
          geometry: c,
          materials: a
        };
      };
    }()
  });
  Object.assign(le.prototype, {
    crossOrigin: "anonymous",
    load: function load(a, b, c, d) {
      var e = this,
          f = void 0 === this.path ? Vd.extractUrlBase(a) : this.path;
      this.resourcePath = this.resourcePath || f;
      f = new Fa(e.manager);
      f.setPath(this.path);
      f.load(a, function (c) {
        var f = null;

        try {
          f = JSON.parse(c);
        } catch (k) {
          void 0 !== d && d(k);
          console.error("THREE:ObjectLoader: Can't parse " + a + ".", k.message);
          return;
        }

        c = f.metadata;
        void 0 === c || void 0 === c.type || "geometry" === c.type.toLowerCase() ? console.error("THREE.ObjectLoader: Can't load " + a + ". Use THREE.JSONLoader instead.") : e.parse(f, b);
      }, c, d);
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    },
    setResourcePath: function setResourcePath(a) {
      this.resourcePath = a;
      return this;
    },
    setCrossOrigin: function setCrossOrigin(a) {
      this.crossOrigin = a;
      return this;
    },
    parse: function parse(a, b) {
      var c = this.parseShape(a.shapes);
      c = this.parseGeometries(a.geometries, c);
      var d = this.parseImages(a.images, function () {
        void 0 !== b && b(e);
      });
      d = this.parseTextures(a.textures, d);
      d = this.parseMaterials(a.materials, d);
      var e = this.parseObject(a.object, c, d);
      a.animations && (e.animations = this.parseAnimations(a.animations));
      void 0 !== a.images && 0 !== a.images.length || void 0 === b || b(e);
      return e;
    },
    parseShape: function parseShape(a) {
      var b = {};
      if (void 0 !== a) for (var c = 0, d = a.length; c < d; c++) {
        var e = new ib().fromJSON(a[c]);
        b[e.uuid] = e;
      }
      return b;
    },
    parseGeometries: function parseGeometries(a, b) {
      var c = {};
      if (void 0 !== a) for (var d = new Qd(), e = new ke(), f = 0, g = a.length; f < g; f++) {
        var h = a[f];

        switch (h.type) {
          case "PlaneGeometry":
          case "PlaneBufferGeometry":
            var k = new Ba[h.type](h.width, h.height, h.widthSegments, h.heightSegments);
            break;

          case "BoxGeometry":
          case "BoxBufferGeometry":
          case "CubeGeometry":
            k = new Ba[h.type](h.width, h.height, h.depth, h.widthSegments, h.heightSegments, h.depthSegments);
            break;

          case "CircleGeometry":
          case "CircleBufferGeometry":
            k = new Ba[h.type](h.radius, h.segments, h.thetaStart, h.thetaLength);
            break;

          case "CylinderGeometry":
          case "CylinderBufferGeometry":
            k = new Ba[h.type](h.radiusTop, h.radiusBottom, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);
            break;

          case "ConeGeometry":
          case "ConeBufferGeometry":
            k = new Ba[h.type](h.radius, h.height, h.radialSegments, h.heightSegments, h.openEnded, h.thetaStart, h.thetaLength);
            break;

          case "SphereGeometry":
          case "SphereBufferGeometry":
            k = new Ba[h.type](h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);
            break;

          case "DodecahedronGeometry":
          case "DodecahedronBufferGeometry":
          case "IcosahedronGeometry":
          case "IcosahedronBufferGeometry":
          case "OctahedronGeometry":
          case "OctahedronBufferGeometry":
          case "TetrahedronGeometry":
          case "TetrahedronBufferGeometry":
            k = new Ba[h.type](h.radius, h.detail);
            break;

          case "RingGeometry":
          case "RingBufferGeometry":
            k = new Ba[h.type](h.innerRadius, h.outerRadius, h.thetaSegments, h.phiSegments, h.thetaStart, h.thetaLength);
            break;

          case "TorusGeometry":
          case "TorusBufferGeometry":
            k = new Ba[h.type](h.radius, h.tube, h.radialSegments, h.tubularSegments, h.arc);
            break;

          case "TorusKnotGeometry":
          case "TorusKnotBufferGeometry":
            k = new Ba[h.type](h.radius, h.tube, h.tubularSegments, h.radialSegments, h.p, h.q);
            break;

          case "LatheGeometry":
          case "LatheBufferGeometry":
            k = new Ba[h.type](h.points, h.segments, h.phiStart, h.phiLength);
            break;

          case "PolyhedronGeometry":
          case "PolyhedronBufferGeometry":
            k = new Ba[h.type](h.vertices, h.indices, h.radius, h.details);
            break;

          case "ShapeGeometry":
          case "ShapeBufferGeometry":
            k = [];

            for (var m = 0, l = h.shapes.length; m < l; m++) {
              var n = b[h.shapes[m]];
              k.push(n);
            }

            k = new Ba[h.type](k, h.curveSegments);
            break;

          case "ExtrudeGeometry":
          case "ExtrudeBufferGeometry":
            k = [];
            m = 0;

            for (l = h.shapes.length; m < l; m++) {
              n = b[h.shapes[m]], k.push(n);
            }

            m = h.options.extrudePath;
            void 0 !== m && (h.options.extrudePath = new Gf[m.type]().fromJSON(m));
            k = new Ba[h.type](k, h.options);
            break;

          case "BufferGeometry":
            k = e.parse(h);
            break;

          case "Geometry":
            k = d.parse(h, this.resourcePath).geometry;
            break;

          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + h.type + '"');
            continue;
        }

        k.uuid = h.uuid;
        void 0 !== h.name && (k.name = h.name);
        !0 === k.isBufferGeometry && void 0 !== h.userData && (k.userData = h.userData);
        c[h.uuid] = k;
      }
      return c;
    },
    parseMaterials: function parseMaterials(a, b) {
      var c = {},
          d = {};

      if (void 0 !== a) {
        var e = new Pd();
        e.setTextures(b);
        b = 0;

        for (var f = a.length; b < f; b++) {
          var g = a[b];

          if ("MultiMaterial" === g.type) {
            for (var h = [], k = 0; k < g.materials.length; k++) {
              var m = g.materials[k];
              void 0 === c[m.uuid] && (c[m.uuid] = e.parse(m));
              h.push(c[m.uuid]);
            }

            d[g.uuid] = h;
          } else d[g.uuid] = e.parse(g), c[g.uuid] = d[g.uuid];
        }
      }

      return d;
    },
    parseAnimations: function parseAnimations(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c],
            e = za.parse(d);
        void 0 !== d.uuid && (e.uuid = d.uuid);
        b.push(e);
      }

      return b;
    },
    parseImages: function parseImages(a, b) {
      function c(a) {
        d.manager.itemStart(a);
        return f.load(a, function () {
          d.manager.itemEnd(a);
        }, void 0, function () {
          d.manager.itemError(a);
          d.manager.itemEnd(a);
        });
      }

      var d = this,
          e = {};

      if (void 0 !== a && 0 < a.length) {
        b = new ge(b);
        var f = new ed(b);
        f.setCrossOrigin(this.crossOrigin);
        b = 0;

        for (var g = a.length; b < g; b++) {
          var h = a[b],
              k = h.url;

          if (Array.isArray(k)) {
            e[h.uuid] = [];

            for (var m = 0, l = k.length; m < l; m++) {
              var n = k[m];
              n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(n) ? n : d.resourcePath + n;
              e[h.uuid].push(c(n));
            }
          } else n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url) ? h.url : d.resourcePath + h.url, e[h.uuid] = c(n);
        }
      }

      return e;
    },
    parseTextures: function parseTextures(a, b) {
      function c(a, b) {
        if ("number" === typeof a) return a;
        console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);
        return b[a];
      }

      var d = {};
      if (void 0 !== a) for (var e = 0, f = a.length; e < f; e++) {
        var g = a[e];
        void 0 === g.image && console.warn('THREE.ObjectLoader: No "image" specified for', g.uuid);
        void 0 === b[g.image] && console.warn("THREE.ObjectLoader: Undefined image", g.image);
        var h = Array.isArray(b[g.image]) ? new Ya(b[g.image]) : new W(b[g.image]);
        h.needsUpdate = !0;
        h.uuid = g.uuid;
        void 0 !== g.name && (h.name = g.name);
        void 0 !== g.mapping && (h.mapping = c(g.mapping, ch));
        void 0 !== g.offset && h.offset.fromArray(g.offset);
        void 0 !== g.repeat && h.repeat.fromArray(g.repeat);
        void 0 !== g.center && h.center.fromArray(g.center);
        void 0 !== g.rotation && (h.rotation = g.rotation);
        void 0 !== g.wrap && (h.wrapS = c(g.wrap[0], If), h.wrapT = c(g.wrap[1], If));
        void 0 !== g.format && (h.format = g.format);
        void 0 !== g.minFilter && (h.minFilter = c(g.minFilter, Jf));
        void 0 !== g.magFilter && (h.magFilter = c(g.magFilter, Jf));
        void 0 !== g.anisotropy && (h.anisotropy = g.anisotropy);
        void 0 !== g.flipY && (h.flipY = g.flipY);
        d[g.uuid] = h;
      }
      return d;
    },
    parseObject: function parseObject(a, b, c) {
      function d(a) {
        void 0 === b[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);
        return b[a];
      }

      function e(a) {
        if (void 0 !== a) {
          if (Array.isArray(a)) {
            for (var b = [], d = 0, e = a.length; d < e; d++) {
              var f = a[d];
              void 0 === c[f] && console.warn("THREE.ObjectLoader: Undefined material", f);
              b.push(c[f]);
            }

            return b;
          }

          void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined material", a);
          return c[a];
        }
      }

      switch (a.type) {
        case "Scene":
          var f = new vd();
          void 0 !== a.background && Number.isInteger(a.background) && (f.background = new G(a.background));
          void 0 !== a.fog && ("Fog" === a.fog.type ? f.fog = new Qb(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (f.fog = new Pb(a.fog.color, a.fog.density)));
          break;

        case "PerspectiveCamera":
          f = new V(a.fov, a.aspect, a.near, a.far);
          void 0 !== a.focus && (f.focus = a.focus);
          void 0 !== a.zoom && (f.zoom = a.zoom);
          void 0 !== a.filmGauge && (f.filmGauge = a.filmGauge);
          void 0 !== a.filmOffset && (f.filmOffset = a.filmOffset);
          void 0 !== a.view && (f.view = Object.assign({}, a.view));
          break;

        case "OrthographicCamera":
          f = new hd(a.left, a.right, a.top, a.bottom, a.near, a.far);
          void 0 !== a.zoom && (f.zoom = a.zoom);
          void 0 !== a.view && (f.view = Object.assign({}, a.view));
          break;

        case "AmbientLight":
          f = new Nd(a.color, a.intensity);
          break;

        case "DirectionalLight":
          f = new Md(a.color, a.intensity);
          break;

        case "PointLight":
          f = new Kd(a.color, a.intensity, a.distance, a.decay);
          break;

        case "RectAreaLight":
          f = new Od(a.color, a.intensity, a.width, a.height);
          break;

        case "SpotLight":
          f = new Jd(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
          break;

        case "HemisphereLight":
          f = new Hd(a.color, a.groundColor, a.intensity);
          break;

        case "SkinnedMesh":
          console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");

        case "Mesh":
          f = d(a.geometry);
          var g = e(a.material);
          f = f.bones && 0 < f.bones.length ? new xd(f, g) : new pa(f, g);
          break;

        case "LOD":
          f = new Fc();
          break;

        case "Line":
          f = new ma(d(a.geometry), e(a.material), a.mode);
          break;

        case "LineLoop":
          f = new yd(d(a.geometry), e(a.material));
          break;

        case "LineSegments":
          f = new S(d(a.geometry), e(a.material));
          break;

        case "PointCloud":
        case "Points":
          f = new Sb(d(a.geometry), e(a.material));
          break;

        case "Sprite":
          f = new Ec(e(a.material));
          break;

        case "Group":
          f = new Ob();
          break;

        default:
          f = new D();
      }

      f.uuid = a.uuid;
      void 0 !== a.name && (f.name = a.name);
      void 0 !== a.matrix ? (f.matrix.fromArray(a.matrix), void 0 !== a.matrixAutoUpdate && (f.matrixAutoUpdate = a.matrixAutoUpdate), f.matrixAutoUpdate && f.matrix.decompose(f.position, f.quaternion, f.scale)) : (void 0 !== a.position && f.position.fromArray(a.position), void 0 !== a.rotation && f.rotation.fromArray(a.rotation), void 0 !== a.quaternion && f.quaternion.fromArray(a.quaternion), void 0 !== a.scale && f.scale.fromArray(a.scale));
      void 0 !== a.castShadow && (f.castShadow = a.castShadow);
      void 0 !== a.receiveShadow && (f.receiveShadow = a.receiveShadow);
      a.shadow && (void 0 !== a.shadow.bias && (f.shadow.bias = a.shadow.bias), void 0 !== a.shadow.radius && (f.shadow.radius = a.shadow.radius), void 0 !== a.shadow.mapSize && f.shadow.mapSize.fromArray(a.shadow.mapSize), void 0 !== a.shadow.camera && (f.shadow.camera = this.parseObject(a.shadow.camera)));
      void 0 !== a.visible && (f.visible = a.visible);
      void 0 !== a.frustumCulled && (f.frustumCulled = a.frustumCulled);
      void 0 !== a.renderOrder && (f.renderOrder = a.renderOrder);
      void 0 !== a.userData && (f.userData = a.userData);
      void 0 !== a.layers && (f.layers.mask = a.layers);

      if (void 0 !== a.children) {
        g = a.children;

        for (var h = 0; h < g.length; h++) {
          f.add(this.parseObject(g[h], b, c));
        }
      }

      if ("LOD" === a.type) for (a = a.levels, g = 0; g < a.length; g++) {
        h = a[g];
        var k = f.getObjectByProperty("uuid", h.object);
        void 0 !== k && f.addLevel(k, h.distance);
      }
      return f;
    }
  });
  var ch = {
    UVMapping: 300,
    CubeReflectionMapping: 301,
    CubeRefractionMapping: 302,
    EquirectangularReflectionMapping: 303,
    EquirectangularRefractionMapping: 304,
    SphericalReflectionMapping: 305,
    CubeUVReflectionMapping: 306,
    CubeUVRefractionMapping: 307
  },
      If = {
    RepeatWrapping: 1E3,
    ClampToEdgeWrapping: 1001,
    MirroredRepeatWrapping: 1002
  },
      Jf = {
    NearestFilter: 1003,
    NearestMipMapNearestFilter: 1004,
    NearestMipMapLinearFilter: 1005,
    LinearFilter: 1006,
    LinearMipMapNearestFilter: 1007,
    LinearMipMapLinearFilter: 1008
  };
  me.prototype = {
    constructor: me,
    setOptions: function setOptions(a) {
      this.options = a;
      return this;
    },
    load: function load(a, b, c, d) {
      void 0 === a && (a = "");
      void 0 !== this.path && (a = this.path + a);
      a = this.manager.resolveURL(a);
      var e = this,
          f = Ib.get(a);
      if (void 0 !== f) return e.manager.itemStart(a), setTimeout(function () {
        b && b(f);
        e.manager.itemEnd(a);
      }, 0), f;
      fetch(a).then(function (a) {
        return a.blob();
      }).then(function (a) {
        return createImageBitmap(a, e.options);
      }).then(function (c) {
        Ib.add(a, c);
        b && b(c);
        e.manager.itemEnd(a);
      }).catch(function (b) {
        d && d(b);
        e.manager.itemError(a);
        e.manager.itemEnd(a);
      });
    },
    setCrossOrigin: function setCrossOrigin() {
      return this;
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  };
  Object.assign(ne.prototype, {
    moveTo: function moveTo(a, b) {
      this.currentPath = new Na();
      this.subPaths.push(this.currentPath);
      this.currentPath.moveTo(a, b);
    },
    lineTo: function lineTo(a, b) {
      this.currentPath.lineTo(a, b);
    },
    quadraticCurveTo: function quadraticCurveTo(a, b, c, d) {
      this.currentPath.quadraticCurveTo(a, b, c, d);
    },
    bezierCurveTo: function bezierCurveTo(a, b, c, d, e, f) {
      this.currentPath.bezierCurveTo(a, b, c, d, e, f);
    },
    splineThru: function splineThru(a) {
      this.currentPath.splineThru(a);
    },
    toShapes: function toShapes(a, b) {
      function c(a) {
        for (var b = [], c = 0, d = a.length; c < d; c++) {
          var e = a[c],
              f = new ib();
          f.curves = e.curves;
          b.push(f);
        }

        return b;
      }

      function d(a, b) {
        for (var c = b.length, d = !1, e = c - 1, f = 0; f < c; e = f++) {
          var g = b[e],
              h = b[f],
              k = h.x - g.x,
              m = h.y - g.y;

          if (Math.abs(m) > Number.EPSILON) {
            if (0 > m && (g = b[f], k = -k, h = b[e], m = -m), !(a.y < g.y || a.y > h.y)) if (a.y === g.y) {
              if (a.x === g.x) return !0;
            } else {
              e = m * (a.x - g.x) - k * (a.y - g.y);
              if (0 === e) return !0;
              0 > e || (d = !d);
            }
          } else if (a.y === g.y && (h.x <= a.x && a.x <= g.x || g.x <= a.x && a.x <= h.x)) return !0;
        }

        return d;
      }

      var e = Za.isClockWise,
          f = this.subPaths;
      if (0 === f.length) return [];
      if (!0 === b) return c(f);
      b = [];

      if (1 === f.length) {
        var g = f[0];
        var h = new ib();
        h.curves = g.curves;
        b.push(h);
        return b;
      }

      var k = !e(f[0].getPoints());
      k = a ? !k : k;
      h = [];
      var m = [],
          l = [],
          n = 0;
      m[n] = void 0;
      l[n] = [];

      for (var p = 0, x = f.length; p < x; p++) {
        g = f[p];
        var t = g.getPoints();
        var u = e(t);
        (u = a ? !u : u) ? (!k && m[n] && n++, m[n] = {
          s: new ib(),
          p: t
        }, m[n].s.curves = g.curves, k && n++, l[n] = []) : l[n].push({
          h: g,
          p: t[0]
        });
      }

      if (!m[0]) return c(f);

      if (1 < m.length) {
        p = !1;
        a = [];
        e = 0;

        for (f = m.length; e < f; e++) {
          h[e] = [];
        }

        e = 0;

        for (f = m.length; e < f; e++) {
          for (g = l[e], u = 0; u < g.length; u++) {
            k = g[u];
            n = !0;

            for (t = 0; t < m.length; t++) {
              d(k.p, m[t].p) && (e !== t && a.push({
                froms: e,
                tos: t,
                hole: u
              }), n ? (n = !1, h[t].push(k)) : p = !0);
            }

            n && h[e].push(k);
          }
        }

        0 < a.length && (p || (l = h));
      }

      p = 0;

      for (e = m.length; p < e; p++) {
        for (h = m[p].s, b.push(h), a = l[p], f = 0, g = a.length; f < g; f++) {
          h.holes.push(a[f].h);
        }
      }

      return b;
    }
  });
  Object.assign(oe.prototype, {
    isFont: !0,
    generateShapes: function generateShapes(a, b) {
      void 0 === b && (b = 100);
      var c = [],
          d = b;
      b = this.data;
      var e = Array.from ? Array.from(a) : String(a).split("");
      d /= b.resolution;
      var f = (b.boundingBox.yMax - b.boundingBox.yMin + b.underlineThickness) * d;
      a = [];

      for (var g = 0, h = 0, k = 0; k < e.length; k++) {
        var m = e[k];
        if ("\n" === m) g = 0, h -= f;else {
          var l = d;
          var n = g,
              p = h;

          if (m = b.glyphs[m] || b.glyphs["?"]) {
            var x = new ne();
            if (m.o) for (var t = m._cachedOutline || (m._cachedOutline = m.o.split(" ")), u = 0, w = t.length; u < w;) {
              switch (t[u++]) {
                case "m":
                  var A = t[u++] * l + n;
                  var v = t[u++] * l + p;
                  x.moveTo(A, v);
                  break;

                case "l":
                  A = t[u++] * l + n;
                  v = t[u++] * l + p;
                  x.lineTo(A, v);
                  break;

                case "q":
                  var z = t[u++] * l + n;
                  var y = t[u++] * l + p;
                  var C = t[u++] * l + n;
                  var D = t[u++] * l + p;
                  x.quadraticCurveTo(C, D, z, y);
                  break;

                case "b":
                  z = t[u++] * l + n, y = t[u++] * l + p, C = t[u++] * l + n, D = t[u++] * l + p, A = t[u++] * l + n, v = t[u++] * l + p, x.bezierCurveTo(C, D, A, v, z, y);
              }
            }
            l = {
              offsetX: m.ha * l,
              path: x
            };
          } else l = void 0;

          g += l.offsetX;
          a.push(l.path);
        }
      }

      b = 0;

      for (e = a.length; b < e; b++) {
        Array.prototype.push.apply(c, a[b].toShapes());
      }

      return c;
    }
  });
  Object.assign(uf.prototype, {
    load: function load(a, b, c, d) {
      var e = this,
          f = new Fa(this.manager);
      f.setPath(this.path);
      f.load(a, function (a) {
        try {
          var c = JSON.parse(a);
        } catch (k) {
          console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), c = JSON.parse(a.substring(65, a.length - 2));
        }

        a = e.parse(c);
        b && b(a);
      }, c, d);
    },
    parse: function parse(a) {
      return new oe(a);
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  var Wd,
      se = {
    getContext: function getContext() {
      void 0 === Wd && (Wd = new (window.AudioContext || window.webkitAudioContext)());
      return Wd;
    },
    setContext: function setContext(a) {
      Wd = a;
    }
  };
  Object.assign(pe.prototype, {
    load: function load(a, b, c, d) {
      var e = new Fa(this.manager);
      e.setResponseType("arraybuffer");
      e.setPath(this.path);
      e.load(a, function (a) {
        a = a.slice(0);
        se.getContext().decodeAudioData(a, function (a) {
          b(a);
        });
      }, c, d);
    },
    setPath: function setPath(a) {
      this.path = a;
      return this;
    }
  });
  Object.assign(vf.prototype, {
    update: function () {
      var a,
          b,
          c,
          d,
          e,
          f,
          g,
          h,
          k = new P(),
          m = new P();
      return function (l) {
        if (a !== this || b !== l.focus || c !== l.fov || d !== l.aspect * this.aspect || e !== l.near || f !== l.far || g !== l.zoom || h !== this.eyeSep) {
          a = this;
          b = l.focus;
          c = l.fov;
          d = l.aspect * this.aspect;
          e = l.near;
          f = l.far;
          g = l.zoom;
          var n = l.projectionMatrix.clone();
          h = this.eyeSep / 2;
          var p = h * e / b,
              q = e * Math.tan(R.DEG2RAD * c * .5) / g;
          m.elements[12] = -h;
          k.elements[12] = h;
          var t = -q * d + p;
          var u = q * d + p;
          n.elements[0] = 2 * e / (u - t);
          n.elements[8] = (u + t) / (u - t);
          this.cameraL.projectionMatrix.copy(n);
          t = -q * d - p;
          u = q * d - p;
          n.elements[0] = 2 * e / (u - t);
          n.elements[8] = (u + t) / (u - t);
          this.cameraR.projectionMatrix.copy(n);
        }

        this.cameraL.matrixWorld.copy(l.matrixWorld).multiply(m);
        this.cameraR.matrixWorld.copy(l.matrixWorld).multiply(k);
      };
    }()
  });
  id.prototype = Object.create(D.prototype);
  id.prototype.constructor = id;
  Object.assign(qe.prototype, {
    start: function start() {
      this.oldTime = this.startTime = ("undefined" === typeof performance ? Date : performance).now();
      this.elapsedTime = 0;
      this.running = !0;
    },
    stop: function stop() {
      this.getElapsedTime();
      this.autoStart = this.running = !1;
    },
    getElapsedTime: function getElapsedTime() {
      this.getDelta();
      return this.elapsedTime;
    },
    getDelta: function getDelta() {
      var a = 0;
      if (this.autoStart && !this.running) return this.start(), 0;

      if (this.running) {
        var b = ("undefined" === typeof performance ? Date : performance).now();
        a = (b - this.oldTime) / 1E3;
        this.oldTime = b;
        this.elapsedTime += a;
      }

      return a;
    }
  });
  re.prototype = Object.assign(Object.create(D.prototype), {
    constructor: re,
    getInput: function getInput() {
      return this.gain;
    },
    removeFilter: function removeFilter() {
      null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
      return this;
    },
    getFilter: function getFilter() {
      return this.filter;
    },
    setFilter: function setFilter(a) {
      null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);
      this.filter = a;
      this.gain.connect(this.filter);
      this.filter.connect(this.context.destination);
      return this;
    },
    getMasterVolume: function getMasterVolume() {
      return this.gain.gain.value;
    },
    setMasterVolume: function setMasterVolume(a) {
      this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
      return this;
    },
    updateMatrixWorld: function () {
      var a = new p(),
          b = new ja(),
          c = new p(),
          d = new p(),
          e = new qe();
      return function (f) {
        D.prototype.updateMatrixWorld.call(this, f);
        f = this.context.listener;
        var g = this.up;
        this.timeDelta = e.getDelta();
        this.matrixWorld.decompose(a, b, c);
        d.set(0, 0, -1).applyQuaternion(b);

        if (f.positionX) {
          var h = this.context.currentTime + this.timeDelta;
          f.positionX.linearRampToValueAtTime(a.x, h);
          f.positionY.linearRampToValueAtTime(a.y, h);
          f.positionZ.linearRampToValueAtTime(a.z, h);
          f.forwardX.linearRampToValueAtTime(d.x, h);
          f.forwardY.linearRampToValueAtTime(d.y, h);
          f.forwardZ.linearRampToValueAtTime(d.z, h);
          f.upX.linearRampToValueAtTime(g.x, h);
          f.upY.linearRampToValueAtTime(g.y, h);
          f.upZ.linearRampToValueAtTime(g.z, h);
        } else f.setPosition(a.x, a.y, a.z), f.setOrientation(d.x, d.y, d.z, g.x, g.y, g.z);
      };
    }()
  });
  lc.prototype = Object.assign(Object.create(D.prototype), {
    constructor: lc,
    getOutput: function getOutput() {
      return this.gain;
    },
    setNodeSource: function setNodeSource(a) {
      this.hasPlaybackControl = !1;
      this.sourceType = "audioNode";
      this.source = a;
      this.connect();
      return this;
    },
    setMediaElementSource: function setMediaElementSource(a) {
      this.hasPlaybackControl = !1;
      this.sourceType = "mediaNode";
      this.source = this.context.createMediaElementSource(a);
      this.connect();
      return this;
    },
    setBuffer: function setBuffer(a) {
      this.buffer = a;
      this.sourceType = "buffer";
      this.autoplay && this.play();
      return this;
    },
    play: function play() {
      if (!0 === this.isPlaying) console.warn("THREE.Audio: Audio is already playing.");else if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else {
        var a = this.context.createBufferSource();
        a.buffer = this.buffer;
        a.loop = this.loop;
        a.onended = this.onEnded.bind(this);
        a.playbackRate.setValueAtTime(this.playbackRate, this.startTime);
        this.startTime = this.context.currentTime;
        a.start(this.startTime, this.offset);
        this.isPlaying = !0;
        this.source = a;
        return this.connect();
      }
    },
    pause: function pause() {
      if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return !0 === this.isPlaying && (this.source.stop(), this.source.onended = null, this.offset += (this.context.currentTime - this.startTime) * this.playbackRate, this.isPlaying = !1), this;
    },
    stop: function stop() {
      if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(), this.source.onended = null, this.offset = 0, this.isPlaying = !1, this;
    },
    connect: function connect() {
      if (0 < this.filters.length) {
        this.source.connect(this.filters[0]);

        for (var a = 1, b = this.filters.length; a < b; a++) {
          this.filters[a - 1].connect(this.filters[a]);
        }

        this.filters[this.filters.length - 1].connect(this.getOutput());
      } else this.source.connect(this.getOutput());

      return this;
    },
    disconnect: function disconnect() {
      if (0 < this.filters.length) {
        this.source.disconnect(this.filters[0]);

        for (var a = 1, b = this.filters.length; a < b; a++) {
          this.filters[a - 1].disconnect(this.filters[a]);
        }

        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else this.source.disconnect(this.getOutput());

      return this;
    },
    getFilters: function getFilters() {
      return this.filters;
    },
    setFilters: function setFilters(a) {
      a || (a = []);
      !0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
      return this;
    },
    getFilter: function getFilter() {
      return this.getFilters()[0];
    },
    setFilter: function setFilter(a) {
      return this.setFilters(a ? [a] : []);
    },
    setPlaybackRate: function setPlaybackRate(a) {
      if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.playbackRate = a, !0 === this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime), this;
    },
    getPlaybackRate: function getPlaybackRate() {
      return this.playbackRate;
    },
    onEnded: function onEnded() {
      this.isPlaying = !1;
    },
    getLoop: function getLoop() {
      return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
    },
    setLoop: function setLoop(a) {
      if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.loop = a, !0 === this.isPlaying && (this.source.loop = this.loop), this;
    },
    getVolume: function getVolume() {
      return this.gain.gain.value;
    },
    setVolume: function setVolume(a) {
      this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
      return this;
    }
  });
  te.prototype = Object.assign(Object.create(lc.prototype), {
    constructor: te,
    getOutput: function getOutput() {
      return this.panner;
    },
    getRefDistance: function getRefDistance() {
      return this.panner.refDistance;
    },
    setRefDistance: function setRefDistance(a) {
      this.panner.refDistance = a;
      return this;
    },
    getRolloffFactor: function getRolloffFactor() {
      return this.panner.rolloffFactor;
    },
    setRolloffFactor: function setRolloffFactor(a) {
      this.panner.rolloffFactor = a;
      return this;
    },
    getDistanceModel: function getDistanceModel() {
      return this.panner.distanceModel;
    },
    setDistanceModel: function setDistanceModel(a) {
      this.panner.distanceModel = a;
      return this;
    },
    getMaxDistance: function getMaxDistance() {
      return this.panner.maxDistance;
    },
    setMaxDistance: function setMaxDistance(a) {
      this.panner.maxDistance = a;
      return this;
    },
    setDirectionalCone: function setDirectionalCone(a, b, c) {
      this.panner.coneInnerAngle = a;
      this.panner.coneOuterAngle = b;
      this.panner.coneOuterGain = c;
      return this;
    },
    updateMatrixWorld: function () {
      var a = new p(),
          b = new ja(),
          c = new p(),
          d = new p();
      return function (e) {
        D.prototype.updateMatrixWorld.call(this, e);
        e = this.panner;
        this.matrixWorld.decompose(a, b, c);
        d.set(0, 0, 1).applyQuaternion(b);

        if (e.positionX) {
          var f = this.context.currentTime + this.listener.timeDelta;
          e.positionX.linearRampToValueAtTime(a.x, f);
          e.positionY.linearRampToValueAtTime(a.y, f);
          e.positionZ.linearRampToValueAtTime(a.z, f);
          e.orientationX.linearRampToValueAtTime(d.x, f);
          e.orientationY.linearRampToValueAtTime(d.y, f);
          e.orientationZ.linearRampToValueAtTime(d.z, f);
        } else e.setPosition(a.x, a.y, a.z), e.setOrientation(d.x, d.y, d.z);
      };
    }()
  });
  Object.assign(ue.prototype, {
    getFrequencyData: function getFrequencyData() {
      this.analyser.getByteFrequencyData(this.data);
      return this.data;
    },
    getAverageFrequency: function getAverageFrequency() {
      for (var a = 0, b = this.getFrequencyData(), c = 0; c < b.length; c++) {
        a += b[c];
      }

      return a / b.length;
    }
  });
  Object.assign(ve.prototype, {
    accumulate: function accumulate(a, b) {
      var c = this.buffer,
          d = this.valueSize;
      a = a * d + d;
      var e = this.cumulativeWeight;

      if (0 === e) {
        for (e = 0; e !== d; ++e) {
          c[a + e] = c[e];
        }

        e = b;
      } else e += b, this._mixBufferRegion(c, a, 0, b / e, d);

      this.cumulativeWeight = e;
    },
    apply: function apply(a) {
      var b = this.valueSize,
          c = this.buffer;
      a = a * b + b;
      var d = this.cumulativeWeight,
          e = this.binding;
      this.cumulativeWeight = 0;
      1 > d && this._mixBufferRegion(c, a, 3 * b, 1 - d, b);
      d = b;

      for (var f = b + b; d !== f; ++d) {
        if (c[d] !== c[d + b]) {
          e.setValue(c, a);
          break;
        }
      }
    },
    saveOriginalState: function saveOriginalState() {
      var a = this.buffer,
          b = this.valueSize,
          c = 3 * b;
      this.binding.getValue(a, c);

      for (var d = b; d !== c; ++d) {
        a[d] = a[c + d % b];
      }

      this.cumulativeWeight = 0;
    },
    restoreOriginalState: function restoreOriginalState() {
      this.binding.setValue(this.buffer, 3 * this.valueSize);
    },
    _select: function _select(a, b, c, d, e) {
      if (.5 <= d) for (d = 0; d !== e; ++d) {
        a[b + d] = a[c + d];
      }
    },
    _slerp: function _slerp(a, b, c, d) {
      ja.slerpFlat(a, b, a, b, a, c, d);
    },
    _lerp: function _lerp(a, b, c, d, e) {
      for (var f = 1 - d, g = 0; g !== e; ++g) {
        var h = b + g;
        a[h] = a[h] * f + a[c + g] * d;
      }
    }
  });
  Object.assign(wf.prototype, {
    getValue: function getValue(a, b) {
      this.bind();
      var c = this._bindings[this._targetGroup.nCachedObjects_];
      void 0 !== c && c.getValue(a, b);
    },
    setValue: function setValue(a, b) {
      for (var c = this._bindings, d = this._targetGroup.nCachedObjects_, e = c.length; d !== e; ++d) {
        c[d].setValue(a, b);
      }
    },
    bind: function bind() {
      for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b) {
        a[b].bind();
      }
    },
    unbind: function unbind() {
      for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b) {
        a[b].unbind();
      }
    }
  });
  Object.assign(oa, {
    Composite: wf,
    create: function create(a, b, c) {
      return a && a.isAnimationObjectGroup ? new oa.Composite(a, b, c) : new oa(a, b, c);
    },
    sanitizeNodeName: function () {
      var a = /[\[\]\.:\/]/g;
      return function (b) {
        return b.replace(/\s/g, "_").replace(a, "");
      };
    }(),
    parseTrackName: function () {
      var a = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]",
          b = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]");
      a = /(WCOD+)?/.source.replace("WCOD", a);
      var c = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
          d = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
          e = new RegExp("^" + b + a + c + d + "$"),
          f = ["material", "materials", "bones"];
      return function (a) {
        var b = e.exec(a);
        if (!b) throw Error("PropertyBinding: Cannot parse trackName: " + a);
        b = {
          nodeName: b[2],
          objectName: b[3],
          objectIndex: b[4],
          propertyName: b[5],
          propertyIndex: b[6]
        };
        var c = b.nodeName && b.nodeName.lastIndexOf(".");

        if (void 0 !== c && -1 !== c) {
          var d = b.nodeName.substring(c + 1);
          -1 !== f.indexOf(d) && (b.nodeName = b.nodeName.substring(0, c), b.objectName = d);
        }

        if (null === b.propertyName || 0 === b.propertyName.length) throw Error("PropertyBinding: can not parse propertyName from trackName: " + a);
        return b;
      };
    }(),
    findNode: function findNode(a, b) {
      if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) return a;

      if (a.skeleton) {
        var c = a.skeleton.getBoneByName(b);
        if (void 0 !== c) return c;
      }

      if (a.children) {
        var d = function d(a) {
          for (var c = 0; c < a.length; c++) {
            var e = a[c];
            if (e.name === b || e.uuid === b || (e = d(e.children))) return e;
          }

          return null;
        };

        if (a = d(a.children)) return a;
      }

      return null;
    }
  });
  Object.assign(oa.prototype, {
    _getValue_unavailable: function _getValue_unavailable() {},
    _setValue_unavailable: function _setValue_unavailable() {},
    BindingType: {
      Direct: 0,
      EntireArray: 1,
      ArrayElement: 2,
      HasFromToArray: 3
    },
    Versioning: {
      None: 0,
      NeedsUpdate: 1,
      MatrixWorldNeedsUpdate: 2
    },
    GetterByBindingType: [function (a, b) {
      a[b] = this.node[this.propertyName];
    }, function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        a[b++] = c[d];
      }
    }, function (a, b) {
      a[b] = this.resolvedProperty[this.propertyIndex];
    }, function (a, b) {
      this.resolvedProperty.toArray(a, b);
    }],
    SetterByBindingTypeAndVersioning: [[function (a, b) {
      this.targetObject[this.propertyName] = a[b];
    }, function (a, b) {
      this.targetObject[this.propertyName] = a[b];
      this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      this.targetObject[this.propertyName] = a[b];
      this.targetObject.matrixWorldNeedsUpdate = !0;
    }], [function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        c[d] = a[b++];
      }
    }, function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        c[d] = a[b++];
      }

      this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
        c[d] = a[b++];
      }

      this.targetObject.matrixWorldNeedsUpdate = !0;
    }], [function (a, b) {
      this.resolvedProperty[this.propertyIndex] = a[b];
    }, function (a, b) {
      this.resolvedProperty[this.propertyIndex] = a[b];
      this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      this.resolvedProperty[this.propertyIndex] = a[b];
      this.targetObject.matrixWorldNeedsUpdate = !0;
    }], [function (a, b) {
      this.resolvedProperty.fromArray(a, b);
    }, function (a, b) {
      this.resolvedProperty.fromArray(a, b);
      this.targetObject.needsUpdate = !0;
    }, function (a, b) {
      this.resolvedProperty.fromArray(a, b);
      this.targetObject.matrixWorldNeedsUpdate = !0;
    }]],
    getValue: function getValue(a, b) {
      this.bind();
      this.getValue(a, b);
    },
    setValue: function setValue(a, b) {
      this.bind();
      this.setValue(a, b);
    },
    bind: function bind() {
      var a = this.node,
          b = this.parsedPath,
          c = b.objectName,
          d = b.propertyName,
          e = b.propertyIndex;
      a || (this.node = a = oa.findNode(this.rootNode, b.nodeName) || this.rootNode);
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;

      if (a) {
        if (c) {
          var f = b.objectIndex;

          switch (c) {
            case "materials":
              if (!a.material) {
                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                return;
              }

              if (!a.material.materials) {
                console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                return;
              }

              a = a.material.materials;
              break;

            case "bones":
              if (!a.skeleton) {
                console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                return;
              }

              a = a.skeleton.bones;

              for (c = 0; c < a.length; c++) {
                if (a[c].name === f) {
                  f = c;
                  break;
                }
              }

              break;

            default:
              if (void 0 === a[c]) {
                console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                return;
              }

              a = a[c];
          }

          if (void 0 !== f) {
            if (void 0 === a[f]) {
              console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, a);
              return;
            }

            a = a[f];
          }
        }

        f = a[d];
        if (void 0 === f) console.error("THREE.PropertyBinding: Trying to update property for track: " + b.nodeName + "." + d + " but it wasn't found.", a);else {
          b = this.Versioning.None;
          this.targetObject = a;
          void 0 !== a.needsUpdate ? b = this.Versioning.NeedsUpdate : void 0 !== a.matrixWorldNeedsUpdate && (b = this.Versioning.MatrixWorldNeedsUpdate);
          c = this.BindingType.Direct;

          if (void 0 !== e) {
            if ("morphTargetInfluences" === d) {
              if (!a.geometry) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                return;
              }

              if (a.geometry.isBufferGeometry) {
                if (!a.geometry.morphAttributes) {
                  console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                  return;
                }

                for (c = 0; c < this.node.geometry.morphAttributes.position.length; c++) {
                  if (a.geometry.morphAttributes.position[c].name === e) {
                    e = c;
                    break;
                  }
                }
              } else {
                if (!a.geometry.morphTargets) {
                  console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                  return;
                }

                for (c = 0; c < this.node.geometry.morphTargets.length; c++) {
                  if (a.geometry.morphTargets[c].name === e) {
                    e = c;
                    break;
                  }
                }
              }
            }

            c = this.BindingType.ArrayElement;
            this.resolvedProperty = f;
            this.propertyIndex = e;
          } else void 0 !== f.fromArray && void 0 !== f.toArray ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = f) : Array.isArray(f) ? (c = this.BindingType.EntireArray, this.resolvedProperty = f) : this.propertyName = d;

          this.getValue = this.GetterByBindingType[c];
          this.setValue = this.SetterByBindingTypeAndVersioning[c][b];
        }
      } else console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
    },
    unbind: function unbind() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  });
  Object.assign(oa.prototype, {
    _getValue_unbound: oa.prototype.getValue,
    _setValue_unbound: oa.prototype.setValue
  });
  Object.assign(xf.prototype, {
    isAnimationObjectGroup: !0,
    add: function add() {
      for (var a = this._objects, b = a.length, c = this.nCachedObjects_, d = this._indicesByUUID, e = this._paths, f = this._parsedPaths, g = this._bindings, h = g.length, k = void 0, l = 0, p = arguments.length; l !== p; ++l) {
        var n = arguments[l],
            r = n.uuid,
            x = d[r];

        if (void 0 === x) {
          x = b++;
          d[r] = x;
          a.push(n);
          r = 0;

          for (var t = h; r !== t; ++r) {
            g[r].push(new oa(n, e[r], f[r]));
          }
        } else if (x < c) {
          k = a[x];
          var u = --c;
          t = a[u];
          d[t.uuid] = x;
          a[x] = t;
          d[r] = u;
          a[u] = n;
          r = 0;

          for (t = h; r !== t; ++r) {
            var w = g[r],
                z = w[x];
            w[x] = w[u];
            void 0 === z && (z = new oa(n, e[r], f[r]));
            w[u] = z;
          }
        } else a[x] !== k && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
      }

      this.nCachedObjects_ = c;
    },
    remove: function remove() {
      for (var a = this._objects, b = this.nCachedObjects_, c = this._indicesByUUID, d = this._bindings, e = d.length, f = 0, g = arguments.length; f !== g; ++f) {
        var h = arguments[f],
            k = h.uuid,
            l = c[k];

        if (void 0 !== l && l >= b) {
          var p = b++,
              n = a[p];
          c[n.uuid] = l;
          a[l] = n;
          c[k] = p;
          a[p] = h;
          h = 0;

          for (k = e; h !== k; ++h) {
            n = d[h];
            var r = n[l];
            n[l] = n[p];
            n[p] = r;
          }
        }
      }

      this.nCachedObjects_ = b;
    },
    uncache: function uncache() {
      for (var a = this._objects, b = a.length, c = this.nCachedObjects_, d = this._indicesByUUID, e = this._bindings, f = e.length, g = 0, h = arguments.length; g !== h; ++g) {
        var k = arguments[g].uuid,
            l = d[k];
        if (void 0 !== l) if (delete d[k], l < c) {
          k = --c;
          var p = a[k],
              n = --b,
              r = a[n];
          d[p.uuid] = l;
          a[l] = p;
          d[r.uuid] = k;
          a[k] = r;
          a.pop();
          p = 0;

          for (r = f; p !== r; ++p) {
            var x = e[p],
                t = x[n];
            x[l] = x[k];
            x[k] = t;
            x.pop();
          }
        } else for (n = --b, r = a[n], d[r.uuid] = l, a[l] = r, a.pop(), p = 0, r = f; p !== r; ++p) {
          x = e[p], x[l] = x[n], x.pop();
        }
      }

      this.nCachedObjects_ = c;
    },
    subscribe_: function subscribe_(a, b) {
      var c = this._bindingsIndicesByPath,
          d = c[a],
          e = this._bindings;
      if (void 0 !== d) return e[d];
      var f = this._paths,
          g = this._parsedPaths,
          h = this._objects,
          k = this.nCachedObjects_,
          l = Array(h.length);
      d = e.length;
      c[a] = d;
      f.push(a);
      g.push(b);
      e.push(l);
      c = k;

      for (d = h.length; c !== d; ++c) {
        l[c] = new oa(h[c], a, b);
      }

      return l;
    },
    unsubscribe_: function unsubscribe_(a) {
      var b = this._bindingsIndicesByPath,
          c = b[a];

      if (void 0 !== c) {
        var d = this._paths,
            e = this._parsedPaths,
            f = this._bindings,
            g = f.length - 1,
            h = f[g];
        b[a[g]] = c;
        f[c] = h;
        f.pop();
        e[c] = e[g];
        e.pop();
        d[c] = d[g];
        d.pop();
      }
    }
  });
  Object.assign(yf.prototype, {
    play: function play() {
      this._mixer._activateAction(this);

      return this;
    },
    stop: function stop() {
      this._mixer._deactivateAction(this);

      return this.reset();
    },
    reset: function reset() {
      this.paused = !1;
      this.enabled = !0;
      this.time = 0;
      this._loopCount = -1;
      this._startTime = null;
      return this.stopFading().stopWarping();
    },
    isRunning: function isRunning() {
      return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
    },
    isScheduled: function isScheduled() {
      return this._mixer._isActiveAction(this);
    },
    startAt: function startAt(a) {
      this._startTime = a;
      return this;
    },
    setLoop: function setLoop(a, b) {
      this.loop = a;
      this.repetitions = b;
      return this;
    },
    setEffectiveWeight: function setEffectiveWeight(a) {
      this.weight = a;
      this._effectiveWeight = this.enabled ? a : 0;
      return this.stopFading();
    },
    getEffectiveWeight: function getEffectiveWeight() {
      return this._effectiveWeight;
    },
    fadeIn: function fadeIn(a) {
      return this._scheduleFading(a, 0, 1);
    },
    fadeOut: function fadeOut(a) {
      return this._scheduleFading(a, 1, 0);
    },
    crossFadeFrom: function crossFadeFrom(a, b, c) {
      a.fadeOut(b);
      this.fadeIn(b);

      if (c) {
        c = this._clip.duration;
        var d = a._clip.duration,
            e = c / d;
        a.warp(1, d / c, b);
        this.warp(e, 1, b);
      }

      return this;
    },
    crossFadeTo: function crossFadeTo(a, b, c) {
      return a.crossFadeFrom(this, b, c);
    },
    stopFading: function stopFading() {
      var a = this._weightInterpolant;
      null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));
      return this;
    },
    setEffectiveTimeScale: function setEffectiveTimeScale(a) {
      this.timeScale = a;
      this._effectiveTimeScale = this.paused ? 0 : a;
      return this.stopWarping();
    },
    getEffectiveTimeScale: function getEffectiveTimeScale() {
      return this._effectiveTimeScale;
    },
    setDuration: function setDuration(a) {
      this.timeScale = this._clip.duration / a;
      return this.stopWarping();
    },
    syncWith: function syncWith(a) {
      this.time = a.time;
      this.timeScale = a.timeScale;
      return this.stopWarping();
    },
    halt: function halt(a) {
      return this.warp(this._effectiveTimeScale, 0, a);
    },
    warp: function warp(a, b, c) {
      var d = this._mixer,
          e = d.time,
          f = this._timeScaleInterpolant,
          g = this.timeScale;
      null === f && (this._timeScaleInterpolant = f = d._lendControlInterpolant());
      d = f.parameterPositions;
      f = f.sampleValues;
      d[0] = e;
      d[1] = e + c;
      f[0] = a / g;
      f[1] = b / g;
      return this;
    },
    stopWarping: function stopWarping() {
      var a = this._timeScaleInterpolant;
      null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));
      return this;
    },
    getMixer: function getMixer() {
      return this._mixer;
    },
    getClip: function getClip() {
      return this._clip;
    },
    getRoot: function getRoot() {
      return this._localRoot || this._mixer._root;
    },
    _update: function _update(a, b, c, d) {
      if (this.enabled) {
        var e = this._startTime;

        if (null !== e) {
          b = (a - e) * c;
          if (0 > b || 0 === c) return;
          this._startTime = null;
          b *= c;
        }

        b *= this._updateTimeScale(a);
        c = this._updateTime(b);
        a = this._updateWeight(a);

        if (0 < a) {
          b = this._interpolants;
          e = this._propertyBindings;

          for (var f = 0, g = b.length; f !== g; ++f) {
            b[f].evaluate(c), e[f].accumulate(d, a);
          }
        }
      } else this._updateWeight(a);
    },
    _updateWeight: function _updateWeight(a) {
      var b = 0;

      if (this.enabled) {
        b = this.weight;
        var c = this._weightInterpolant;

        if (null !== c) {
          var d = c.evaluate(a)[0];
          b *= d;
          a > c.parameterPositions[1] && (this.stopFading(), 0 === d && (this.enabled = !1));
        }
      }

      return this._effectiveWeight = b;
    },
    _updateTimeScale: function _updateTimeScale(a) {
      var b = 0;

      if (!this.paused) {
        b = this.timeScale;
        var c = this._timeScaleInterpolant;

        if (null !== c) {
          var d = c.evaluate(a)[0];
          b *= d;
          a > c.parameterPositions[1] && (this.stopWarping(), 0 === b ? this.paused = !0 : this.timeScale = b);
        }
      }

      return this._effectiveTimeScale = b;
    },
    _updateTime: function _updateTime(a) {
      var b = this.time + a,
          c = this._clip.duration,
          d = this.loop,
          e = this._loopCount,
          f = 2202 === d;
      if (0 === a) return -1 === e ? b : f && 1 === (e & 1) ? c - b : b;
      if (2200 === d) a: {
        if (-1 === e && (this._loopCount = 0, this._setEndings(!0, !0, !1)), b >= c) b = c;else if (0 > b) b = 0;else break a;
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;

        this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: 0 > a ? -1 : 1
        });
      } else {
        -1 === e && (0 <= a ? (e = 0, this._setEndings(!0, 0 === this.repetitions, f)) : this._setEndings(0 === this.repetitions, !0, f));

        if (b >= c || 0 > b) {
          d = Math.floor(b / c);
          b -= c * d;
          e += Math.abs(d);
          var g = this.repetitions - e;
          0 >= g ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, b = 0 < a ? c : 0, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: 0 < a ? 1 : -1
          })) : (1 === g ? (a = 0 > a, this._setEndings(a, !a, f)) : this._setEndings(!1, !1, f), this._loopCount = e, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: d
          }));
        }

        if (f && 1 === (e & 1)) return this.time = b, c - b;
      }
      return this.time = b;
    },
    _setEndings: function _setEndings(a, b, c) {
      var d = this._interpolantSettings;
      c ? (d.endingStart = 2401, d.endingEnd = 2401) : (d.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, d.endingEnd = b ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
    },
    _scheduleFading: function _scheduleFading(a, b, c) {
      var d = this._mixer,
          e = d.time,
          f = this._weightInterpolant;
      null === f && (this._weightInterpolant = f = d._lendControlInterpolant());
      d = f.parameterPositions;
      f = f.sampleValues;
      d[0] = e;
      f[0] = b;
      d[1] = e + a;
      f[1] = c;
      return this;
    }
  });
  we.prototype = Object.assign(Object.create(ia.prototype), {
    constructor: we,
    _bindAction: function _bindAction(a, b) {
      var c = a._localRoot || this._root,
          d = a._clip.tracks,
          e = d.length,
          f = a._propertyBindings;
      a = a._interpolants;
      var g = c.uuid,
          h = this._bindingsByRootAndName,
          k = h[g];
      void 0 === k && (k = {}, h[g] = k);

      for (h = 0; h !== e; ++h) {
        var l = d[h],
            p = l.name,
            n = k[p];

        if (void 0 === n) {
          n = f[h];

          if (void 0 !== n) {
            null === n._cacheIndex && (++n.referenceCount, this._addInactiveBinding(n, g, p));
            continue;
          }

          n = new ve(oa.create(c, p, b && b._propertyBindings[h].binding.parsedPath), l.ValueTypeName, l.getValueSize());
          ++n.referenceCount;

          this._addInactiveBinding(n, g, p);
        }

        f[h] = n;
        a[h].resultBuffer = n.buffer;
      }
    },
    _activateAction: function _activateAction(a) {
      if (!this._isActiveAction(a)) {
        if (null === a._cacheIndex) {
          var b = (a._localRoot || this._root).uuid,
              c = a._clip.uuid,
              d = this._actionsByClip[c];

          this._bindAction(a, d && d.knownActions[0]);

          this._addInactiveAction(a, c, b);
        }

        b = a._propertyBindings;
        c = 0;

        for (d = b.length; c !== d; ++c) {
          var e = b[c];
          0 === e.useCount++ && (this._lendBinding(e), e.saveOriginalState());
        }

        this._lendAction(a);
      }
    },
    _deactivateAction: function _deactivateAction(a) {
      if (this._isActiveAction(a)) {
        for (var b = a._propertyBindings, c = 0, d = b.length; c !== d; ++c) {
          var e = b[c];
          0 === --e.useCount && (e.restoreOriginalState(), this._takeBackBinding(e));
        }

        this._takeBackAction(a);
      }
    },
    _initMemoryManager: function _initMemoryManager() {
      this._actions = [];
      this._nActiveActions = 0;
      this._actionsByClip = {};
      this._bindings = [];
      this._nActiveBindings = 0;
      this._bindingsByRootAndName = {};
      this._controlInterpolants = [];
      this._nActiveControlInterpolants = 0;
      var a = this;
      this.stats = {
        actions: {
          get total() {
            return a._actions.length;
          },

          get inUse() {
            return a._nActiveActions;
          }

        },
        bindings: {
          get total() {
            return a._bindings.length;
          },

          get inUse() {
            return a._nActiveBindings;
          }

        },
        controlInterpolants: {
          get total() {
            return a._controlInterpolants.length;
          },

          get inUse() {
            return a._nActiveControlInterpolants;
          }

        }
      };
    },
    _isActiveAction: function _isActiveAction(a) {
      a = a._cacheIndex;
      return null !== a && a < this._nActiveActions;
    },
    _addInactiveAction: function _addInactiveAction(a, b, c) {
      var d = this._actions,
          e = this._actionsByClip,
          f = e[b];
      void 0 === f ? (f = {
        knownActions: [a],
        actionByRoot: {}
      }, a._byClipCacheIndex = 0, e[b] = f) : (b = f.knownActions, a._byClipCacheIndex = b.length, b.push(a));
      a._cacheIndex = d.length;
      d.push(a);
      f.actionByRoot[c] = a;
    },
    _removeInactiveAction: function _removeInactiveAction(a) {
      var b = this._actions,
          c = b[b.length - 1],
          d = a._cacheIndex;
      c._cacheIndex = d;
      b[d] = c;
      b.pop();
      a._cacheIndex = null;
      b = a._clip.uuid;
      c = this._actionsByClip;
      d = c[b];
      var e = d.knownActions,
          f = e[e.length - 1],
          g = a._byClipCacheIndex;
      f._byClipCacheIndex = g;
      e[g] = f;
      e.pop();
      a._byClipCacheIndex = null;
      delete d.actionByRoot[(a._localRoot || this._root).uuid];
      0 === e.length && delete c[b];

      this._removeInactiveBindingsForAction(a);
    },
    _removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(a) {
      a = a._propertyBindings;

      for (var b = 0, c = a.length; b !== c; ++b) {
        var d = a[b];
        0 === --d.referenceCount && this._removeInactiveBinding(d);
      }
    },
    _lendAction: function _lendAction(a) {
      var b = this._actions,
          c = a._cacheIndex,
          d = this._nActiveActions++,
          e = b[d];
      a._cacheIndex = d;
      b[d] = a;
      e._cacheIndex = c;
      b[c] = e;
    },
    _takeBackAction: function _takeBackAction(a) {
      var b = this._actions,
          c = a._cacheIndex,
          d = --this._nActiveActions,
          e = b[d];
      a._cacheIndex = d;
      b[d] = a;
      e._cacheIndex = c;
      b[c] = e;
    },
    _addInactiveBinding: function _addInactiveBinding(a, b, c) {
      var d = this._bindingsByRootAndName,
          e = d[b],
          f = this._bindings;
      void 0 === e && (e = {}, d[b] = e);
      e[c] = a;
      a._cacheIndex = f.length;
      f.push(a);
    },
    _removeInactiveBinding: function _removeInactiveBinding(a) {
      var b = this._bindings,
          c = a.binding,
          d = c.rootNode.uuid;
      c = c.path;
      var e = this._bindingsByRootAndName,
          f = e[d],
          g = b[b.length - 1];
      a = a._cacheIndex;
      g._cacheIndex = a;
      b[a] = g;
      b.pop();
      delete f[c];

      a: {
        for (var h in f) {
          break a;
        }

        delete e[d];
      }
    },
    _lendBinding: function _lendBinding(a) {
      var b = this._bindings,
          c = a._cacheIndex,
          d = this._nActiveBindings++,
          e = b[d];
      a._cacheIndex = d;
      b[d] = a;
      e._cacheIndex = c;
      b[c] = e;
    },
    _takeBackBinding: function _takeBackBinding(a) {
      var b = this._bindings,
          c = a._cacheIndex,
          d = --this._nActiveBindings,
          e = b[d];
      a._cacheIndex = d;
      b[d] = a;
      e._cacheIndex = c;
      b[c] = e;
    },
    _lendControlInterpolant: function _lendControlInterpolant() {
      var a = this._controlInterpolants,
          b = this._nActiveControlInterpolants++,
          c = a[b];
      void 0 === c && (c = new cd(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), c.__cacheIndex = b, a[b] = c);
      return c;
    },
    _takeBackControlInterpolant: function _takeBackControlInterpolant(a) {
      var b = this._controlInterpolants,
          c = a.__cacheIndex,
          d = --this._nActiveControlInterpolants,
          e = b[d];
      a.__cacheIndex = d;
      b[d] = a;
      e.__cacheIndex = c;
      b[c] = e;
    },
    _controlInterpolantsResultBuffer: new Float32Array(1),
    clipAction: function clipAction(a, b) {
      var c = b || this._root,
          d = c.uuid;
      c = "string" === typeof a ? za.findByName(c, a) : a;
      a = null !== c ? c.uuid : a;
      var e = this._actionsByClip[a],
          f = null;

      if (void 0 !== e) {
        f = e.actionByRoot[d];
        if (void 0 !== f) return f;
        f = e.knownActions[0];
        null === c && (c = f._clip);
      }

      if (null === c) return null;
      b = new yf(this, c, b);

      this._bindAction(b, f);

      this._addInactiveAction(b, a, d);

      return b;
    },
    existingAction: function existingAction(a, b) {
      var c = b || this._root;
      b = c.uuid;
      c = "string" === typeof a ? za.findByName(c, a) : a;
      a = this._actionsByClip[c ? c.uuid : a];
      return void 0 !== a ? a.actionByRoot[b] || null : null;
    },
    stopAllAction: function stopAllAction() {
      for (var a = this._actions, b = this._nActiveActions, c = this._bindings, d = this._nActiveBindings, e = this._nActiveBindings = this._nActiveActions = 0; e !== b; ++e) {
        a[e].reset();
      }

      for (e = 0; e !== d; ++e) {
        c[e].useCount = 0;
      }

      return this;
    },
    update: function update(a) {
      a *= this.timeScale;

      for (var b = this._actions, c = this._nActiveActions, d = this.time += a, e = Math.sign(a), f = this._accuIndex ^= 1, g = 0; g !== c; ++g) {
        b[g]._update(d, a, e, f);
      }

      a = this._bindings;
      b = this._nActiveBindings;

      for (g = 0; g !== b; ++g) {
        a[g].apply(f);
      }

      return this;
    },
    getRoot: function getRoot() {
      return this._root;
    },
    uncacheClip: function uncacheClip(a) {
      var b = this._actions;
      a = a.uuid;
      var c = this._actionsByClip,
          d = c[a];

      if (void 0 !== d) {
        d = d.knownActions;

        for (var e = 0, f = d.length; e !== f; ++e) {
          var g = d[e];

          this._deactivateAction(g);

          var h = g._cacheIndex,
              k = b[b.length - 1];
          g._cacheIndex = null;
          g._byClipCacheIndex = null;
          k._cacheIndex = h;
          b[h] = k;
          b.pop();

          this._removeInactiveBindingsForAction(g);
        }

        delete c[a];
      }
    },
    uncacheRoot: function uncacheRoot(a) {
      a = a.uuid;
      var b = this._actionsByClip;

      for (d in b) {
        var c = b[d].actionByRoot[a];
        void 0 !== c && (this._deactivateAction(c), this._removeInactiveAction(c));
      }

      var d = this._bindingsByRootAndName[a];
      if (void 0 !== d) for (var e in d) {
        a = d[e], a.restoreOriginalState(), this._removeInactiveBinding(a);
      }
    },
    uncacheAction: function uncacheAction(a, b) {
      a = this.existingAction(a, b);
      null !== a && (this._deactivateAction(a), this._removeInactiveAction(a));
    }
  });

  Rd.prototype.clone = function () {
    return new Rd(void 0 === this.value.clone ? this.value : this.value.clone());
  };

  xe.prototype = Object.assign(Object.create(E.prototype), {
    constructor: xe,
    isInstancedBufferGeometry: !0,
    copy: function copy(a) {
      E.prototype.copy.call(this, a);
      this.maxInstancedCount = a.maxInstancedCount;
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    }
  });
  ye.prototype = Object.assign(Object.create(sb.prototype), {
    constructor: ye,
    isInstancedInterleavedBuffer: !0,
    copy: function copy(a) {
      sb.prototype.copy.call(this, a);
      this.meshPerAttribute = a.meshPerAttribute;
      return this;
    }
  });
  ze.prototype = Object.assign(Object.create(F.prototype), {
    constructor: ze,
    isInstancedBufferAttribute: !0,
    copy: function copy(a) {
      F.prototype.copy.call(this, a);
      this.meshPerAttribute = a.meshPerAttribute;
      return this;
    }
  });
  Object.assign(zf.prototype, {
    linePrecision: 1,
    set: function set(a, b) {
      this.ray.set(a, b);
    },
    setFromCamera: function setFromCamera(a, b) {
      b && b.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(b.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(b).sub(this.ray.origin).normalize()) : b && b.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (b.near + b.far) / (b.near - b.far)).unproject(b), this.ray.direction.set(0, 0, -1).transformDirection(b.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
    },
    intersectObject: function intersectObject(a, b, c) {
      c = c || [];
      Ae(a, this, c, b);
      c.sort(Af);
      return c;
    },
    intersectObjects: function intersectObjects(a, b, c) {
      c = c || [];
      if (!1 === Array.isArray(a)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), c;

      for (var d = 0, e = a.length; d < e; d++) {
        Ae(a[d], this, c, b);
      }

      c.sort(Af);
      return c;
    }
  });
  Object.assign(Bf.prototype, {
    set: function set(a, b, c) {
      this.radius = a;
      this.phi = b;
      this.theta = c;
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.radius = a.radius;
      this.phi = a.phi;
      this.theta = a.theta;
      return this;
    },
    makeSafe: function makeSafe() {
      this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));
      return this;
    },
    setFromVector3: function setFromVector3(a) {
      return this.setFromCartesianCoords(a.x, a.y, a.z);
    },
    setFromCartesianCoords: function setFromCartesianCoords(a, b, c) {
      this.radius = Math.sqrt(a * a + b * b + c * c);
      0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a, c), this.phi = Math.acos(R.clamp(b / this.radius, -1, 1)));
      return this;
    }
  });
  Object.assign(Cf.prototype, {
    set: function set(a, b, c) {
      this.radius = a;
      this.theta = b;
      this.y = c;
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.radius = a.radius;
      this.theta = a.theta;
      this.y = a.y;
      return this;
    },
    setFromVector3: function setFromVector3(a) {
      return this.setFromCartesianCoords(a.x, a.y, a.z);
    },
    setFromCartesianCoords: function setFromCartesianCoords(a, b, c) {
      this.radius = Math.sqrt(a * a + c * c);
      this.theta = Math.atan2(a, c);
      this.y = b;
      return this;
    }
  });
  Object.assign(Be.prototype, {
    set: function set(a, b) {
      this.min.copy(a);
      this.max.copy(b);
      return this;
    },
    setFromPoints: function setFromPoints(a) {
      this.makeEmpty();

      for (var b = 0, c = a.length; b < c; b++) {
        this.expandByPoint(a[b]);
      }

      return this;
    },
    setFromCenterAndSize: function () {
      var a = new z();
      return function (b, c) {
        c = a.copy(c).multiplyScalar(.5);
        this.min.copy(b).sub(c);
        this.max.copy(b).add(c);
        return this;
      };
    }(),
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.min.copy(a.min);
      this.max.copy(a.max);
      return this;
    },
    makeEmpty: function makeEmpty() {
      this.min.x = this.min.y = Infinity;
      this.max.x = this.max.y = -Infinity;
      return this;
    },
    isEmpty: function isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y;
    },
    getCenter: function getCenter(a) {
      void 0 === a && (console.warn("THREE.Box2: .getCenter() target is now required"), a = new z());
      return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
    },
    getSize: function getSize(a) {
      void 0 === a && (console.warn("THREE.Box2: .getSize() target is now required"), a = new z());
      return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
    },
    expandByPoint: function expandByPoint(a) {
      this.min.min(a);
      this.max.max(a);
      return this;
    },
    expandByVector: function expandByVector(a) {
      this.min.sub(a);
      this.max.add(a);
      return this;
    },
    expandByScalar: function expandByScalar(a) {
      this.min.addScalar(-a);
      this.max.addScalar(a);
      return this;
    },
    containsPoint: function containsPoint(a) {
      return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
    },
    containsBox: function containsBox(a) {
      return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y;
    },
    getParameter: function getParameter(a, b) {
      void 0 === b && (console.warn("THREE.Box2: .getParameter() target is now required"), b = new z());
      return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
    },
    intersectsBox: function intersectsBox(a) {
      return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
    },
    clampPoint: function clampPoint(a, b) {
      void 0 === b && (console.warn("THREE.Box2: .clampPoint() target is now required"), b = new z());
      return b.copy(a).clamp(this.min, this.max);
    },
    distanceToPoint: function () {
      var a = new z();
      return function (b) {
        return a.copy(b).clamp(this.min, this.max).sub(b).length();
      };
    }(),
    intersect: function intersect(a) {
      this.min.max(a.min);
      this.max.min(a.max);
      return this;
    },
    union: function union(a) {
      this.min.min(a.min);
      this.max.max(a.max);
      return this;
    },
    translate: function translate(a) {
      this.min.add(a);
      this.max.add(a);
      return this;
    },
    equals: function equals(a) {
      return a.min.equals(this.min) && a.max.equals(this.max);
    }
  });
  Object.assign(Ce.prototype, {
    set: function set(a, b) {
      this.start.copy(a);
      this.end.copy(b);
      return this;
    },
    clone: function clone() {
      return new this.constructor().copy(this);
    },
    copy: function copy(a) {
      this.start.copy(a.start);
      this.end.copy(a.end);
      return this;
    },
    getCenter: function getCenter(a) {
      void 0 === a && (console.warn("THREE.Line3: .getCenter() target is now required"), a = new p());
      return a.addVectors(this.start, this.end).multiplyScalar(.5);
    },
    delta: function delta(a) {
      void 0 === a && (console.warn("THREE.Line3: .delta() target is now required"), a = new p());
      return a.subVectors(this.end, this.start);
    },
    distanceSq: function distanceSq() {
      return this.start.distanceToSquared(this.end);
    },
    distance: function distance() {
      return this.start.distanceTo(this.end);
    },
    at: function at(a, b) {
      void 0 === b && (console.warn("THREE.Line3: .at() target is now required"), b = new p());
      return this.delta(b).multiplyScalar(a).add(this.start);
    },
    closestPointToPointParameter: function () {
      var a = new p(),
          b = new p();
      return function (c, d) {
        a.subVectors(c, this.start);
        b.subVectors(this.end, this.start);
        c = b.dot(b);
        c = b.dot(a) / c;
        d && (c = R.clamp(c, 0, 1));
        return c;
      };
    }(),
    closestPointToPoint: function closestPointToPoint(a, b, c) {
      a = this.closestPointToPointParameter(a, b);
      void 0 === c && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), c = new p());
      return this.delta(c).multiplyScalar(a).add(this.start);
    },
    applyMatrix4: function applyMatrix4(a) {
      this.start.applyMatrix4(a);
      this.end.applyMatrix4(a);
      return this;
    },
    equals: function equals(a) {
      return a.start.equals(this.start) && a.end.equals(this.end);
    }
  });
  jd.prototype = Object.create(D.prototype);
  jd.prototype.constructor = jd;
  jd.prototype.isImmediateRenderObject = !0;
  kd.prototype = Object.create(S.prototype);
  kd.prototype.constructor = kd;

  kd.prototype.update = function () {
    var a = new p(),
        b = new p(),
        c = new da();
    return function () {
      var d = ["a", "b", "c"];
      this.object.updateMatrixWorld(!0);
      c.getNormalMatrix(this.object.matrixWorld);
      var e = this.object.matrixWorld,
          f = this.geometry.attributes.position,
          g = this.object.geometry;
      if (g && g.isGeometry) for (var h = g.vertices, k = g.faces, l = g = 0, p = k.length; l < p; l++) {
        for (var n = k[l], r = 0, x = n.vertexNormals.length; r < x; r++) {
          var t = n.vertexNormals[r];
          a.copy(h[n[d[r]]]).applyMatrix4(e);
          b.copy(t).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
          f.setXYZ(g, a.x, a.y, a.z);
          g += 1;
          f.setXYZ(g, b.x, b.y, b.z);
          g += 1;
        }
      } else if (g && g.isBufferGeometry) for (d = g.attributes.position, h = g.attributes.normal, r = g = 0, x = d.count; r < x; r++) {
        a.set(d.getX(r), d.getY(r), d.getZ(r)).applyMatrix4(e), b.set(h.getX(r), h.getY(r), h.getZ(r)), b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a), f.setXYZ(g, a.x, a.y, a.z), g += 1, f.setXYZ(g, b.x, b.y, b.z), g += 1;
      }
      f.needsUpdate = !0;
    };
  }();

  mc.prototype = Object.create(D.prototype);
  mc.prototype.constructor = mc;

  mc.prototype.dispose = function () {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  };

  mc.prototype.update = function () {
    var a = new p(),
        b = new p();
    return function () {
      this.light.updateMatrixWorld();
      var c = this.light.distance ? this.light.distance : 1E3,
          d = c * Math.tan(this.light.angle);
      this.cone.scale.set(d, d, c);
      a.setFromMatrixPosition(this.light.matrixWorld);
      b.setFromMatrixPosition(this.light.target.matrixWorld);
      this.cone.lookAt(b.sub(a));
      void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
    };
  }();

  nc.prototype = Object.create(S.prototype);
  nc.prototype.constructor = nc;

  nc.prototype.updateMatrixWorld = function () {
    var a = new p(),
        b = new P(),
        c = new P();
    return function (d) {
      var e = this.bones,
          f = this.geometry,
          g = f.getAttribute("position");
      c.getInverse(this.root.matrixWorld);

      for (var h = 0, k = 0; h < e.length; h++) {
        var l = e[h];
        l.parent && l.parent.isBone && (b.multiplyMatrices(c, l.matrixWorld), a.setFromMatrixPosition(b), g.setXYZ(k, a.x, a.y, a.z), b.multiplyMatrices(c, l.parent.matrixWorld), a.setFromMatrixPosition(b), g.setXYZ(k + 1, a.x, a.y, a.z), k += 2);
      }

      f.getAttribute("position").needsUpdate = !0;
      D.prototype.updateMatrixWorld.call(this, d);
    };
  }();

  oc.prototype = Object.create(pa.prototype);
  oc.prototype.constructor = oc;

  oc.prototype.dispose = function () {
    this.geometry.dispose();
    this.material.dispose();
  };

  oc.prototype.update = function () {
    void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  };

  pc.prototype = Object.create(D.prototype);
  pc.prototype.constructor = pc;

  pc.prototype.dispose = function () {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };

  pc.prototype.update = function () {
    var a = .5 * this.light.width,
        b = .5 * this.light.height,
        c = this.line.geometry.attributes.position,
        d = c.array;
    d[0] = a;
    d[1] = -b;
    d[2] = 0;
    d[3] = a;
    d[4] = b;
    d[5] = 0;
    d[6] = -a;
    d[7] = b;
    d[8] = 0;
    d[9] = -a;
    d[10] = -b;
    d[11] = 0;
    d[12] = a;
    d[13] = -b;
    d[14] = 0;
    c.needsUpdate = !0;
    void 0 !== this.color ? this.line.material.color.set(this.color) : this.line.material.color.copy(this.light.color);
  };

  qc.prototype = Object.create(D.prototype);
  qc.prototype.constructor = qc;

  qc.prototype.dispose = function () {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  };

  qc.prototype.update = function () {
    var a = new p(),
        b = new G(),
        c = new G();
    return function () {
      var d = this.children[0];
      if (void 0 !== this.color) this.material.color.set(this.color);else {
        var e = d.geometry.getAttribute("color");
        b.copy(this.light.color);
        c.copy(this.light.groundColor);

        for (var f = 0, g = e.count; f < g; f++) {
          var h = f < g / 2 ? b : c;
          e.setXYZ(f, h.r, h.g, h.b);
        }

        e.needsUpdate = !0;
      }
      d.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());
    };
  }();

  ld.prototype = Object.create(S.prototype);
  ld.prototype.constructor = ld;
  Sd.prototype = Object.create(S.prototype);
  Sd.prototype.constructor = Sd;
  md.prototype = Object.create(S.prototype);
  md.prototype.constructor = md;

  md.prototype.update = function () {
    var a = new p(),
        b = new p(),
        c = new da();
    return function () {
      this.object.updateMatrixWorld(!0);
      c.getNormalMatrix(this.object.matrixWorld);
      var d = this.object.matrixWorld,
          e = this.geometry.attributes.position,
          f = this.object.geometry,
          g = f.vertices;
      f = f.faces;

      for (var h = 0, k = 0, l = f.length; k < l; k++) {
        var p = f[k],
            n = p.normal;
        a.copy(g[p.a]).add(g[p.b]).add(g[p.c]).divideScalar(3).applyMatrix4(d);
        b.copy(n).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
        e.setXYZ(h, a.x, a.y, a.z);
        h += 1;
        e.setXYZ(h, b.x, b.y, b.z);
        h += 1;
      }

      e.needsUpdate = !0;
    };
  }();

  rc.prototype = Object.create(D.prototype);
  rc.prototype.constructor = rc;

  rc.prototype.dispose = function () {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  };

  rc.prototype.update = function () {
    var a = new p(),
        b = new p(),
        c = new p();
    return function () {
      a.setFromMatrixPosition(this.light.matrixWorld);
      b.setFromMatrixPosition(this.light.target.matrixWorld);
      c.subVectors(b, a);
      this.lightPlane.lookAt(c);
      void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color));
      this.targetLine.lookAt(c);
      this.targetLine.scale.z = c.length();
    };
  }();

  nd.prototype = Object.create(S.prototype);
  nd.prototype.constructor = nd;

  nd.prototype.update = function () {
    function a(a, g, h, k) {
      d.set(g, h, k).unproject(e);
      a = c[a];
      if (void 0 !== a) for (g = b.getAttribute("position"), h = 0, k = a.length; h < k; h++) {
        g.setXYZ(a[h], d.x, d.y, d.z);
      }
    }

    var b,
        c,
        d = new p(),
        e = new Ra();
    return function () {
      b = this.geometry;
      c = this.pointMap;
      e.projectionMatrix.copy(this.camera.projectionMatrix);
      a("c", 0, 0, -1);
      a("t", 0, 0, 1);
      a("n1", -1, -1, -1);
      a("n2", 1, -1, -1);
      a("n3", -1, 1, -1);
      a("n4", 1, 1, -1);
      a("f1", -1, -1, 1);
      a("f2", 1, -1, 1);
      a("f3", -1, 1, 1);
      a("f4", 1, 1, 1);
      a("u1", .7, 1.1, -1);
      a("u2", -.7, 1.1, -1);
      a("u3", 0, 2, -1);
      a("cf1", -1, 0, 1);
      a("cf2", 1, 0, 1);
      a("cf3", 0, -1, 1);
      a("cf4", 0, 1, 1);
      a("cn1", -1, 0, -1);
      a("cn2", 1, 0, -1);
      a("cn3", 0, -1, -1);
      a("cn4", 0, 1, -1);
      b.getAttribute("position").needsUpdate = !0;
    };
  }();

  bb.prototype = Object.create(S.prototype);
  bb.prototype.constructor = bb;

  bb.prototype.update = function () {
    var a = new Wa();
    return function (b) {
      void 0 !== b && console.warn("THREE.BoxHelper: .update() has no longer arguments.");
      void 0 !== this.object && a.setFromObject(this.object);

      if (!a.isEmpty()) {
        b = a.min;
        var c = a.max,
            d = this.geometry.attributes.position,
            e = d.array;
        e[0] = c.x;
        e[1] = c.y;
        e[2] = c.z;
        e[3] = b.x;
        e[4] = c.y;
        e[5] = c.z;
        e[6] = b.x;
        e[7] = b.y;
        e[8] = c.z;
        e[9] = c.x;
        e[10] = b.y;
        e[11] = c.z;
        e[12] = c.x;
        e[13] = c.y;
        e[14] = b.z;
        e[15] = b.x;
        e[16] = c.y;
        e[17] = b.z;
        e[18] = b.x;
        e[19] = b.y;
        e[20] = b.z;
        e[21] = c.x;
        e[22] = b.y;
        e[23] = b.z;
        d.needsUpdate = !0;
        this.geometry.computeBoundingSphere();
      }
    };
  }();

  bb.prototype.setFromObject = function (a) {
    this.object = a;
    this.update();
    return this;
  };

  bb.prototype.copy = function (a) {
    S.prototype.copy.call(this, a);
    this.object = a.object;
    return this;
  };

  bb.prototype.clone = function () {
    return new this.constructor().copy(this);
  };

  od.prototype = Object.create(S.prototype);
  od.prototype.constructor = od;

  od.prototype.updateMatrixWorld = function (a) {
    var b = this.box;
    b.isEmpty() || (b.getCenter(this.position), b.getSize(this.scale), this.scale.multiplyScalar(.5), D.prototype.updateMatrixWorld.call(this, a));
  };

  pd.prototype = Object.create(ma.prototype);
  pd.prototype.constructor = pd;

  pd.prototype.updateMatrixWorld = function (a) {
    var b = -this.plane.constant;
    1E-8 > Math.abs(b) && (b = 1E-8);
    this.scale.set(.5 * this.size, .5 * this.size, b);
    this.children[0].material.side = 0 > b ? 1 : 0;
    this.lookAt(this.plane.normal);
    D.prototype.updateMatrixWorld.call(this, a);
  };

  var Td, De;
  cb.prototype = Object.create(D.prototype);
  cb.prototype.constructor = cb;

  cb.prototype.setDirection = function () {
    var a = new p(),
        b;
    return function (c) {
      .99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), b = Math.acos(c.y), this.quaternion.setFromAxisAngle(a, b));
    };
  }();

  cb.prototype.setLength = function (a, b, c) {
    void 0 === b && (b = .2 * a);
    void 0 === c && (c = .2 * b);
    this.line.scale.set(1, Math.max(0, a - b), 1);
    this.line.updateMatrix();
    this.cone.scale.set(c, b, c);
    this.cone.position.y = a;
    this.cone.updateMatrix();
  };

  cb.prototype.setColor = function (a) {
    this.line.material.color.copy(a);
    this.cone.material.color.copy(a);
  };

  cb.prototype.copy = function (a) {
    D.prototype.copy.call(this, a, !1);
    this.line.copy(a.line);
    this.cone.copy(a.cone);
    return this;
  };

  cb.prototype.clone = function () {
    return new this.constructor().copy(this);
  };

  qd.prototype = Object.create(S.prototype);
  qd.prototype.constructor = qd;

  Q.create = function (a, b) {
    console.log("THREE.Curve.create() has been deprecated");
    a.prototype = Object.create(Q.prototype);
    a.prototype.constructor = a;
    a.prototype.getPoint = b;
    return a;
  };

  Object.assign(ab.prototype, {
    createPointsGeometry: function createPointsGeometry(a) {
      console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      a = this.getPoints(a);
      return this.createGeometry(a);
    },
    createSpacedPointsGeometry: function createSpacedPointsGeometry(a) {
      console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
      a = this.getSpacedPoints(a);
      return this.createGeometry(a);
    },
    createGeometry: function createGeometry(a) {
      console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");

      for (var b = new I(), c = 0, d = a.length; c < d; c++) {
        var e = a[c];
        b.vertices.push(new p(e.x, e.y, e.z || 0));
      }

      return b;
    }
  });
  Object.assign(Na.prototype, {
    fromPoints: function fromPoints(a) {
      console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
      this.setFromPoints(a);
    }
  });
  Ef.prototype = Object.create(ua.prototype);
  Ff.prototype = Object.create(ua.prototype);
  Ee.prototype = Object.create(ua.prototype);
  Object.assign(Ee.prototype, {
    initFromArray: function initFromArray() {
      console.error("THREE.Spline: .initFromArray() has been removed.");
    },
    getControlPointsArray: function getControlPointsArray() {
      console.error("THREE.Spline: .getControlPointsArray() has been removed.");
    },
    reparametrizeByArcLength: function reparametrizeByArcLength() {
      console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
    }
  });

  ld.prototype.setColors = function () {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
  };

  nc.prototype.update = function () {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
  };

  Object.assign(kc.prototype, {
    extractUrlBase: function extractUrlBase(a) {
      console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
      return Vd.extractUrlBase(a);
    }
  });
  Object.assign(Qd.prototype, {
    setTexturePath: function setTexturePath(a) {
      console.warn("THREE.JSONLoader: .setTexturePath() has been renamed to .setResourcePath().");
      return this.setResourcePath(a);
    }
  });
  Object.assign(le.prototype, {
    setTexturePath: function setTexturePath(a) {
      console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
      return this.setResourcePath(a);
    }
  });
  Object.assign(Be.prototype, {
    center: function center(a) {
      console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
      return this.getCenter(a);
    },
    empty: function empty() {
      console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    },
    isIntersectionBox: function isIntersectionBox(a) {
      console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(a);
    },
    size: function size(a) {
      console.warn("THREE.Box2: .size() has been renamed to .getSize().");
      return this.getSize(a);
    }
  });
  Object.assign(Wa.prototype, {
    center: function center(a) {
      console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
      return this.getCenter(a);
    },
    empty: function empty() {
      console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
      return this.isEmpty();
    },
    isIntersectionBox: function isIntersectionBox(a) {
      console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(a);
    },
    isIntersectionSphere: function isIntersectionSphere(a) {
      console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
      return this.intersectsSphere(a);
    },
    size: function size(a) {
      console.warn("THREE.Box3: .size() has been renamed to .getSize().");
      return this.getSize(a);
    }
  });

  Ce.prototype.center = function (a) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(a);
  };

  Object.assign(R, {
    random16: function random16() {
      console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
      return Math.random();
    },
    nearestPowerOfTwo: function nearestPowerOfTwo(a) {
      console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
      return R.floorPowerOfTwo(a);
    },
    nextPowerOfTwo: function nextPowerOfTwo(a) {
      console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
      return R.ceilPowerOfTwo(a);
    }
  });
  Object.assign(da.prototype, {
    flattenToArrayOffset: function flattenToArrayOffset(a, b) {
      console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
      return this.toArray(a, b);
    },
    multiplyVector3: function multiplyVector3(a) {
      console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
      return a.applyMatrix3(this);
    },
    multiplyVector3Array: function multiplyVector3Array() {
      console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
    },
    applyToBuffer: function applyToBuffer(a) {
      console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
      return this.applyToBufferAttribute(a);
    },
    applyToVector3Array: function applyToVector3Array() {
      console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
    }
  });
  Object.assign(P.prototype, {
    extractPosition: function extractPosition(a) {
      console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
      return this.copyPosition(a);
    },
    flattenToArrayOffset: function flattenToArrayOffset(a, b) {
      console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
      return this.toArray(a, b);
    },
    getPosition: function () {
      var a;
      return function () {
        void 0 === a && (a = new p());
        console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
        return a.setFromMatrixColumn(this, 3);
      };
    }(),
    setRotationFromQuaternion: function setRotationFromQuaternion(a) {
      console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
      return this.makeRotationFromQuaternion(a);
    },
    multiplyToArray: function multiplyToArray() {
      console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
    },
    multiplyVector3: function multiplyVector3(a) {
      console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return a.applyMatrix4(this);
    },
    multiplyVector4: function multiplyVector4(a) {
      console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return a.applyMatrix4(this);
    },
    multiplyVector3Array: function multiplyVector3Array() {
      console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
    },
    rotateAxis: function rotateAxis(a) {
      console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
      a.transformDirection(this);
    },
    crossVector: function crossVector(a) {
      console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
      return a.applyMatrix4(this);
    },
    translate: function translate() {
      console.error("THREE.Matrix4: .translate() has been removed.");
    },
    rotateX: function rotateX() {
      console.error("THREE.Matrix4: .rotateX() has been removed.");
    },
    rotateY: function rotateY() {
      console.error("THREE.Matrix4: .rotateY() has been removed.");
    },
    rotateZ: function rotateZ() {
      console.error("THREE.Matrix4: .rotateZ() has been removed.");
    },
    rotateByAxis: function rotateByAxis() {
      console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
    },
    applyToBuffer: function applyToBuffer(a) {
      console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
      return this.applyToBufferAttribute(a);
    },
    applyToVector3Array: function applyToVector3Array() {
      console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
    },
    makeFrustum: function makeFrustum(a, b, c, d, e, f) {
      console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
      return this.makePerspective(a, b, d, c, e, f);
    }
  });

  Pa.prototype.isIntersectionLine = function (a) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(a);
  };

  ja.prototype.multiplyVector3 = function (a) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return a.applyQuaternion(this);
  };

  Object.assign(rb.prototype, {
    isIntersectionBox: function isIntersectionBox(a) {
      console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
      return this.intersectsBox(a);
    },
    isIntersectionPlane: function isIntersectionPlane(a) {
      console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
      return this.intersectsPlane(a);
    },
    isIntersectionSphere: function isIntersectionSphere(a) {
      console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
      return this.intersectsSphere(a);
    }
  });
  Object.assign(ha.prototype, {
    area: function area() {
      console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
      return this.getArea();
    },
    barycoordFromPoint: function barycoordFromPoint(a, b) {
      console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
      return this.getBarycoord(a, b);
    },
    midpoint: function midpoint(a) {
      console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
      return this.getMidpoint(a);
    },
    normal: function normal(a) {
      console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
      return this.getNormal(a);
    },
    plane: function plane(a) {
      console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
      return this.getPlane(a);
    }
  });
  Object.assign(ha, {
    barycoordFromPoint: function barycoordFromPoint(a, b, c, d, e) {
      console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
      return ha.getBarycoord(a, b, c, d, e);
    },
    normal: function normal(a, b, c, d) {
      console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
      return ha.getNormal(a, b, c, d);
    }
  });
  Object.assign(ib.prototype, {
    extractAllPoints: function extractAllPoints(a) {
      console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
      return this.extractPoints(a);
    },
    extrude: function extrude(a) {
      console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
      return new vb(this, a);
    },
    makeGeometry: function makeGeometry(a) {
      console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
      return new xb(this, a);
    }
  });
  Object.assign(z.prototype, {
    fromAttribute: function fromAttribute(a, b, c) {
      console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(a, b, c);
    },
    distanceToManhattan: function distanceToManhattan(a) {
      console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
      return this.manhattanDistanceTo(a);
    },
    lengthManhattan: function lengthManhattan() {
      console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(p.prototype, {
    setEulerFromRotationMatrix: function setEulerFromRotationMatrix() {
      console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
    },
    setEulerFromQuaternion: function setEulerFromQuaternion() {
      console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
    },
    getPositionFromMatrix: function getPositionFromMatrix(a) {
      console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
      return this.setFromMatrixPosition(a);
    },
    getScaleFromMatrix: function getScaleFromMatrix(a) {
      console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
      return this.setFromMatrixScale(a);
    },
    getColumnFromMatrix: function getColumnFromMatrix(a, b) {
      console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
      return this.setFromMatrixColumn(b, a);
    },
    applyProjection: function applyProjection(a) {
      console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
      return this.applyMatrix4(a);
    },
    fromAttribute: function fromAttribute(a, b, c) {
      console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(a, b, c);
    },
    distanceToManhattan: function distanceToManhattan(a) {
      console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
      return this.manhattanDistanceTo(a);
    },
    lengthManhattan: function lengthManhattan() {
      console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(Z.prototype, {
    fromAttribute: function fromAttribute(a, b, c) {
      console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
      return this.fromBufferAttribute(a, b, c);
    },
    lengthManhattan: function lengthManhattan() {
      console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
      return this.manhattanLength();
    }
  });
  Object.assign(I.prototype, {
    computeTangents: function computeTangents() {
      console.error("THREE.Geometry: .computeTangents() has been removed.");
    },
    computeLineDistances: function computeLineDistances() {
      console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
    }
  });
  Object.assign(D.prototype, {
    getChildByName: function getChildByName(a) {
      console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
      return this.getObjectByName(a);
    },
    renderDepth: function renderDepth() {
      console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
    },
    translate: function translate(a, b) {
      console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
      return this.translateOnAxis(b, a);
    },
    getWorldRotation: function getWorldRotation() {
      console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
    }
  });
  Object.defineProperties(D.prototype, {
    eulerOrder: {
      get: function get() {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        return this.rotation.order;
      },
      set: function set(a) {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
        this.rotation.order = a;
      }
    },
    useQuaternion: {
      get: function get() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      },
      set: function set() {
        console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
      }
    }
  });
  Object.defineProperties(Fc.prototype, {
    objects: {
      get: function get() {
        console.warn("THREE.LOD: .objects has been renamed to .levels.");
        return this.levels;
      }
    }
  });
  Object.defineProperty(Gc.prototype, "useVertexTexture", {
    get: function get() {
      console.warn("THREE.Skeleton: useVertexTexture has been removed.");
    },
    set: function set() {
      console.warn("THREE.Skeleton: useVertexTexture has been removed.");
    }
  });
  Object.defineProperty(Q.prototype, "__arcLengthDivisions", {
    get: function get() {
      console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
      return this.arcLengthDivisions;
    },
    set: function set(a) {
      console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
      this.arcLengthDivisions = a;
    }
  });

  V.prototype.setLens = function (a, b) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    void 0 !== b && (this.filmGauge = b);
    this.setFocalLength(a);
  };

  Object.defineProperties(ca.prototype, {
    onlyShadow: {
      set: function set() {
        console.warn("THREE.Light: .onlyShadow has been removed.");
      }
    },
    shadowCameraFov: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
        this.shadow.camera.fov = a;
      }
    },
    shadowCameraLeft: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
        this.shadow.camera.left = a;
      }
    },
    shadowCameraRight: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
        this.shadow.camera.right = a;
      }
    },
    shadowCameraTop: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
        this.shadow.camera.top = a;
      }
    },
    shadowCameraBottom: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
        this.shadow.camera.bottom = a;
      }
    },
    shadowCameraNear: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
        this.shadow.camera.near = a;
      }
    },
    shadowCameraFar: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
        this.shadow.camera.far = a;
      }
    },
    shadowCameraVisible: {
      set: function set() {
        console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
      }
    },
    shadowBias: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
        this.shadow.bias = a;
      }
    },
    shadowDarkness: {
      set: function set() {
        console.warn("THREE.Light: .shadowDarkness has been removed.");
      }
    },
    shadowMapWidth: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
        this.shadow.mapSize.width = a;
      }
    },
    shadowMapHeight: {
      set: function set(a) {
        console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
        this.shadow.mapSize.height = a;
      }
    }
  });
  Object.defineProperties(F.prototype, {
    length: {
      get: function get() {
        console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
        return this.array.length;
      }
    },
    copyIndicesArray: function copyIndicesArray() {
      console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
    }
  });
  Object.assign(E.prototype, {
    addIndex: function addIndex(a) {
      console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
      this.setIndex(a);
    },
    addDrawCall: function addDrawCall(a, b, c) {
      void 0 !== c && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
      console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
      this.addGroup(a, b);
    },
    clearDrawCalls: function clearDrawCalls() {
      console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
      this.clearGroups();
    },
    computeTangents: function computeTangents() {
      console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
    },
    computeOffsets: function computeOffsets() {
      console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
    }
  });
  Object.defineProperties(E.prototype, {
    drawcalls: {
      get: function get() {
        console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
        return this.groups;
      }
    },
    offsets: {
      get: function get() {
        console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
        return this.groups;
      }
    }
  });
  Object.assign(Sa.prototype, {
    getArrays: function getArrays() {
      console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
    },
    addShapeList: function addShapeList() {
      console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
    },
    addShape: function addShape() {
      console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
    }
  });
  Object.defineProperties(Rd.prototype, {
    dynamic: {
      set: function set() {
        console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
      }
    },
    onUpdate: {
      value: function value() {
        console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
        return this;
      }
    }
  });
  Object.defineProperties(L.prototype, {
    wrapAround: {
      get: function get() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      },
      set: function set() {
        console.warn("THREE.Material: .wrapAround has been removed.");
      }
    },
    overdraw: {
      get: function get() {
        console.warn("THREE.Material: .overdraw has been removed.");
      },
      set: function set() {
        console.warn("THREE.Material: .overdraw has been removed.");
      }
    },
    wrapRGB: {
      get: function get() {
        console.warn("THREE.Material: .wrapRGB has been removed.");
        return new G();
      }
    },
    shading: {
      get: function get() {
        console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
      },
      set: function set(a) {
        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        this.flatShading = 1 === a;
      }
    }
  });
  Object.defineProperties(Ia.prototype, {
    metal: {
      get: function get() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
        return !1;
      },
      set: function set() {
        console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
      }
    }
  });
  Object.defineProperties(ka.prototype, {
    derivatives: {
      get: function get() {
        console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        return this.extensions.derivatives;
      },
      set: function set(a) {
        console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
        this.extensions.derivatives = a;
      }
    }
  });
  Object.assign(ce.prototype, {
    clearTarget: function clearTarget(a, b, c, d) {
      console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
      this.setRenderTarget(a);
      this.clear(b, c, d);
    },
    animate: function animate(a) {
      console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
      this.setAnimationLoop(a);
    },
    getCurrentRenderTarget: function getCurrentRenderTarget() {
      console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
      return this.getRenderTarget();
    },
    getMaxAnisotropy: function getMaxAnisotropy() {
      console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
      return this.capabilities.getMaxAnisotropy();
    },
    getPrecision: function getPrecision() {
      console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
      return this.capabilities.precision;
    },
    resetGLState: function resetGLState() {
      console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
      return this.state.reset();
    },
    supportsFloatTextures: function supportsFloatTextures() {
      console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
      return this.extensions.get("OES_texture_float");
    },
    supportsHalfFloatTextures: function supportsHalfFloatTextures() {
      console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
      return this.extensions.get("OES_texture_half_float");
    },
    supportsStandardDerivatives: function supportsStandardDerivatives() {
      console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
      return this.extensions.get("OES_standard_derivatives");
    },
    supportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
      return this.extensions.get("WEBGL_compressed_texture_s3tc");
    },
    supportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {
      console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
      return this.extensions.get("WEBGL_compressed_texture_pvrtc");
    },
    supportsBlendMinMax: function supportsBlendMinMax() {
      console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
      return this.extensions.get("EXT_blend_minmax");
    },
    supportsVertexTextures: function supportsVertexTextures() {
      console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
      return this.capabilities.vertexTextures;
    },
    supportsInstancedArrays: function supportsInstancedArrays() {
      console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
      return this.extensions.get("ANGLE_instanced_arrays");
    },
    enableScissorTest: function enableScissorTest(a) {
      console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
      this.setScissorTest(a);
    },
    initMaterial: function initMaterial() {
      console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
    },
    addPrePlugin: function addPrePlugin() {
      console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
    },
    addPostPlugin: function addPostPlugin() {
      console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
    },
    updateShadowMap: function updateShadowMap() {
      console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
    },
    setFaceCulling: function setFaceCulling() {
      console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
    }
  });
  Object.defineProperties(ce.prototype, {
    shadowMapEnabled: {
      get: function get() {
        return this.shadowMap.enabled;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
        this.shadowMap.enabled = a;
      }
    },
    shadowMapType: {
      get: function get() {
        return this.shadowMap.type;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
        this.shadowMap.type = a;
      }
    },
    shadowMapCullFace: {
      get: function get() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      },
      set: function set() {
        console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      }
    }
  });
  Object.defineProperties(cf.prototype, {
    cullFace: {
      get: function get() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      },
      set: function set() {
        console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      }
    },
    renderReverseSided: {
      get: function get() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      },
      set: function set() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      }
    },
    renderSingleSided: {
      get: function get() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      },
      set: function set() {
        console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      }
    }
  });
  Object.defineProperties(kb.prototype, {
    wrapS: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        return this.texture.wrapS;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
        this.texture.wrapS = a;
      }
    },
    wrapT: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        return this.texture.wrapT;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
        this.texture.wrapT = a;
      }
    },
    magFilter: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        return this.texture.magFilter;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
        this.texture.magFilter = a;
      }
    },
    minFilter: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        return this.texture.minFilter;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
        this.texture.minFilter = a;
      }
    },
    anisotropy: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        return this.texture.anisotropy;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
        this.texture.anisotropy = a;
      }
    },
    offset: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        return this.texture.offset;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
        this.texture.offset = a;
      }
    },
    repeat: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        return this.texture.repeat;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
        this.texture.repeat = a;
      }
    },
    format: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        return this.texture.format;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
        this.texture.format = a;
      }
    },
    type: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        return this.texture.type;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
        this.texture.type = a;
      }
    },
    generateMipmaps: {
      get: function get() {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        return this.texture.generateMipmaps;
      },
      set: function set(a) {
        console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
        this.texture.generateMipmaps = a;
      }
    }
  });
  Object.defineProperties(hf.prototype, {
    standing: {
      set: function set() {
        console.warn("THREE.WebVRManager: .standing has been removed.");
      }
    },
    userHeight: {
      set: function set() {
        console.warn("THREE.WebVRManager: .userHeight has been removed.");
      }
    }
  });

  lc.prototype.load = function (a) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var b = this;
    new pe().load(a, function (a) {
      b.setBuffer(a);
    });
    return this;
  };

  ue.prototype.getData = function () {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
  };

  id.prototype.updateCubeMap = function (a, b) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(a, b);
  };

  jb.crossOrigin = void 0;

  jb.loadTexture = function (a, b, c, d) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    var e = new Gd();
    e.setCrossOrigin(this.crossOrigin);
    a = e.load(a, c, void 0, d);
    b && (a.mapping = b);
    return a;
  };

  jb.loadTextureCube = function (a, b, c, d) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    var e = new ie();
    e.setCrossOrigin(this.crossOrigin);
    a = e.load(a, c, void 0, d);
    b && (a.mapping = b);
    return a;
  };

  jb.loadCompressedTexture = function () {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  };

  jb.loadCompressedTextureCube = function () {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  };

  l.WebGLRenderTargetCube = Jb;
  l.WebGLRenderTarget = kb;
  l.WebGLRenderer = ce;
  l.ShaderLib = Qa;
  l.UniformsLib = J;
  l.UniformsUtils = va;
  l.ShaderChunk = K;
  l.FogExp2 = Pb;
  l.Fog = Qb;
  l.Scene = vd;
  l.Sprite = Ec;
  l.LOD = Fc;
  l.SkinnedMesh = xd;
  l.Skeleton = Gc;
  l.Bone = wd;
  l.Mesh = pa;
  l.LineSegments = S;
  l.LineLoop = yd;
  l.Line = ma;
  l.Points = Sb;
  l.Group = Ob;
  l.VideoTexture = de;
  l.DataTexture = lb;
  l.DataTexture3D = Mb;
  l.CompressedTexture = Tb;
  l.CubeTexture = Ya;
  l.CanvasTexture = Hc;
  l.DepthTexture = Ic;
  l.Texture = W;
  l.AnimationLoader = rf;
  l.CompressedTextureLoader = sf;
  l.DataTextureLoader = he;
  l.CubeTextureLoader = ie;
  l.TextureLoader = Gd;
  l.ObjectLoader = le;
  l.MaterialLoader = Pd;
  l.BufferGeometryLoader = ke;
  l.DefaultLoadingManager = ta;
  l.LoadingManager = ge;
  l.JSONLoader = Qd;
  l.ImageLoader = ed;
  l.ImageBitmapLoader = me;
  l.FontLoader = uf;
  l.FileLoader = Fa;
  l.Loader = kc;
  l.LoaderUtils = Vd;
  l.Cache = Ib;
  l.AudioLoader = pe;
  l.SpotLightShadow = Id;
  l.SpotLight = Jd;
  l.PointLight = Kd;
  l.RectAreaLight = Od;
  l.HemisphereLight = Hd;
  l.DirectionalLightShadow = Ld;
  l.DirectionalLight = Md;
  l.AmbientLight = Nd;
  l.LightShadow = Hb;
  l.Light = ca;
  l.StereoCamera = vf;
  l.PerspectiveCamera = V;
  l.OrthographicCamera = hd;
  l.CubeCamera = id;
  l.ArrayCamera = Cc;
  l.Camera = Ra;
  l.AudioListener = re;
  l.PositionalAudio = te;
  l.AudioContext = se;
  l.AudioAnalyser = ue;
  l.Audio = lc;
  l.VectorKeyframeTrack = ic;
  l.StringKeyframeTrack = Fd;
  l.QuaternionKeyframeTrack = dd;
  l.NumberKeyframeTrack = hc;
  l.ColorKeyframeTrack = Dd;
  l.BooleanKeyframeTrack = Cd;
  l.PropertyMixer = ve;
  l.PropertyBinding = oa;
  l.KeyframeTrack = qa;
  l.AnimationUtils = ra;
  l.AnimationObjectGroup = xf;
  l.AnimationMixer = we;
  l.AnimationClip = za;
  l.Uniform = Rd;
  l.InstancedBufferGeometry = xe;
  l.BufferGeometry = E;
  l.Geometry = I;
  l.InterleavedBufferAttribute = Dc;
  l.InstancedInterleavedBuffer = ye;
  l.InterleavedBuffer = sb;
  l.InstancedBufferAttribute = ze;
  l.Face3 = Xa;
  l.Object3D = D;
  l.Raycaster = zf;
  l.Layers = Yd;
  l.EventDispatcher = ia;
  l.Clock = qe;
  l.QuaternionLinearInterpolant = Ed;
  l.LinearInterpolant = cd;
  l.DiscreteInterpolant = Bd;
  l.CubicInterpolant = Ad;
  l.Interpolant = Ca;
  l.Triangle = ha;
  l.Math = R;
  l.Spherical = Bf;
  l.Cylindrical = Cf;
  l.Plane = Pa;
  l.Frustum = rd;
  l.Sphere = Ga;
  l.Ray = rb;
  l.Matrix4 = P;
  l.Matrix3 = da;
  l.Box3 = Wa;
  l.Box2 = Be;
  l.Line3 = Ce;
  l.Euler = mb;
  l.Vector4 = Z;
  l.Vector3 = p;
  l.Vector2 = z;
  l.Quaternion = ja;
  l.Color = G;
  l.ImmediateRenderObject = jd;
  l.VertexNormalsHelper = kd;
  l.SpotLightHelper = mc;
  l.SkeletonHelper = nc;
  l.PointLightHelper = oc;
  l.RectAreaLightHelper = pc;
  l.HemisphereLightHelper = qc;
  l.GridHelper = ld;
  l.PolarGridHelper = Sd;
  l.FaceNormalsHelper = md;
  l.DirectionalLightHelper = rc;
  l.CameraHelper = nd;
  l.BoxHelper = bb;
  l.Box3Helper = od;
  l.PlaneHelper = pd;
  l.ArrowHelper = cb;
  l.AxesHelper = qd;
  l.Shape = ib;
  l.Path = Na;
  l.ShapePath = ne;
  l.Font = oe;
  l.CurvePath = ab;
  l.Curve = Q;
  l.ImageUtils = jb;
  l.ShapeUtils = Za;
  l.WebGLUtils = df;
  l.WireframeGeometry = Ub;
  l.ParametricGeometry = Jc;
  l.ParametricBufferGeometry = Vb;
  l.TetrahedronGeometry = Lc;
  l.TetrahedronBufferGeometry = Wb;
  l.OctahedronGeometry = Mc;
  l.OctahedronBufferGeometry = tb;
  l.IcosahedronGeometry = Nc;
  l.IcosahedronBufferGeometry = Xb;
  l.DodecahedronGeometry = Oc;
  l.DodecahedronBufferGeometry = Yb;
  l.PolyhedronGeometry = Kc;
  l.PolyhedronBufferGeometry = ya;
  l.TubeGeometry = Pc;
  l.TubeBufferGeometry = Zb;
  l.TorusKnotGeometry = Qc;
  l.TorusKnotBufferGeometry = $b;
  l.TorusGeometry = Rc;
  l.TorusBufferGeometry = ac;
  l.TextGeometry = Wc;
  l.TextBufferGeometry = bc;
  l.SphereGeometry = Xc;
  l.SphereBufferGeometry = wb;
  l.RingGeometry = Yc;
  l.RingBufferGeometry = cc;
  l.PlaneGeometry = yc;
  l.PlaneBufferGeometry = qb;
  l.LatheGeometry = Zc;
  l.LatheBufferGeometry = dc;
  l.ShapeGeometry = xb;
  l.ShapeBufferGeometry = yb;
  l.ExtrudeGeometry = vb;
  l.ExtrudeBufferGeometry = Sa;
  l.EdgesGeometry = ec;
  l.ConeGeometry = $c;
  l.ConeBufferGeometry = ad;
  l.CylinderGeometry = zb;
  l.CylinderBufferGeometry = $a;
  l.CircleGeometry = bd;
  l.CircleBufferGeometry = fc;
  l.BoxGeometry = Kb;
  l.BoxBufferGeometry = pb;
  l.ShadowMaterial = Ab;
  l.SpriteMaterial = hb;
  l.RawShaderMaterial = gc;
  l.ShaderMaterial = ka;
  l.PointsMaterial = Ha;
  l.MeshPhysicalMaterial = Bb;
  l.MeshStandardMaterial = Ta;
  l.MeshPhongMaterial = Ia;
  l.MeshToonMaterial = Cb;
  l.MeshNormalMaterial = Db;
  l.MeshLambertMaterial = Eb;
  l.MeshDepthMaterial = eb;
  l.MeshDistanceMaterial = fb;
  l.MeshBasicMaterial = Ea;
  l.MeshMatcapMaterial = Fb;
  l.LineDashedMaterial = Gb;
  l.LineBasicMaterial = T;
  l.Material = L;
  l.Float64BufferAttribute = xc;
  l.Float32BufferAttribute = C;
  l.Uint32BufferAttribute = ob;
  l.Int32BufferAttribute = wc;
  l.Uint16BufferAttribute = nb;
  l.Int16BufferAttribute = vc;
  l.Uint8ClampedBufferAttribute = uc;
  l.Uint8BufferAttribute = tc;
  l.Int8BufferAttribute = sc;
  l.BufferAttribute = F;
  l.ArcCurve = jc;
  l.CatmullRomCurve3 = ua;
  l.CubicBezierCurve = Ja;
  l.CubicBezierCurve3 = Ua;
  l.EllipseCurve = wa;
  l.LineCurve = Aa;
  l.LineCurve3 = Ka;
  l.QuadraticBezierCurve = La;
  l.QuadraticBezierCurve3 = Va;
  l.SplineCurve = Ma;
  l.REVISION = "98";
  l.MOUSE = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2
  };
  l.CullFaceNone = 0;
  l.CullFaceBack = 1;
  l.CullFaceFront = 2;
  l.CullFaceFrontBack = 3;
  l.FrontFaceDirectionCW = 0;
  l.FrontFaceDirectionCCW = 1;
  l.BasicShadowMap = 0;
  l.PCFShadowMap = 1;
  l.PCFSoftShadowMap = 2;
  l.FrontSide = 0;
  l.BackSide = 1;
  l.DoubleSide = 2;
  l.FlatShading = 1;
  l.SmoothShading = 2;
  l.NoColors = 0;
  l.FaceColors = 1;
  l.VertexColors = 2;
  l.NoBlending = 0;
  l.NormalBlending = 1;
  l.AdditiveBlending = 2;
  l.SubtractiveBlending = 3;
  l.MultiplyBlending = 4;
  l.CustomBlending = 5;
  l.AddEquation = 100;
  l.SubtractEquation = 101;
  l.ReverseSubtractEquation = 102;
  l.MinEquation = 103;
  l.MaxEquation = 104;
  l.ZeroFactor = 200;
  l.OneFactor = 201;
  l.SrcColorFactor = 202;
  l.OneMinusSrcColorFactor = 203;
  l.SrcAlphaFactor = 204;
  l.OneMinusSrcAlphaFactor = 205;
  l.DstAlphaFactor = 206;
  l.OneMinusDstAlphaFactor = 207;
  l.DstColorFactor = 208;
  l.OneMinusDstColorFactor = 209;
  l.SrcAlphaSaturateFactor = 210;
  l.NeverDepth = 0;
  l.AlwaysDepth = 1;
  l.LessDepth = 2;
  l.LessEqualDepth = 3;
  l.EqualDepth = 4;
  l.GreaterEqualDepth = 5;
  l.GreaterDepth = 6;
  l.NotEqualDepth = 7;
  l.MultiplyOperation = 0;
  l.MixOperation = 1;
  l.AddOperation = 2;
  l.NoToneMapping = 0;
  l.LinearToneMapping = 1;
  l.ReinhardToneMapping = 2;
  l.Uncharted2ToneMapping = 3;
  l.CineonToneMapping = 4;
  l.UVMapping = 300;
  l.CubeReflectionMapping = 301;
  l.CubeRefractionMapping = 302;
  l.EquirectangularReflectionMapping = 303;
  l.EquirectangularRefractionMapping = 304;
  l.SphericalReflectionMapping = 305;
  l.CubeUVReflectionMapping = 306;
  l.CubeUVRefractionMapping = 307;
  l.RepeatWrapping = 1E3;
  l.ClampToEdgeWrapping = 1001;
  l.MirroredRepeatWrapping = 1002;
  l.NearestFilter = 1003;
  l.NearestMipMapNearestFilter = 1004;
  l.NearestMipMapLinearFilter = 1005;
  l.LinearFilter = 1006;
  l.LinearMipMapNearestFilter = 1007;
  l.LinearMipMapLinearFilter = 1008;
  l.UnsignedByteType = 1009;
  l.ByteType = 1010;
  l.ShortType = 1011;
  l.UnsignedShortType = 1012;
  l.IntType = 1013;
  l.UnsignedIntType = 1014;
  l.FloatType = 1015;
  l.HalfFloatType = 1016;
  l.UnsignedShort4444Type = 1017;
  l.UnsignedShort5551Type = 1018;
  l.UnsignedShort565Type = 1019;
  l.UnsignedInt248Type = 1020;
  l.AlphaFormat = 1021;
  l.RGBFormat = 1022;
  l.RGBAFormat = 1023;
  l.LuminanceFormat = 1024;
  l.LuminanceAlphaFormat = 1025;
  l.RGBEFormat = 1023;
  l.DepthFormat = 1026;
  l.DepthStencilFormat = 1027;
  l.RedFormat = 1028;
  l.RGB_S3TC_DXT1_Format = 33776;
  l.RGBA_S3TC_DXT1_Format = 33777;
  l.RGBA_S3TC_DXT3_Format = 33778;
  l.RGBA_S3TC_DXT5_Format = 33779;
  l.RGB_PVRTC_4BPPV1_Format = 35840;
  l.RGB_PVRTC_2BPPV1_Format = 35841;
  l.RGBA_PVRTC_4BPPV1_Format = 35842;
  l.RGBA_PVRTC_2BPPV1_Format = 35843;
  l.RGB_ETC1_Format = 36196;
  l.RGBA_ASTC_4x4_Format = 37808;
  l.RGBA_ASTC_5x4_Format = 37809;
  l.RGBA_ASTC_5x5_Format = 37810;
  l.RGBA_ASTC_6x5_Format = 37811;
  l.RGBA_ASTC_6x6_Format = 37812;
  l.RGBA_ASTC_8x5_Format = 37813;
  l.RGBA_ASTC_8x6_Format = 37814;
  l.RGBA_ASTC_8x8_Format = 37815;
  l.RGBA_ASTC_10x5_Format = 37816;
  l.RGBA_ASTC_10x6_Format = 37817;
  l.RGBA_ASTC_10x8_Format = 37818;
  l.RGBA_ASTC_10x10_Format = 37819;
  l.RGBA_ASTC_12x10_Format = 37820;
  l.RGBA_ASTC_12x12_Format = 37821;
  l.LoopOnce = 2200;
  l.LoopRepeat = 2201;
  l.LoopPingPong = 2202;
  l.InterpolateDiscrete = 2300;
  l.InterpolateLinear = 2301;
  l.InterpolateSmooth = 2302;
  l.ZeroCurvatureEnding = 2400;
  l.ZeroSlopeEnding = 2401;
  l.WrapAroundEnding = 2402;
  l.TrianglesDrawMode = 0;
  l.TriangleStripDrawMode = 1;
  l.TriangleFanDrawMode = 2;
  l.LinearEncoding = 3E3;
  l.sRGBEncoding = 3001;
  l.GammaEncoding = 3007;
  l.RGBEEncoding = 3002;
  l.LogLuvEncoding = 3003;
  l.RGBM7Encoding = 3004;
  l.RGBM16Encoding = 3005;
  l.RGBDEncoding = 3006;
  l.BasicDepthPacking = 3200;
  l.RGBADepthPacking = 3201;
  l.TangentSpaceNormalMap = 0;
  l.ObjectSpaceNormalMap = 1;
  l.CubeGeometry = Kb;

  l.Face4 = function (a, b, c, d, e, f, g) {
    console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
    return new Xa(a, b, c, e, f, g);
  };

  l.LineStrip = 0;
  l.LinePieces = 1;

  l.MeshFaceMaterial = function (a) {
    console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return a;
  };

  l.MultiMaterial = function (a) {
    void 0 === a && (a = []);
    console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
    a.isMultiMaterial = !0;
    a.materials = a;

    a.clone = function () {
      return a.slice();
    };

    return a;
  };

  l.PointCloud = function (a, b) {
    console.warn("THREE.PointCloud has been renamed to THREE.Points.");
    return new Sb(a, b);
  };

  l.Particle = function (a) {
    console.warn("THREE.Particle has been renamed to THREE.Sprite.");
    return new Ec(a);
  };

  l.ParticleSystem = function (a, b) {
    console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new Sb(a, b);
  };

  l.PointCloudMaterial = function (a) {
    console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
    return new Ha(a);
  };

  l.ParticleBasicMaterial = function (a) {
    console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
    return new Ha(a);
  };

  l.ParticleSystemMaterial = function (a) {
    console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
    return new Ha(a);
  };

  l.Vertex = function (a, b, c) {
    console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new p(a, b, c);
  };

  l.DynamicBufferAttribute = function (a, b) {
    console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
    return new F(a, b).setDynamic(!0);
  };

  l.Int8Attribute = function (a, b) {
    console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
    return new sc(a, b);
  };

  l.Uint8Attribute = function (a, b) {
    console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
    return new tc(a, b);
  };

  l.Uint8ClampedAttribute = function (a, b) {
    console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
    return new uc(a, b);
  };

  l.Int16Attribute = function (a, b) {
    console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
    return new vc(a, b);
  };

  l.Uint16Attribute = function (a, b) {
    console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
    return new nb(a, b);
  };

  l.Int32Attribute = function (a, b) {
    console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
    return new wc(a, b);
  };

  l.Uint32Attribute = function (a, b) {
    console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
    return new ob(a, b);
  };

  l.Float32Attribute = function (a, b) {
    console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
    return new C(a, b);
  };

  l.Float64Attribute = function (a, b) {
    console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new xc(a, b);
  };

  l.ClosedSplineCurve3 = Ef;
  l.SplineCurve3 = Ff;
  l.Spline = Ee;

  l.AxisHelper = function (a) {
    console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
    return new qd(a);
  };

  l.BoundingBoxHelper = function (a, b) {
    console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
    return new bb(a, b);
  };

  l.EdgesHelper = function (a, b) {
    console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
    return new S(new ec(a.geometry), new T({
      color: void 0 !== b ? b : 16777215
    }));
  };

  l.WireframeHelper = function (a, b) {
    console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
    return new S(new Ub(a.geometry), new T({
      color: void 0 !== b ? b : 16777215
    }));
  };

  l.XHRLoader = function (a) {
    console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
    return new Fa(a);
  };

  l.BinaryTextureLoader = function (a) {
    console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
    return new he(a);
  };

  l.GeometryUtils = {
    merge: function merge(a, b, c) {
      console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");

      if (b.isMesh) {
        b.matrixAutoUpdate && b.updateMatrix();
        var d = b.matrix;
        b = b.geometry;
      }

      a.merge(b, d, c);
    },
    center: function center(a) {
      console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
      return a.center();
    }
  };

  l.Projector = function () {
    console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");

    this.projectVector = function (a, b) {
      console.warn("THREE.Projector: .projectVector() is now vector.project().");
      a.project(b);
    };

    this.unprojectVector = function (a, b) {
      console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
      a.unproject(b);
    };

    this.pickingRay = function () {
      console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
    };
  };

  l.CanvasRenderer = function () {
    console.error("THREE.CanvasRenderer has been removed");
  };

  l.SceneUtils = {
    createMultiMaterialObject: function createMultiMaterialObject() {
      console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
    },
    detach: function detach() {
      console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
    },
    attach: function attach() {
      console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
    }
  };

  l.LensFlare = function () {
    console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js");
  };

  Object.defineProperty(l, "__esModule", {
    value: !0
  });
});

/***/ }),

/***/ 0:
/*!************************************!*\
  !*** multi ./src/assets/js/app.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/yuehkchou/Documents/YuehWeb/src/assets/js/app.js */"./src/assets/js/app.js");


/***/ })

/******/ });
//# sourceMappingURL=app.js.map